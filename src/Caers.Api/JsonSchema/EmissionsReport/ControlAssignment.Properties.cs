//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct ControlAssignment
{
    /// <summary>
    /// JSON property name for <see cref = "AveragePercentApportionment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> AveragePercentApportionmentUtf8JsonPropertyName => "averagePercentApportionment"u8;

    /// <summary>
    /// JSON property name for <see cref = "AveragePercentApportionment"/>.
    /// </summary>
    public const string AveragePercentApportionmentJsonPropertyName = "averagePercentApportionment";
    /// <summary>
    /// JSON property name for <see cref = "ControlIdentification"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ControlIdentificationUtf8JsonPropertyName => "controlIdentification"u8;

    /// <summary>
    /// JSON property name for <see cref = "ControlIdentification"/>.
    /// </summary>
    public const string ControlIdentificationJsonPropertyName = "controlIdentification";
    /// <summary>
    /// JSON property name for <see cref = "MainControlIdentification"/>.
    /// </summary>
    public static ReadOnlySpan<byte> MainControlIdentificationUtf8JsonPropertyName => "mainControlIdentification"u8;

    /// <summary>
    /// JSON property name for <see cref = "MainControlIdentification"/>.
    /// </summary>
    public const string MainControlIdentificationJsonPropertyName = "mainControlIdentification";
    /// <summary>
    /// JSON property name for <see cref = "MainPathIdentification"/>.
    /// </summary>
    public static ReadOnlySpan<byte> MainPathIdentificationUtf8JsonPropertyName => "mainPathIdentification"u8;

    /// <summary>
    /// JSON property name for <see cref = "MainPathIdentification"/>.
    /// </summary>
    public const string MainPathIdentificationJsonPropertyName = "mainPathIdentification";
    /// <summary>
    /// JSON property name for <see cref = "PathIdentification"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PathIdentificationUtf8JsonPropertyName => "pathIdentification"u8;

    /// <summary>
    /// JSON property name for <see cref = "PathIdentification"/>.
    /// </summary>
    public const string PathIdentificationJsonPropertyName = "pathIdentification";
    /// <summary>
    /// JSON property name for <see cref = "SequenceNumber"/>.
    /// </summary>
    public static ReadOnlySpan<byte> SequenceNumberUtf8JsonPropertyName => "sequenceNumber"u8;

    /// <summary>
    /// JSON property name for <see cref = "SequenceNumber"/>.
    /// </summary>
    public const string SequenceNumberJsonPropertyName = "sequenceNumber";
    /// <summary>
    /// Gets AveragePercentApportionment.
    /// </summary>
    public Caers.Api.ControlAssignment.AveragePercentApportionmentEntity AveragePercentApportionment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(AveragePercentApportionmentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.ControlAssignment.AveragePercentApportionmentEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(AveragePercentApportionmentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.ControlAssignment.AveragePercentApportionmentEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ControlIdentification.
    /// </summary>
    public Caers.Api.ControlAssignment.IdentificationArray ControlIdentification
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ControlIdentificationUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.ControlAssignment.IdentificationArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ControlIdentificationJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.ControlAssignment.IdentificationArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MainControlIdentification.
    /// </summary>
    public Caers.Api.Identification MainControlIdentification
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MainControlIdentificationUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.Identification(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MainControlIdentificationJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.Identification>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MainPathIdentification.
    /// </summary>
    public Caers.Api.Identification MainPathIdentification
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MainPathIdentificationUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.Identification(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MainPathIdentificationJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.Identification>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PathIdentification.
    /// </summary>
    public Caers.Api.ControlAssignment.PathIdentificationIdentificationArray PathIdentification
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PathIdentificationUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.ControlAssignment.PathIdentificationIdentificationArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PathIdentificationJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.ControlAssignment.PathIdentificationIdentificationArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets SequenceNumber.
    /// </summary>
    public Corvus.Json.JsonInteger SequenceNumber
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(SequenceNumberUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(SequenceNumberJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "ControlAssignment"/>.
    /// </summary>
    public static ControlAssignment Create(Caers.Api.ControlAssignment.AveragePercentApportionmentEntity averagePercentApportionment, Corvus.Json.JsonInteger sequenceNumber, Caers.Api.ControlAssignment.IdentificationArray? controlIdentification = null, Caers.Api.Identification? mainControlIdentification = null, Caers.Api.Identification? mainPathIdentification = null, Caers.Api.ControlAssignment.PathIdentificationIdentificationArray? pathIdentification = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(AveragePercentApportionmentJsonPropertyName, averagePercentApportionment.AsAny);
        builder.Add(SequenceNumberJsonPropertyName, sequenceNumber.AsAny);
        if (controlIdentification is Caers.Api.ControlAssignment.IdentificationArray controlIdentification__)
        {
            builder.Add(ControlIdentificationJsonPropertyName, controlIdentification__.AsAny);
        }

        if (mainControlIdentification is Caers.Api.Identification mainControlIdentification__)
        {
            builder.Add(MainControlIdentificationJsonPropertyName, mainControlIdentification__.AsAny);
        }

        if (mainPathIdentification is Caers.Api.Identification mainPathIdentification__)
        {
            builder.Add(MainPathIdentificationJsonPropertyName, mainPathIdentification__.AsAny);
        }

        if (pathIdentification is Caers.Api.ControlAssignment.PathIdentificationIdentificationArray pathIdentification__)
        {
            builder.Add(PathIdentificationJsonPropertyName, pathIdentification__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets averagePercentApportionment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ControlAssignment WithAveragePercentApportionment(in Caers.Api.ControlAssignment.AveragePercentApportionmentEntity value)
    {
        return this.SetProperty(AveragePercentApportionmentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets controlIdentification.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ControlAssignment WithControlIdentification(in Caers.Api.ControlAssignment.IdentificationArray value)
    {
        return this.SetProperty(ControlIdentificationJsonPropertyName, value);
    }

    /// <summary>
    /// Sets mainControlIdentification.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ControlAssignment WithMainControlIdentification(in Caers.Api.Identification value)
    {
        return this.SetProperty(MainControlIdentificationJsonPropertyName, value);
    }

    /// <summary>
    /// Sets mainPathIdentification.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ControlAssignment WithMainPathIdentification(in Caers.Api.Identification value)
    {
        return this.SetProperty(MainPathIdentificationJsonPropertyName, value);
    }

    /// <summary>
    /// Sets pathIdentification.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ControlAssignment WithPathIdentification(in Caers.Api.ControlAssignment.PathIdentificationIdentificationArray value)
    {
        return this.SetProperty(PathIdentificationJsonPropertyName, value);
    }

    /// <summary>
    /// Sets sequenceNumber.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ControlAssignment WithSequenceNumber(in Corvus.Json.JsonInteger value)
    {
        return this.SetProperty(SequenceNumberJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateAveragePercentApportionment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.ControlAssignment.AveragePercentApportionmentEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateSequenceNumber(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonInteger>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateControlIdentification(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.ControlAssignment.IdentificationArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePathIdentification(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.ControlAssignment.PathIdentificationIdentificationArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMainPathIdentification(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.Identification>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMainControlIdentification(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.Identification>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(AveragePercentApportionmentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateAveragePercentApportionment;
                return true;
            }
            else if (property.NameEquals(SequenceNumberUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateSequenceNumber;
                return true;
            }
            else if (property.NameEquals(ControlIdentificationUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlIdentification;
                return true;
            }
            else if (property.NameEquals(PathIdentificationUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePathIdentification;
                return true;
            }
            else if (property.NameEquals(MainPathIdentificationUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateMainPathIdentification;
                return true;
            }
            else if (property.NameEquals(MainControlIdentificationUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateMainControlIdentification;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(AveragePercentApportionmentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateAveragePercentApportionment;
                return true;
            }
            else if (property.NameEquals(SequenceNumberJsonPropertyName))
            {
                propertyValidator = __CorvusValidateSequenceNumber;
                return true;
            }
            else if (property.NameEquals(ControlIdentificationJsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlIdentification;
                return true;
            }
            else if (property.NameEquals(PathIdentificationJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePathIdentification;
                return true;
            }
            else if (property.NameEquals(MainPathIdentificationJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMainPathIdentification;
                return true;
            }
            else if (property.NameEquals(MainControlIdentificationJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMainControlIdentification;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}