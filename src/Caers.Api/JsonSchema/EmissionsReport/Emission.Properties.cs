//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct Emission
{
    /// <summary>
    /// JSON property name for <see cref = "CalculatedEmissionsTons"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CalculatedEmissionsTonsUtf8JsonPropertyName => "calculatedEmissionsTons"u8;

    /// <summary>
    /// JSON property name for <see cref = "CalculatedEmissionsTons"/>.
    /// </summary>
    public const string CalculatedEmissionsTonsJsonPropertyName = "calculatedEmissionsTons";
    /// <summary>
    /// JSON property name for <see cref = "CalculationComment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CalculationCommentUtf8JsonPropertyName => "calculationComment"u8;

    /// <summary>
    /// JSON property name for <see cref = "CalculationComment"/>.
    /// </summary>
    public const string CalculationCommentJsonPropertyName = "calculationComment";
    /// <summary>
    /// JSON property name for <see cref = "Comment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CommentUtf8JsonPropertyName => "comment"u8;

    /// <summary>
    /// JSON property name for <see cref = "Comment"/>.
    /// </summary>
    public const string CommentJsonPropertyName = "comment";
    /// <summary>
    /// JSON property name for <see cref = "EmissionCalculationMethodCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionCalculationMethodCodeUtf8JsonPropertyName => "emissionCalculationMethodCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmissionCalculationMethodCode"/>.
    /// </summary>
    public const string EmissionCalculationMethodCodeJsonPropertyName = "emissionCalculationMethodCode";
    /// <summary>
    /// JSON property name for <see cref = "EmissionFactor"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionFactorUtf8JsonPropertyName => "emissionFactor"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmissionFactor"/>.
    /// </summary>
    public const string EmissionFactorJsonPropertyName = "emissionFactor";
    /// <summary>
    /// JSON property name for <see cref = "EmissionFactorDenominatorUnitofMeasureCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionFactorDenominatorUnitofMeasureCodeUtf8JsonPropertyName => "emissionFactorDenominatorUnitofMeasureCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmissionFactorDenominatorUnitofMeasureCode"/>.
    /// </summary>
    public const string EmissionFactorDenominatorUnitofMeasureCodeJsonPropertyName = "emissionFactorDenominatorUnitofMeasureCode";
    /// <summary>
    /// JSON property name for <see cref = "EmissionFactorFormula"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionFactorFormulaUtf8JsonPropertyName => "emissionFactorFormula"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmissionFactorFormula"/>.
    /// </summary>
    public const string EmissionFactorFormulaJsonPropertyName = "emissionFactorFormula";
    /// <summary>
    /// JSON property name for <see cref = "EmissionFactorNumeratorUnitofMeasureCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionFactorNumeratorUnitofMeasureCodeUtf8JsonPropertyName => "emissionFactorNumeratorUnitofMeasureCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmissionFactorNumeratorUnitofMeasureCode"/>.
    /// </summary>
    public const string EmissionFactorNumeratorUnitofMeasureCodeJsonPropertyName = "emissionFactorNumeratorUnitofMeasureCode";
    /// <summary>
    /// JSON property name for <see cref = "EmissionFactorText"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionFactorTextUtf8JsonPropertyName => "emissionFactorText"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmissionFactorText"/>.
    /// </summary>
    public const string EmissionFactorTextJsonPropertyName = "emissionFactorText";
    /// <summary>
    /// JSON property name for <see cref = "EmissionFormulaVariables"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionFormulaVariablesUtf8JsonPropertyName => "emissionFormulaVariables"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmissionFormulaVariables"/>.
    /// </summary>
    public const string EmissionFormulaVariablesJsonPropertyName = "emissionFormulaVariables";
    /// <summary>
    /// JSON property name for <see cref = "OverallControlPercent"/>.
    /// </summary>
    public static ReadOnlySpan<byte> OverallControlPercentUtf8JsonPropertyName => "overallControlPercent"u8;

    /// <summary>
    /// JSON property name for <see cref = "OverallControlPercent"/>.
    /// </summary>
    public const string OverallControlPercentJsonPropertyName = "overallControlPercent";
    /// <summary>
    /// JSON property name for <see cref = "PollutantCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PollutantCodeUtf8JsonPropertyName => "pollutantCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "PollutantCode"/>.
    /// </summary>
    public const string PollutantCodeJsonPropertyName = "pollutantCode";
    /// <summary>
    /// JSON property name for <see cref = "StackTestDate"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StackTestDateUtf8JsonPropertyName => "stackTestDate"u8;

    /// <summary>
    /// JSON property name for <see cref = "StackTestDate"/>.
    /// </summary>
    public const string StackTestDateJsonPropertyName = "stackTestDate";
    /// <summary>
    /// JSON property name for <see cref = "TotalEmissions"/>.
    /// </summary>
    public static ReadOnlySpan<byte> TotalEmissionsUtf8JsonPropertyName => "totalEmissions"u8;

    /// <summary>
    /// JSON property name for <see cref = "TotalEmissions"/>.
    /// </summary>
    public const string TotalEmissionsJsonPropertyName = "totalEmissions";
    /// <summary>
    /// JSON property name for <see cref = "TotalManualEntry"/>.
    /// </summary>
    public static ReadOnlySpan<byte> TotalManualEntryUtf8JsonPropertyName => "totalManualEntry"u8;

    /// <summary>
    /// JSON property name for <see cref = "TotalManualEntry"/>.
    /// </summary>
    public const string TotalManualEntryJsonPropertyName = "totalManualEntry";
    /// <summary>
    /// Gets CalculatedEmissionsTons.
    /// </summary>
    public Corvus.Json.JsonNumber CalculatedEmissionsTons
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CalculatedEmissionsTonsUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonNumber(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CalculatedEmissionsTonsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonNumber>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets CalculationComment.
    /// </summary>
    public Caers.Api.Emission.CalculationCommentEntity CalculationComment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CalculationCommentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.Emission.CalculationCommentEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CalculationCommentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.Emission.CalculationCommentEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Comment.
    /// </summary>
    public Caers.Api.Emission.CommentEntity Comment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CommentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.Emission.CommentEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CommentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.Emission.CommentEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EmissionCalculationMethodCode.
    /// </summary>
    public Caers.Api.LookupValue EmissionCalculationMethodCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionCalculationMethodCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.LookupValue(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionCalculationMethodCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.LookupValue>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EmissionFactor.
    /// </summary>
    public Corvus.Json.JsonNumber EmissionFactor
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionFactorUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonNumber(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionFactorJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonNumber>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EmissionFactorDenominatorUnitofMeasureCode.
    /// </summary>
    public Caers.Api.MeasureUnit EmissionFactorDenominatorUnitofMeasureCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionFactorDenominatorUnitofMeasureCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.MeasureUnit(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionFactorDenominatorUnitofMeasureCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.MeasureUnit>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EmissionFactorFormula.
    /// </summary>
    public Caers.Api.Emission.EmissionFactorFormulaEntity EmissionFactorFormula
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionFactorFormulaUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.Emission.EmissionFactorFormulaEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionFactorFormulaJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.Emission.EmissionFactorFormulaEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EmissionFactorNumeratorUnitofMeasureCode.
    /// </summary>
    public Caers.Api.MeasureUnit EmissionFactorNumeratorUnitofMeasureCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionFactorNumeratorUnitofMeasureCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.MeasureUnit(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionFactorNumeratorUnitofMeasureCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.MeasureUnit>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EmissionFactorText.
    /// </summary>
    public Caers.Api.Emission.EmissionFactorTextEntity EmissionFactorText
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionFactorTextUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.Emission.EmissionFactorTextEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionFactorTextJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.Emission.EmissionFactorTextEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EmissionFormulaVariables.
    /// </summary>
    public Caers.Api.Emission.EmissionFormulaVariableArray EmissionFormulaVariables
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionFormulaVariablesUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.Emission.EmissionFormulaVariableArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionFormulaVariablesJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.Emission.EmissionFormulaVariableArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets OverallControlPercent.
    /// </summary>
    public Caers.Api.Emission.OverallControlPercentEntity OverallControlPercent
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(OverallControlPercentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.Emission.OverallControlPercentEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(OverallControlPercentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.Emission.OverallControlPercentEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PollutantCode.
    /// </summary>
    public Caers.Api.Pollutant PollutantCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PollutantCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.Pollutant(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PollutantCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.Pollutant>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StackTestDate.
    /// </summary>
    public Corvus.Json.JsonDate StackTestDate
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StackTestDateUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDate(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StackTestDateJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDate>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets TotalEmissions.
    /// </summary>
    public Caers.Api.Measure TotalEmissions
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(TotalEmissionsUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.Measure(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(TotalEmissionsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.Measure>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets TotalManualEntry.
    /// </summary>
    public Corvus.Json.JsonBoolean TotalManualEntry
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(TotalManualEntryUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonBoolean(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(TotalManualEntryJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonBoolean>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "Emission"/>.
    /// </summary>
    public static Emission Create(Caers.Api.LookupValue emissionCalculationMethodCode, Caers.Api.Pollutant pollutantCode, Caers.Api.Measure totalEmissions, Corvus.Json.JsonNumber? calculatedEmissionsTons = null, Caers.Api.Emission.CalculationCommentEntity? calculationComment = null, Caers.Api.Emission.CommentEntity? comment = null, Corvus.Json.JsonNumber? emissionFactor = null, Caers.Api.MeasureUnit? emissionFactorDenominatorUnitofMeasureCode = null, Caers.Api.Emission.EmissionFactorFormulaEntity? emissionFactorFormula = null, Caers.Api.MeasureUnit? emissionFactorNumeratorUnitofMeasureCode = null, Caers.Api.Emission.EmissionFactorTextEntity? emissionFactorText = null, Caers.Api.Emission.EmissionFormulaVariableArray? emissionFormulaVariables = null, Caers.Api.Emission.OverallControlPercentEntity? overallControlPercent = null, Corvus.Json.JsonDate? stackTestDate = null, Corvus.Json.JsonBoolean? totalManualEntry = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(EmissionCalculationMethodCodeJsonPropertyName, emissionCalculationMethodCode.AsAny);
        builder.Add(PollutantCodeJsonPropertyName, pollutantCode.AsAny);
        builder.Add(TotalEmissionsJsonPropertyName, totalEmissions.AsAny);
        if (calculatedEmissionsTons is Corvus.Json.JsonNumber calculatedEmissionsTons__)
        {
            builder.Add(CalculatedEmissionsTonsJsonPropertyName, calculatedEmissionsTons__.AsAny);
        }

        if (calculationComment is Caers.Api.Emission.CalculationCommentEntity calculationComment__)
        {
            builder.Add(CalculationCommentJsonPropertyName, calculationComment__.AsAny);
        }

        if (comment is Caers.Api.Emission.CommentEntity comment__)
        {
            builder.Add(CommentJsonPropertyName, comment__.AsAny);
        }

        if (emissionFactor is Corvus.Json.JsonNumber emissionFactor__)
        {
            builder.Add(EmissionFactorJsonPropertyName, emissionFactor__.AsAny);
        }

        if (emissionFactorDenominatorUnitofMeasureCode is Caers.Api.MeasureUnit emissionFactorDenominatorUnitofMeasureCode__)
        {
            builder.Add(EmissionFactorDenominatorUnitofMeasureCodeJsonPropertyName, emissionFactorDenominatorUnitofMeasureCode__.AsAny);
        }

        if (emissionFactorFormula is Caers.Api.Emission.EmissionFactorFormulaEntity emissionFactorFormula__)
        {
            builder.Add(EmissionFactorFormulaJsonPropertyName, emissionFactorFormula__.AsAny);
        }

        if (emissionFactorNumeratorUnitofMeasureCode is Caers.Api.MeasureUnit emissionFactorNumeratorUnitofMeasureCode__)
        {
            builder.Add(EmissionFactorNumeratorUnitofMeasureCodeJsonPropertyName, emissionFactorNumeratorUnitofMeasureCode__.AsAny);
        }

        if (emissionFactorText is Caers.Api.Emission.EmissionFactorTextEntity emissionFactorText__)
        {
            builder.Add(EmissionFactorTextJsonPropertyName, emissionFactorText__.AsAny);
        }

        if (emissionFormulaVariables is Caers.Api.Emission.EmissionFormulaVariableArray emissionFormulaVariables__)
        {
            builder.Add(EmissionFormulaVariablesJsonPropertyName, emissionFormulaVariables__.AsAny);
        }

        if (overallControlPercent is Caers.Api.Emission.OverallControlPercentEntity overallControlPercent__)
        {
            builder.Add(OverallControlPercentJsonPropertyName, overallControlPercent__.AsAny);
        }

        if (stackTestDate is Corvus.Json.JsonDate stackTestDate__)
        {
            builder.Add(StackTestDateJsonPropertyName, stackTestDate__.AsAny);
        }

        if (totalManualEntry is Corvus.Json.JsonBoolean totalManualEntry__)
        {
            builder.Add(TotalManualEntryJsonPropertyName, totalManualEntry__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets calculatedEmissionsTons.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Emission WithCalculatedEmissionsTons(in Corvus.Json.JsonNumber value)
    {
        return this.SetProperty(CalculatedEmissionsTonsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets calculationComment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Emission WithCalculationComment(in Caers.Api.Emission.CalculationCommentEntity value)
    {
        return this.SetProperty(CalculationCommentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets comment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Emission WithComment(in Caers.Api.Emission.CommentEntity value)
    {
        return this.SetProperty(CommentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets emissionCalculationMethodCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Emission WithEmissionCalculationMethodCode(in Caers.Api.LookupValue value)
    {
        return this.SetProperty(EmissionCalculationMethodCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets emissionFactor.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Emission WithEmissionFactor(in Corvus.Json.JsonNumber value)
    {
        return this.SetProperty(EmissionFactorJsonPropertyName, value);
    }

    /// <summary>
    /// Sets emissionFactorDenominatorUnitofMeasureCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Emission WithEmissionFactorDenominatorUnitofMeasureCode(in Caers.Api.MeasureUnit value)
    {
        return this.SetProperty(EmissionFactorDenominatorUnitofMeasureCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets emissionFactorFormula.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Emission WithEmissionFactorFormula(in Caers.Api.Emission.EmissionFactorFormulaEntity value)
    {
        return this.SetProperty(EmissionFactorFormulaJsonPropertyName, value);
    }

    /// <summary>
    /// Sets emissionFactorNumeratorUnitofMeasureCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Emission WithEmissionFactorNumeratorUnitofMeasureCode(in Caers.Api.MeasureUnit value)
    {
        return this.SetProperty(EmissionFactorNumeratorUnitofMeasureCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets emissionFactorText.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Emission WithEmissionFactorText(in Caers.Api.Emission.EmissionFactorTextEntity value)
    {
        return this.SetProperty(EmissionFactorTextJsonPropertyName, value);
    }

    /// <summary>
    /// Sets emissionFormulaVariables.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Emission WithEmissionFormulaVariables(in Caers.Api.Emission.EmissionFormulaVariableArray value)
    {
        return this.SetProperty(EmissionFormulaVariablesJsonPropertyName, value);
    }

    /// <summary>
    /// Sets overallControlPercent.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Emission WithOverallControlPercent(in Caers.Api.Emission.OverallControlPercentEntity value)
    {
        return this.SetProperty(OverallControlPercentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets pollutantCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Emission WithPollutantCode(in Caers.Api.Pollutant value)
    {
        return this.SetProperty(PollutantCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets stackTestDate.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Emission WithStackTestDate(in Corvus.Json.JsonDate value)
    {
        return this.SetProperty(StackTestDateJsonPropertyName, value);
    }

    /// <summary>
    /// Sets totalEmissions.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Emission WithTotalEmissions(in Caers.Api.Measure value)
    {
        return this.SetProperty(TotalEmissionsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets totalManualEntry.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Emission WithTotalManualEntry(in Corvus.Json.JsonBoolean value)
    {
        return this.SetProperty(TotalManualEntryJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateEmissionCalculationMethodCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.LookupValue>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePollutantCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.Pollutant>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateTotalEmissions(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.Measure>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmissionFactorFormula(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.Emission.EmissionFactorFormulaEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmissionFormulaVariables(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.Emission.EmissionFormulaVariableArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateOverallControlPercent(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.Emission.OverallControlPercentEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateTotalManualEntry(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonBoolean>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateCalculatedEmissionsTons(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonNumber>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateCalculationComment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.Emission.CalculationCommentEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmissionFactor(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonNumber>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmissionFactorText(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.Emission.EmissionFactorTextEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmissionFactorNumeratorUnitofMeasureCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.MeasureUnit>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmissionFactorDenominatorUnitofMeasureCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.MeasureUnit>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateComment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.Emission.CommentEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStackTestDate(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDate>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(EmissionCalculationMethodCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionCalculationMethodCode;
                return true;
            }
            else if (property.NameEquals(PollutantCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePollutantCode;
                return true;
            }
            else if (property.NameEquals(TotalEmissionsUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateTotalEmissions;
                return true;
            }
            else if (property.NameEquals(EmissionFactorFormulaUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionFactorFormula;
                return true;
            }
            else if (property.NameEquals(EmissionFormulaVariablesUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionFormulaVariables;
                return true;
            }
            else if (property.NameEquals(OverallControlPercentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateOverallControlPercent;
                return true;
            }
            else if (property.NameEquals(TotalManualEntryUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateTotalManualEntry;
                return true;
            }
            else if (property.NameEquals(CalculatedEmissionsTonsUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculatedEmissionsTons;
                return true;
            }
            else if (property.NameEquals(CalculationCommentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationComment;
                return true;
            }
            else if (property.NameEquals(EmissionFactorUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionFactor;
                return true;
            }
            else if (property.NameEquals(EmissionFactorTextUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionFactorText;
                return true;
            }
            else if (property.NameEquals(EmissionFactorNumeratorUnitofMeasureCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionFactorNumeratorUnitofMeasureCode;
                return true;
            }
            else if (property.NameEquals(EmissionFactorDenominatorUnitofMeasureCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionFactorDenominatorUnitofMeasureCode;
                return true;
            }
            else if (property.NameEquals(CommentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateComment;
                return true;
            }
            else if (property.NameEquals(StackTestDateUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStackTestDate;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(EmissionCalculationMethodCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionCalculationMethodCode;
                return true;
            }
            else if (property.NameEquals(PollutantCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePollutantCode;
                return true;
            }
            else if (property.NameEquals(TotalEmissionsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateTotalEmissions;
                return true;
            }
            else if (property.NameEquals(EmissionFactorFormulaJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionFactorFormula;
                return true;
            }
            else if (property.NameEquals(EmissionFormulaVariablesJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionFormulaVariables;
                return true;
            }
            else if (property.NameEquals(OverallControlPercentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateOverallControlPercent;
                return true;
            }
            else if (property.NameEquals(TotalManualEntryJsonPropertyName))
            {
                propertyValidator = __CorvusValidateTotalManualEntry;
                return true;
            }
            else if (property.NameEquals(CalculatedEmissionsTonsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculatedEmissionsTons;
                return true;
            }
            else if (property.NameEquals(CalculationCommentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationComment;
                return true;
            }
            else if (property.NameEquals(EmissionFactorJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionFactor;
                return true;
            }
            else if (property.NameEquals(EmissionFactorTextJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionFactorText;
                return true;
            }
            else if (property.NameEquals(EmissionFactorNumeratorUnitofMeasureCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionFactorNumeratorUnitofMeasureCode;
                return true;
            }
            else if (property.NameEquals(EmissionFactorDenominatorUnitofMeasureCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionFactorDenominatorUnitofMeasureCode;
                return true;
            }
            else if (property.NameEquals(CommentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateComment;
                return true;
            }
            else if (property.NameEquals(StackTestDateJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStackTestDate;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}