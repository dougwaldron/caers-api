//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct Address
{
    /// <summary>
    /// JSON property name for <see cref = "AddressComment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> AddressCommentUtf8JsonPropertyName => "addressComment"u8;

    /// <summary>
    /// JSON property name for <see cref = "AddressComment"/>.
    /// </summary>
    public const string AddressCommentJsonPropertyName = "addressComment";
    /// <summary>
    /// JSON property name for <see cref = "AddressText"/>.
    /// </summary>
    public static ReadOnlySpan<byte> AddressTextUtf8JsonPropertyName => "addressText"u8;

    /// <summary>
    /// JSON property name for <see cref = "AddressText"/>.
    /// </summary>
    public const string AddressTextJsonPropertyName = "addressText";
    /// <summary>
    /// JSON property name for <see cref = "Country"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CountryUtf8JsonPropertyName => "country"u8;

    /// <summary>
    /// JSON property name for <see cref = "Country"/>.
    /// </summary>
    public const string CountryJsonPropertyName = "country";
    /// <summary>
    /// JSON property name for <see cref = "County"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CountyUtf8JsonPropertyName => "county"u8;

    /// <summary>
    /// JSON property name for <see cref = "County"/>.
    /// </summary>
    public const string CountyJsonPropertyName = "county";
    /// <summary>
    /// JSON property name for <see cref = "LocalityIsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> LocalityIsReadOnlyUtf8JsonPropertyName => "localityIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "LocalityIsReadOnly"/>.
    /// </summary>
    public const string LocalityIsReadOnlyJsonPropertyName = "localityIsReadOnly";
    /// <summary>
    /// JSON property name for <see cref = "LocalityName"/>.
    /// </summary>
    public static ReadOnlySpan<byte> LocalityNameUtf8JsonPropertyName => "localityName"u8;

    /// <summary>
    /// JSON property name for <see cref = "LocalityName"/>.
    /// </summary>
    public const string LocalityNameJsonPropertyName = "localityName";
    /// <summary>
    /// JSON property name for <see cref = "LocationAddressIsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> LocationAddressIsReadOnlyUtf8JsonPropertyName => "locationAddressIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "LocationAddressIsReadOnly"/>.
    /// </summary>
    public const string LocationAddressIsReadOnlyJsonPropertyName = "locationAddressIsReadOnly";
    /// <summary>
    /// JSON property name for <see cref = "PostalCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PostalCodeUtf8JsonPropertyName => "postalCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "PostalCode"/>.
    /// </summary>
    public const string PostalCodeJsonPropertyName = "postalCode";
    /// <summary>
    /// JSON property name for <see cref = "PostalCodeIsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PostalCodeIsReadOnlyUtf8JsonPropertyName => "postalCodeIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "PostalCodeIsReadOnly"/>.
    /// </summary>
    public const string PostalCodeIsReadOnlyJsonPropertyName = "postalCodeIsReadOnly";
    /// <summary>
    /// JSON property name for <see cref = "State"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StateUtf8JsonPropertyName => "state"u8;

    /// <summary>
    /// JSON property name for <see cref = "State"/>.
    /// </summary>
    public const string StateJsonPropertyName = "state";
    /// <summary>
    /// JSON property name for <see cref = "SupplementalAddressText"/>.
    /// </summary>
    public static ReadOnlySpan<byte> SupplementalAddressTextUtf8JsonPropertyName => "supplementalAddressText"u8;

    /// <summary>
    /// JSON property name for <see cref = "SupplementalAddressText"/>.
    /// </summary>
    public const string SupplementalAddressTextJsonPropertyName = "supplementalAddressText";
    /// <summary>
    /// Gets AddressComment.
    /// </summary>
    public Corvus.Json.JsonString AddressComment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(AddressCommentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(AddressCommentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets AddressText.
    /// </summary>
    public Caers.Api.Address.AddressTextEntity AddressText
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(AddressTextUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.Address.AddressTextEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(AddressTextJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.Address.AddressTextEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Country.
    /// </summary>
    public Caers.Api.Country Country
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CountryUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.Country(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CountryJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.Country>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets County.
    /// </summary>
    public Caers.Api.County County
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CountyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.County(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CountyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.County>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets LocalityIsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString LocalityIsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(LocalityIsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(LocalityIsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets LocalityName.
    /// </summary>
    public Caers.Api.Address.LocalityNameEntity LocalityName
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(LocalityNameUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.Address.LocalityNameEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(LocalityNameJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.Address.LocalityNameEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets LocationAddressIsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString LocationAddressIsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(LocationAddressIsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(LocationAddressIsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PostalCode.
    /// </summary>
    public Caers.Api.Address.PostalCodeEntity PostalCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PostalCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.Address.PostalCodeEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PostalCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.Address.PostalCodeEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PostalCodeIsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString PostalCodeIsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PostalCodeIsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PostalCodeIsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets State.
    /// </summary>
    public Caers.Api.State State
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StateUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.State(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StateJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.State>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets SupplementalAddressText.
    /// </summary>
    public Corvus.Json.JsonString SupplementalAddressText
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(SupplementalAddressTextUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(SupplementalAddressTextJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "Address"/>.
    /// </summary>
    public static Address Create(Caers.Api.Address.AddressTextEntity addressText, Caers.Api.Address.LocalityNameEntity localityName, Caers.Api.Address.PostalCodeEntity postalCode, Caers.Api.State state, Corvus.Json.JsonString? addressComment = null, Caers.Api.Country? country = null, Caers.Api.County? county = null, Corvus.Json.JsonString? localityIsReadOnly = null, Corvus.Json.JsonString? locationAddressIsReadOnly = null, Corvus.Json.JsonString? postalCodeIsReadOnly = null, Corvus.Json.JsonString? supplementalAddressText = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(AddressTextJsonPropertyName, addressText.AsAny);
        builder.Add(LocalityNameJsonPropertyName, localityName.AsAny);
        builder.Add(PostalCodeJsonPropertyName, postalCode.AsAny);
        builder.Add(StateJsonPropertyName, state.AsAny);
        if (addressComment is Corvus.Json.JsonString addressComment__)
        {
            builder.Add(AddressCommentJsonPropertyName, addressComment__.AsAny);
        }

        if (country is Caers.Api.Country country__)
        {
            builder.Add(CountryJsonPropertyName, country__.AsAny);
        }

        if (county is Caers.Api.County county__)
        {
            builder.Add(CountyJsonPropertyName, county__.AsAny);
        }

        if (localityIsReadOnly is Corvus.Json.JsonString localityIsReadOnly__)
        {
            builder.Add(LocalityIsReadOnlyJsonPropertyName, localityIsReadOnly__.AsAny);
        }

        if (locationAddressIsReadOnly is Corvus.Json.JsonString locationAddressIsReadOnly__)
        {
            builder.Add(LocationAddressIsReadOnlyJsonPropertyName, locationAddressIsReadOnly__.AsAny);
        }

        if (postalCodeIsReadOnly is Corvus.Json.JsonString postalCodeIsReadOnly__)
        {
            builder.Add(PostalCodeIsReadOnlyJsonPropertyName, postalCodeIsReadOnly__.AsAny);
        }

        if (supplementalAddressText is Corvus.Json.JsonString supplementalAddressText__)
        {
            builder.Add(SupplementalAddressTextJsonPropertyName, supplementalAddressText__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets addressComment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Address WithAddressComment(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(AddressCommentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets addressText.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Address WithAddressText(in Caers.Api.Address.AddressTextEntity value)
    {
        return this.SetProperty(AddressTextJsonPropertyName, value);
    }

    /// <summary>
    /// Sets country.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Address WithCountry(in Caers.Api.Country value)
    {
        return this.SetProperty(CountryJsonPropertyName, value);
    }

    /// <summary>
    /// Sets county.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Address WithCounty(in Caers.Api.County value)
    {
        return this.SetProperty(CountyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets localityIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Address WithLocalityIsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(LocalityIsReadOnlyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets localityName.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Address WithLocalityName(in Caers.Api.Address.LocalityNameEntity value)
    {
        return this.SetProperty(LocalityNameJsonPropertyName, value);
    }

    /// <summary>
    /// Sets locationAddressIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Address WithLocationAddressIsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(LocationAddressIsReadOnlyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets postalCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Address WithPostalCode(in Caers.Api.Address.PostalCodeEntity value)
    {
        return this.SetProperty(PostalCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets postalCodeIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Address WithPostalCodeIsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(PostalCodeIsReadOnlyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets state.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Address WithState(in Caers.Api.State value)
    {
        return this.SetProperty(StateJsonPropertyName, value);
    }

    /// <summary>
    /// Sets supplementalAddressText.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Address WithSupplementalAddressText(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(SupplementalAddressTextJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateAddressText(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.Address.AddressTextEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateLocalityName(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.Address.LocalityNameEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePostalCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.Address.PostalCodeEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateState(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.State>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateSupplementalAddressText(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateCounty(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.County>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateCountry(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.Country>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateAddressComment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateLocationAddressIsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateLocalityIsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePostalCodeIsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(AddressTextUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateAddressText;
                return true;
            }
            else if (property.NameEquals(LocalityNameUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateLocalityName;
                return true;
            }
            else if (property.NameEquals(PostalCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePostalCode;
                return true;
            }
            else if (property.NameEquals(StateUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateState;
                return true;
            }
            else if (property.NameEquals(SupplementalAddressTextUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateSupplementalAddressText;
                return true;
            }
            else if (property.NameEquals(CountyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateCounty;
                return true;
            }
            else if (property.NameEquals(CountryUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateCountry;
                return true;
            }
            else if (property.NameEquals(AddressCommentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateAddressComment;
                return true;
            }
            else if (property.NameEquals(LocationAddressIsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateLocationAddressIsReadOnly;
                return true;
            }
            else if (property.NameEquals(LocalityIsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateLocalityIsReadOnly;
                return true;
            }
            else if (property.NameEquals(PostalCodeIsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePostalCodeIsReadOnly;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(AddressTextJsonPropertyName))
            {
                propertyValidator = __CorvusValidateAddressText;
                return true;
            }
            else if (property.NameEquals(LocalityNameJsonPropertyName))
            {
                propertyValidator = __CorvusValidateLocalityName;
                return true;
            }
            else if (property.NameEquals(PostalCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePostalCode;
                return true;
            }
            else if (property.NameEquals(StateJsonPropertyName))
            {
                propertyValidator = __CorvusValidateState;
                return true;
            }
            else if (property.NameEquals(SupplementalAddressTextJsonPropertyName))
            {
                propertyValidator = __CorvusValidateSupplementalAddressText;
                return true;
            }
            else if (property.NameEquals(CountyJsonPropertyName))
            {
                propertyValidator = __CorvusValidateCounty;
                return true;
            }
            else if (property.NameEquals(CountryJsonPropertyName))
            {
                propertyValidator = __CorvusValidateCountry;
                return true;
            }
            else if (property.NameEquals(AddressCommentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateAddressComment;
                return true;
            }
            else if (property.NameEquals(LocationAddressIsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidateLocationAddressIsReadOnly;
                return true;
            }
            else if (property.NameEquals(LocalityIsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidateLocalityIsReadOnly;
                return true;
            }
            else if (property.NameEquals(PostalCodeIsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePostalCodeIsReadOnly;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}