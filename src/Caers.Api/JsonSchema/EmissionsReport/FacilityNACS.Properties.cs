//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct FacilityNACS
{
    /// <summary>
    /// JSON property name for <see cref = "Code"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CodeUtf8JsonPropertyName => "code"u8;

    /// <summary>
    /// JSON property name for <see cref = "Code"/>.
    /// </summary>
    public const string CodeJsonPropertyName = "code";
    /// <summary>
    /// JSON property name for <see cref = "NaicsCodeType"/>.
    /// </summary>
    public static ReadOnlySpan<byte> NaicsCodeTypeUtf8JsonPropertyName => "naicsCodeType"u8;

    /// <summary>
    /// JSON property name for <see cref = "NaicsCodeType"/>.
    /// </summary>
    public const string NaicsCodeTypeJsonPropertyName = "naicsCodeType";
    /// <summary>
    /// Gets Code.
    /// </summary>
    public Caers.Api.FacilityNACS.CodeEntity Code
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.FacilityNACS.CodeEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.FacilityNACS.CodeEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets NaicsCodeType.
    /// </summary>
    public Caers.Api.FacilityNACS.NaicsCodeTypeEntity NaicsCodeType
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(NaicsCodeTypeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.FacilityNACS.NaicsCodeTypeEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(NaicsCodeTypeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.FacilityNACS.NaicsCodeTypeEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "FacilityNACS"/>.
    /// </summary>
    public static FacilityNACS Create(Caers.Api.FacilityNACS.CodeEntity code, Caers.Api.FacilityNACS.NaicsCodeTypeEntity naicsCodeType)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(CodeJsonPropertyName, code.AsAny);
        builder.Add(NaicsCodeTypeJsonPropertyName, naicsCodeType.AsAny);
        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets code.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilityNACS WithCode(in Caers.Api.FacilityNACS.CodeEntity value)
    {
        return this.SetProperty(CodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets naicsCodeType.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilityNACS WithNaicsCodeType(in Caers.Api.FacilityNACS.NaicsCodeTypeEntity value)
    {
        return this.SetProperty(NaicsCodeTypeJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.FacilityNACS.CodeEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateNaicsCodeType(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.FacilityNACS.NaicsCodeTypeEntity>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(CodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateCode;
                return true;
            }
            else if (property.NameEquals(NaicsCodeTypeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateNaicsCodeType;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(CodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateCode;
                return true;
            }
            else if (property.NameEquals(NaicsCodeTypeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateNaicsCodeType;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}