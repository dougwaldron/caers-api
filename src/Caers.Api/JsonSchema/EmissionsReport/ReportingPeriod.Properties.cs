//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct ReportingPeriod
{
    /// <summary>
    /// JSON property name for <see cref = "CalculationDataSource"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CalculationDataSourceUtf8JsonPropertyName => "calculationDataSource"u8;

    /// <summary>
    /// JSON property name for <see cref = "CalculationDataSource"/>.
    /// </summary>
    public const string CalculationDataSourceJsonPropertyName = "calculationDataSource";
    /// <summary>
    /// JSON property name for <see cref = "CalculationDataYear"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CalculationDataYearUtf8JsonPropertyName => "calculationDataYear"u8;

    /// <summary>
    /// JSON property name for <see cref = "CalculationDataYear"/>.
    /// </summary>
    public const string CalculationDataYearJsonPropertyName = "calculationDataYear";
    /// <summary>
    /// JSON property name for <see cref = "CalculationMaterialCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CalculationMaterialCodeUtf8JsonPropertyName => "calculationMaterialCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "CalculationMaterialCode"/>.
    /// </summary>
    public const string CalculationMaterialCodeJsonPropertyName = "calculationMaterialCode";
    /// <summary>
    /// JSON property name for <see cref = "CalculationParameter"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CalculationParameterUtf8JsonPropertyName => "calculationParameter"u8;

    /// <summary>
    /// JSON property name for <see cref = "CalculationParameter"/>.
    /// </summary>
    public const string CalculationParameterJsonPropertyName = "calculationParameter";
    /// <summary>
    /// JSON property name for <see cref = "CalculationParameterTypeCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CalculationParameterTypeCodeUtf8JsonPropertyName => "calculationParameterTypeCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "CalculationParameterTypeCode"/>.
    /// </summary>
    public const string CalculationParameterTypeCodeJsonPropertyName = "calculationParameterTypeCode";
    /// <summary>
    /// JSON property name for <see cref = "Comment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CommentUtf8JsonPropertyName => "comment"u8;

    /// <summary>
    /// JSON property name for <see cref = "Comment"/>.
    /// </summary>
    public const string CommentJsonPropertyName = "comment";
    /// <summary>
    /// JSON property name for <see cref = "Emissions"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionsUtf8JsonPropertyName => "emissions"u8;

    /// <summary>
    /// JSON property name for <see cref = "Emissions"/>.
    /// </summary>
    public const string EmissionsJsonPropertyName = "emissions";
    /// <summary>
    /// JSON property name for <see cref = "EmissionsOperatingTypeCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionsOperatingTypeCodeUtf8JsonPropertyName => "emissionsOperatingTypeCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmissionsOperatingTypeCode"/>.
    /// </summary>
    public const string EmissionsOperatingTypeCodeJsonPropertyName = "emissionsOperatingTypeCode";
    /// <summary>
    /// JSON property name for <see cref = "EndDate"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EndDateUtf8JsonPropertyName => "endDate"u8;

    /// <summary>
    /// JSON property name for <see cref = "EndDate"/>.
    /// </summary>
    public const string EndDateJsonPropertyName = "endDate";
    /// <summary>
    /// JSON property name for <see cref = "FuelUse"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FuelUseUtf8JsonPropertyName => "fuelUse"u8;

    /// <summary>
    /// JSON property name for <see cref = "FuelUse"/>.
    /// </summary>
    public const string FuelUseJsonPropertyName = "fuelUse";
    /// <summary>
    /// JSON property name for <see cref = "FuelUseMaterialCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FuelUseMaterialCodeUtf8JsonPropertyName => "fuelUseMaterialCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "FuelUseMaterialCode"/>.
    /// </summary>
    public const string FuelUseMaterialCodeJsonPropertyName = "fuelUseMaterialCode";
    /// <summary>
    /// JSON property name for <see cref = "HeatContent"/>.
    /// </summary>
    public static ReadOnlySpan<byte> HeatContentUtf8JsonPropertyName => "heatContent"u8;

    /// <summary>
    /// JSON property name for <see cref = "HeatContent"/>.
    /// </summary>
    public const string HeatContentJsonPropertyName = "heatContent";
    /// <summary>
    /// JSON property name for <see cref = "OperatingDetails"/>.
    /// </summary>
    public static ReadOnlySpan<byte> OperatingDetailsUtf8JsonPropertyName => "operatingDetails"u8;

    /// <summary>
    /// JSON property name for <see cref = "OperatingDetails"/>.
    /// </summary>
    public const string OperatingDetailsJsonPropertyName = "operatingDetails";
    /// <summary>
    /// JSON property name for <see cref = "ReportingPeriodTypeCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ReportingPeriodTypeCodeUtf8JsonPropertyName => "reportingPeriodTypeCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "ReportingPeriodTypeCode"/>.
    /// </summary>
    public const string ReportingPeriodTypeCodeJsonPropertyName = "reportingPeriodTypeCode";
    /// <summary>
    /// JSON property name for <see cref = "StartDate"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StartDateUtf8JsonPropertyName => "startDate"u8;

    /// <summary>
    /// JSON property name for <see cref = "StartDate"/>.
    /// </summary>
    public const string StartDateJsonPropertyName = "startDate";
    /// <summary>
    /// JSON property name for <see cref = "SupplementalCalculationParameter"/>.
    /// </summary>
    public static ReadOnlySpan<byte> SupplementalCalculationParameterUtf8JsonPropertyName => "supplementalCalculationParameter"u8;

    /// <summary>
    /// JSON property name for <see cref = "SupplementalCalculationParameter"/>.
    /// </summary>
    public const string SupplementalCalculationParameterJsonPropertyName = "supplementalCalculationParameter";
    /// <summary>
    /// Gets CalculationDataSource.
    /// </summary>
    public Corvus.Json.JsonString CalculationDataSource
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CalculationDataSourceUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CalculationDataSourceJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets CalculationDataYear.
    /// </summary>
    public Corvus.Json.JsonInteger CalculationDataYear
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CalculationDataYearUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CalculationDataYearJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets CalculationMaterialCode.
    /// </summary>
    public Caers.Api.LookupValue CalculationMaterialCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CalculationMaterialCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.LookupValue(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CalculationMaterialCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.LookupValue>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets CalculationParameter.
    /// </summary>
    public Caers.Api.Measure CalculationParameter
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CalculationParameterUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.Measure(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CalculationParameterJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.Measure>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets CalculationParameterTypeCode.
    /// </summary>
    public Caers.Api.LookupValue CalculationParameterTypeCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CalculationParameterTypeCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.LookupValue(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CalculationParameterTypeCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.LookupValue>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Comment.
    /// </summary>
    public Caers.Api.ReportingPeriod.CommentEntity Comment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CommentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.ReportingPeriod.CommentEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CommentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.ReportingPeriod.CommentEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Emissions.
    /// </summary>
    public Caers.Api.ReportingPeriod.EmissionArray Emissions
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionsUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.ReportingPeriod.EmissionArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.ReportingPeriod.EmissionArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EmissionsOperatingTypeCode.
    /// </summary>
    public Caers.Api.LookupValue EmissionsOperatingTypeCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionsOperatingTypeCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.LookupValue(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionsOperatingTypeCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.LookupValue>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EndDate.
    /// </summary>
    public Corvus.Json.JsonDate EndDate
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EndDateUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDate(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EndDateJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDate>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FuelUse.
    /// </summary>
    public Caers.Api.Measure FuelUse
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FuelUseUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.Measure(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FuelUseJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.Measure>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FuelUseMaterialCode.
    /// </summary>
    public Caers.Api.LookupValue FuelUseMaterialCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FuelUseMaterialCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.LookupValue(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FuelUseMaterialCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.LookupValue>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets HeatContent.
    /// </summary>
    public Caers.Api.Measure HeatContent
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(HeatContentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.Measure(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(HeatContentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.Measure>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets OperatingDetails.
    /// </summary>
    public Caers.Api.ReportingPeriod.OperatingDetailsOperatingDetailsArray OperatingDetails
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(OperatingDetailsUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.ReportingPeriod.OperatingDetailsOperatingDetailsArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(OperatingDetailsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.ReportingPeriod.OperatingDetailsOperatingDetailsArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ReportingPeriodTypeCode.
    /// </summary>
    public Caers.Api.LookupValue ReportingPeriodTypeCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ReportingPeriodTypeCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.LookupValue(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ReportingPeriodTypeCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.LookupValue>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StartDate.
    /// </summary>
    public Corvus.Json.JsonDate StartDate
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StartDateUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDate(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StartDateJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDate>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets SupplementalCalculationParameter.
    /// </summary>
    public Caers.Api.ReportingPeriod.SupplementalCalculationParameterDataTypeArray SupplementalCalculationParameter
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(SupplementalCalculationParameterUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.ReportingPeriod.SupplementalCalculationParameterDataTypeArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(SupplementalCalculationParameterJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.ReportingPeriod.SupplementalCalculationParameterDataTypeArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "ReportingPeriod"/>.
    /// </summary>
    public static ReportingPeriod Create(Caers.Api.LookupValue calculationMaterialCode, Caers.Api.Measure calculationParameter, Caers.Api.LookupValue calculationParameterTypeCode, Caers.Api.LookupValue emissionsOperatingTypeCode, Caers.Api.LookupValue reportingPeriodTypeCode, Corvus.Json.JsonString? calculationDataSource = null, Corvus.Json.JsonInteger? calculationDataYear = null, Caers.Api.ReportingPeriod.CommentEntity? comment = null, Caers.Api.ReportingPeriod.EmissionArray? emissions = null, Corvus.Json.JsonDate? endDate = null, Caers.Api.Measure? fuelUse = null, Caers.Api.LookupValue? fuelUseMaterialCode = null, Caers.Api.Measure? heatContent = null, Caers.Api.ReportingPeriod.OperatingDetailsOperatingDetailsArray? operatingDetails = null, Corvus.Json.JsonDate? startDate = null, Caers.Api.ReportingPeriod.SupplementalCalculationParameterDataTypeArray? supplementalCalculationParameter = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(CalculationMaterialCodeJsonPropertyName, calculationMaterialCode.AsAny);
        builder.Add(CalculationParameterJsonPropertyName, calculationParameter.AsAny);
        builder.Add(CalculationParameterTypeCodeJsonPropertyName, calculationParameterTypeCode.AsAny);
        builder.Add(EmissionsOperatingTypeCodeJsonPropertyName, emissionsOperatingTypeCode.AsAny);
        builder.Add(ReportingPeriodTypeCodeJsonPropertyName, reportingPeriodTypeCode.AsAny);
        if (calculationDataSource is Corvus.Json.JsonString calculationDataSource__)
        {
            builder.Add(CalculationDataSourceJsonPropertyName, calculationDataSource__.AsAny);
        }

        if (calculationDataYear is Corvus.Json.JsonInteger calculationDataYear__)
        {
            builder.Add(CalculationDataYearJsonPropertyName, calculationDataYear__.AsAny);
        }

        if (comment is Caers.Api.ReportingPeriod.CommentEntity comment__)
        {
            builder.Add(CommentJsonPropertyName, comment__.AsAny);
        }

        if (emissions is Caers.Api.ReportingPeriod.EmissionArray emissions__)
        {
            builder.Add(EmissionsJsonPropertyName, emissions__.AsAny);
        }

        if (endDate is Corvus.Json.JsonDate endDate__)
        {
            builder.Add(EndDateJsonPropertyName, endDate__.AsAny);
        }

        if (fuelUse is Caers.Api.Measure fuelUse__)
        {
            builder.Add(FuelUseJsonPropertyName, fuelUse__.AsAny);
        }

        if (fuelUseMaterialCode is Caers.Api.LookupValue fuelUseMaterialCode__)
        {
            builder.Add(FuelUseMaterialCodeJsonPropertyName, fuelUseMaterialCode__.AsAny);
        }

        if (heatContent is Caers.Api.Measure heatContent__)
        {
            builder.Add(HeatContentJsonPropertyName, heatContent__.AsAny);
        }

        if (operatingDetails is Caers.Api.ReportingPeriod.OperatingDetailsOperatingDetailsArray operatingDetails__)
        {
            builder.Add(OperatingDetailsJsonPropertyName, operatingDetails__.AsAny);
        }

        if (startDate is Corvus.Json.JsonDate startDate__)
        {
            builder.Add(StartDateJsonPropertyName, startDate__.AsAny);
        }

        if (supplementalCalculationParameter is Caers.Api.ReportingPeriod.SupplementalCalculationParameterDataTypeArray supplementalCalculationParameter__)
        {
            builder.Add(SupplementalCalculationParameterJsonPropertyName, supplementalCalculationParameter__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets calculationDataSource.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriod WithCalculationDataSource(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(CalculationDataSourceJsonPropertyName, value);
    }

    /// <summary>
    /// Sets calculationDataYear.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriod WithCalculationDataYear(in Corvus.Json.JsonInteger value)
    {
        return this.SetProperty(CalculationDataYearJsonPropertyName, value);
    }

    /// <summary>
    /// Sets calculationMaterialCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriod WithCalculationMaterialCode(in Caers.Api.LookupValue value)
    {
        return this.SetProperty(CalculationMaterialCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets calculationParameter.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriod WithCalculationParameter(in Caers.Api.Measure value)
    {
        return this.SetProperty(CalculationParameterJsonPropertyName, value);
    }

    /// <summary>
    /// Sets calculationParameterTypeCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriod WithCalculationParameterTypeCode(in Caers.Api.LookupValue value)
    {
        return this.SetProperty(CalculationParameterTypeCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets comment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriod WithComment(in Caers.Api.ReportingPeriod.CommentEntity value)
    {
        return this.SetProperty(CommentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets emissions.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriod WithEmissions(in Caers.Api.ReportingPeriod.EmissionArray value)
    {
        return this.SetProperty(EmissionsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets emissionsOperatingTypeCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriod WithEmissionsOperatingTypeCode(in Caers.Api.LookupValue value)
    {
        return this.SetProperty(EmissionsOperatingTypeCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets endDate.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriod WithEndDate(in Corvus.Json.JsonDate value)
    {
        return this.SetProperty(EndDateJsonPropertyName, value);
    }

    /// <summary>
    /// Sets fuelUse.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriod WithFuelUse(in Caers.Api.Measure value)
    {
        return this.SetProperty(FuelUseJsonPropertyName, value);
    }

    /// <summary>
    /// Sets fuelUseMaterialCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriod WithFuelUseMaterialCode(in Caers.Api.LookupValue value)
    {
        return this.SetProperty(FuelUseMaterialCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets heatContent.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriod WithHeatContent(in Caers.Api.Measure value)
    {
        return this.SetProperty(HeatContentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets operatingDetails.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriod WithOperatingDetails(in Caers.Api.ReportingPeriod.OperatingDetailsOperatingDetailsArray value)
    {
        return this.SetProperty(OperatingDetailsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets reportingPeriodTypeCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriod WithReportingPeriodTypeCode(in Caers.Api.LookupValue value)
    {
        return this.SetProperty(ReportingPeriodTypeCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets startDate.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriod WithStartDate(in Corvus.Json.JsonDate value)
    {
        return this.SetProperty(StartDateJsonPropertyName, value);
    }

    /// <summary>
    /// Sets supplementalCalculationParameter.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriod WithSupplementalCalculationParameter(in Caers.Api.ReportingPeriod.SupplementalCalculationParameterDataTypeArray value)
    {
        return this.SetProperty(SupplementalCalculationParameterJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateCalculationMaterialCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.LookupValue>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateCalculationParameter(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.Measure>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateCalculationParameterTypeCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.LookupValue>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmissionsOperatingTypeCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.LookupValue>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateReportingPeriodTypeCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.LookupValue>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFuelUse(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.Measure>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFuelUseMaterialCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.LookupValue>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateHeatContent(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.Measure>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateComment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.ReportingPeriod.CommentEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateOperatingDetails(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.ReportingPeriod.OperatingDetailsOperatingDetailsArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmissions(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.ReportingPeriod.EmissionArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStartDate(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDate>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEndDate(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDate>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateCalculationDataYear(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonInteger>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateCalculationDataSource(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateSupplementalCalculationParameter(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.ReportingPeriod.SupplementalCalculationParameterDataTypeArray>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(CalculationMaterialCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationMaterialCode;
                return true;
            }
            else if (property.NameEquals(CalculationParameterUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationParameter;
                return true;
            }
            else if (property.NameEquals(CalculationParameterTypeCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationParameterTypeCode;
                return true;
            }
            else if (property.NameEquals(EmissionsOperatingTypeCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionsOperatingTypeCode;
                return true;
            }
            else if (property.NameEquals(ReportingPeriodTypeCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateReportingPeriodTypeCode;
                return true;
            }
            else if (property.NameEquals(FuelUseUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFuelUse;
                return true;
            }
            else if (property.NameEquals(FuelUseMaterialCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFuelUseMaterialCode;
                return true;
            }
            else if (property.NameEquals(HeatContentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateHeatContent;
                return true;
            }
            else if (property.NameEquals(CommentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateComment;
                return true;
            }
            else if (property.NameEquals(OperatingDetailsUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateOperatingDetails;
                return true;
            }
            else if (property.NameEquals(EmissionsUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissions;
                return true;
            }
            else if (property.NameEquals(StartDateUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStartDate;
                return true;
            }
            else if (property.NameEquals(EndDateUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEndDate;
                return true;
            }
            else if (property.NameEquals(CalculationDataYearUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationDataYear;
                return true;
            }
            else if (property.NameEquals(CalculationDataSourceUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationDataSource;
                return true;
            }
            else if (property.NameEquals(SupplementalCalculationParameterUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateSupplementalCalculationParameter;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(CalculationMaterialCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationMaterialCode;
                return true;
            }
            else if (property.NameEquals(CalculationParameterJsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationParameter;
                return true;
            }
            else if (property.NameEquals(CalculationParameterTypeCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationParameterTypeCode;
                return true;
            }
            else if (property.NameEquals(EmissionsOperatingTypeCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionsOperatingTypeCode;
                return true;
            }
            else if (property.NameEquals(ReportingPeriodTypeCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateReportingPeriodTypeCode;
                return true;
            }
            else if (property.NameEquals(FuelUseJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFuelUse;
                return true;
            }
            else if (property.NameEquals(FuelUseMaterialCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFuelUseMaterialCode;
                return true;
            }
            else if (property.NameEquals(HeatContentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateHeatContent;
                return true;
            }
            else if (property.NameEquals(CommentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateComment;
                return true;
            }
            else if (property.NameEquals(OperatingDetailsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateOperatingDetails;
                return true;
            }
            else if (property.NameEquals(EmissionsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissions;
                return true;
            }
            else if (property.NameEquals(StartDateJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStartDate;
                return true;
            }
            else if (property.NameEquals(EndDateJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEndDate;
                return true;
            }
            else if (property.NameEquals(CalculationDataYearJsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationDataYear;
                return true;
            }
            else if (property.NameEquals(CalculationDataSourceJsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationDataSource;
                return true;
            }
            else if (property.NameEquals(SupplementalCalculationParameterJsonPropertyName))
            {
                propertyValidator = __CorvusValidateSupplementalCalculationParameter;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}