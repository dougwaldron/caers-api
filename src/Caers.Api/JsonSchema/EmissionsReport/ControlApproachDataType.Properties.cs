//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct ControlApproachDataType
{
    /// <summary>
    /// JSON property name for <see cref = "ControlApproachComment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ControlApproachCommentUtf8JsonPropertyName => "controlApproachComment"u8;

    /// <summary>
    /// JSON property name for <see cref = "ControlApproachComment"/>.
    /// </summary>
    public const string ControlApproachCommentJsonPropertyName = "controlApproachComment";
    /// <summary>
    /// JSON property name for <see cref = "ControlApproachDescription"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ControlApproachDescriptionUtf8JsonPropertyName => "controlApproachDescription"u8;

    /// <summary>
    /// JSON property name for <see cref = "ControlApproachDescription"/>.
    /// </summary>
    public const string ControlApproachDescriptionJsonPropertyName = "controlApproachDescription";
    /// <summary>
    /// JSON property name for <see cref = "ControlMeasure"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ControlMeasureUtf8JsonPropertyName => "controlMeasure"u8;

    /// <summary>
    /// JSON property name for <see cref = "ControlMeasure"/>.
    /// </summary>
    public const string ControlMeasureJsonPropertyName = "controlMeasure";
    /// <summary>
    /// JSON property name for <see cref = "ControlPollutant"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ControlPollutantUtf8JsonPropertyName => "controlPollutant"u8;

    /// <summary>
    /// JSON property name for <see cref = "ControlPollutant"/>.
    /// </summary>
    public const string ControlPollutantJsonPropertyName = "controlPollutant";
    /// <summary>
    /// JSON property name for <see cref = "FirstInventoryYear"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FirstInventoryYearUtf8JsonPropertyName => "firstInventoryYear"u8;

    /// <summary>
    /// JSON property name for <see cref = "FirstInventoryYear"/>.
    /// </summary>
    public const string FirstInventoryYearJsonPropertyName = "firstInventoryYear";
    /// <summary>
    /// JSON property name for <see cref = "LastInventoryYear"/>.
    /// </summary>
    public static ReadOnlySpan<byte> LastInventoryYearUtf8JsonPropertyName => "lastInventoryYear"u8;

    /// <summary>
    /// JSON property name for <see cref = "LastInventoryYear"/>.
    /// </summary>
    public const string LastInventoryYearJsonPropertyName = "lastInventoryYear";
    /// <summary>
    /// JSON property name for <see cref = "PercentControlApproachCaptureEfficiency"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PercentControlApproachCaptureEfficiencyUtf8JsonPropertyName => "percentControlApproachCaptureEfficiency"u8;

    /// <summary>
    /// JSON property name for <see cref = "PercentControlApproachCaptureEfficiency"/>.
    /// </summary>
    public const string PercentControlApproachCaptureEfficiencyJsonPropertyName = "percentControlApproachCaptureEfficiency";
    /// <summary>
    /// JSON property name for <see cref = "PercentControlApproachEffectiveness"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PercentControlApproachEffectivenessUtf8JsonPropertyName => "percentControlApproachEffectiveness"u8;

    /// <summary>
    /// JSON property name for <see cref = "PercentControlApproachEffectiveness"/>.
    /// </summary>
    public const string PercentControlApproachEffectivenessJsonPropertyName = "percentControlApproachEffectiveness";
    /// <summary>
    /// JSON property name for <see cref = "PercentControlApproachPenetration"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PercentControlApproachPenetrationUtf8JsonPropertyName => "percentControlApproachPenetration"u8;

    /// <summary>
    /// JSON property name for <see cref = "PercentControlApproachPenetration"/>.
    /// </summary>
    public const string PercentControlApproachPenetrationJsonPropertyName = "percentControlApproachPenetration";
    /// <summary>
    /// Gets ControlApproachComment.
    /// </summary>
    public Corvus.Json.JsonString ControlApproachComment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ControlApproachCommentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ControlApproachCommentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ControlApproachDescription.
    /// </summary>
    public Corvus.Json.JsonString ControlApproachDescription
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ControlApproachDescriptionUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ControlApproachDescriptionJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ControlMeasure.
    /// </summary>
    public Caers.Api.ControlApproachDataType.ControlMeasureDataTypeArray ControlMeasure
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ControlMeasureUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.ControlApproachDataType.ControlMeasureDataTypeArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ControlMeasureJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.ControlApproachDataType.ControlMeasureDataTypeArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ControlPollutant.
    /// </summary>
    public Caers.Api.ControlApproachDataType.ControlPollutantDataTypeArray ControlPollutant
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ControlPollutantUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.ControlApproachDataType.ControlPollutantDataTypeArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ControlPollutantJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.ControlApproachDataType.ControlPollutantDataTypeArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FirstInventoryYear.
    /// </summary>
    public Corvus.Json.JsonDateTime FirstInventoryYear
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FirstInventoryYearUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDateTime(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FirstInventoryYearJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDateTime>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets LastInventoryYear.
    /// </summary>
    public Corvus.Json.JsonDateTime LastInventoryYear
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(LastInventoryYearUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDateTime(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(LastInventoryYearJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDateTime>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PercentControlApproachCaptureEfficiency.
    /// </summary>
    public Corvus.Json.JsonString PercentControlApproachCaptureEfficiency
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PercentControlApproachCaptureEfficiencyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PercentControlApproachCaptureEfficiencyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PercentControlApproachEffectiveness.
    /// </summary>
    public Corvus.Json.JsonString PercentControlApproachEffectiveness
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PercentControlApproachEffectivenessUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PercentControlApproachEffectivenessJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PercentControlApproachPenetration.
    /// </summary>
    public Corvus.Json.JsonString PercentControlApproachPenetration
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PercentControlApproachPenetrationUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PercentControlApproachPenetrationJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "ControlApproachDataType"/>.
    /// </summary>
    public static ControlApproachDataType Create(Caers.Api.ControlApproachDataType.ControlMeasureDataTypeArray controlMeasure, Caers.Api.ControlApproachDataType.ControlPollutantDataTypeArray controlPollutant, Corvus.Json.JsonString? controlApproachComment = null, Corvus.Json.JsonString? controlApproachDescription = null, Corvus.Json.JsonDateTime? firstInventoryYear = null, Corvus.Json.JsonDateTime? lastInventoryYear = null, Corvus.Json.JsonString? percentControlApproachCaptureEfficiency = null, Corvus.Json.JsonString? percentControlApproachEffectiveness = null, Corvus.Json.JsonString? percentControlApproachPenetration = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(ControlMeasureJsonPropertyName, controlMeasure.AsAny);
        builder.Add(ControlPollutantJsonPropertyName, controlPollutant.AsAny);
        if (controlApproachComment is Corvus.Json.JsonString controlApproachComment__)
        {
            builder.Add(ControlApproachCommentJsonPropertyName, controlApproachComment__.AsAny);
        }

        if (controlApproachDescription is Corvus.Json.JsonString controlApproachDescription__)
        {
            builder.Add(ControlApproachDescriptionJsonPropertyName, controlApproachDescription__.AsAny);
        }

        if (firstInventoryYear is Corvus.Json.JsonDateTime firstInventoryYear__)
        {
            builder.Add(FirstInventoryYearJsonPropertyName, firstInventoryYear__.AsAny);
        }

        if (lastInventoryYear is Corvus.Json.JsonDateTime lastInventoryYear__)
        {
            builder.Add(LastInventoryYearJsonPropertyName, lastInventoryYear__.AsAny);
        }

        if (percentControlApproachCaptureEfficiency is Corvus.Json.JsonString percentControlApproachCaptureEfficiency__)
        {
            builder.Add(PercentControlApproachCaptureEfficiencyJsonPropertyName, percentControlApproachCaptureEfficiency__.AsAny);
        }

        if (percentControlApproachEffectiveness is Corvus.Json.JsonString percentControlApproachEffectiveness__)
        {
            builder.Add(PercentControlApproachEffectivenessJsonPropertyName, percentControlApproachEffectiveness__.AsAny);
        }

        if (percentControlApproachPenetration is Corvus.Json.JsonString percentControlApproachPenetration__)
        {
            builder.Add(PercentControlApproachPenetrationJsonPropertyName, percentControlApproachPenetration__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets controlApproachComment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ControlApproachDataType WithControlApproachComment(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(ControlApproachCommentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets controlApproachDescription.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ControlApproachDataType WithControlApproachDescription(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(ControlApproachDescriptionJsonPropertyName, value);
    }

    /// <summary>
    /// Sets controlMeasure.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ControlApproachDataType WithControlMeasure(in Caers.Api.ControlApproachDataType.ControlMeasureDataTypeArray value)
    {
        return this.SetProperty(ControlMeasureJsonPropertyName, value);
    }

    /// <summary>
    /// Sets controlPollutant.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ControlApproachDataType WithControlPollutant(in Caers.Api.ControlApproachDataType.ControlPollutantDataTypeArray value)
    {
        return this.SetProperty(ControlPollutantJsonPropertyName, value);
    }

    /// <summary>
    /// Sets firstInventoryYear.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ControlApproachDataType WithFirstInventoryYear(in Corvus.Json.JsonDateTime value)
    {
        return this.SetProperty(FirstInventoryYearJsonPropertyName, value);
    }

    /// <summary>
    /// Sets lastInventoryYear.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ControlApproachDataType WithLastInventoryYear(in Corvus.Json.JsonDateTime value)
    {
        return this.SetProperty(LastInventoryYearJsonPropertyName, value);
    }

    /// <summary>
    /// Sets percentControlApproachCaptureEfficiency.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ControlApproachDataType WithPercentControlApproachCaptureEfficiency(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(PercentControlApproachCaptureEfficiencyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets percentControlApproachEffectiveness.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ControlApproachDataType WithPercentControlApproachEffectiveness(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(PercentControlApproachEffectivenessJsonPropertyName, value);
    }

    /// <summary>
    /// Sets percentControlApproachPenetration.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ControlApproachDataType WithPercentControlApproachPenetration(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(PercentControlApproachPenetrationJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateControlMeasure(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.ControlApproachDataType.ControlMeasureDataTypeArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateControlPollutant(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.ControlApproachDataType.ControlPollutantDataTypeArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateControlApproachDescription(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePercentControlApproachCaptureEfficiency(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePercentControlApproachEffectiveness(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePercentControlApproachPenetration(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFirstInventoryYear(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDateTime>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateLastInventoryYear(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDateTime>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateControlApproachComment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(ControlMeasureUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlMeasure;
                return true;
            }
            else if (property.NameEquals(ControlPollutantUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlPollutant;
                return true;
            }
            else if (property.NameEquals(ControlApproachDescriptionUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlApproachDescription;
                return true;
            }
            else if (property.NameEquals(PercentControlApproachCaptureEfficiencyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePercentControlApproachCaptureEfficiency;
                return true;
            }
            else if (property.NameEquals(PercentControlApproachEffectivenessUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePercentControlApproachEffectiveness;
                return true;
            }
            else if (property.NameEquals(PercentControlApproachPenetrationUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePercentControlApproachPenetration;
                return true;
            }
            else if (property.NameEquals(FirstInventoryYearUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFirstInventoryYear;
                return true;
            }
            else if (property.NameEquals(LastInventoryYearUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateLastInventoryYear;
                return true;
            }
            else if (property.NameEquals(ControlApproachCommentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlApproachComment;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(ControlMeasureJsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlMeasure;
                return true;
            }
            else if (property.NameEquals(ControlPollutantJsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlPollutant;
                return true;
            }
            else if (property.NameEquals(ControlApproachDescriptionJsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlApproachDescription;
                return true;
            }
            else if (property.NameEquals(PercentControlApproachCaptureEfficiencyJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePercentControlApproachCaptureEfficiency;
                return true;
            }
            else if (property.NameEquals(PercentControlApproachEffectivenessJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePercentControlApproachEffectiveness;
                return true;
            }
            else if (property.NameEquals(PercentControlApproachPenetrationJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePercentControlApproachPenetration;
                return true;
            }
            else if (property.NameEquals(FirstInventoryYearJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFirstInventoryYear;
                return true;
            }
            else if (property.NameEquals(LastInventoryYearJsonPropertyName))
            {
                propertyValidator = __CorvusValidateLastInventoryYear;
                return true;
            }
            else if (property.NameEquals(ControlApproachCommentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlApproachComment;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}