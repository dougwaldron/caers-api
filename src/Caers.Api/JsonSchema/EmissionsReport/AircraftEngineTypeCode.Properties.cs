//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct AircraftEngineTypeCode
{
    /// <summary>
    /// JSON property name for <see cref = "Code"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CodeUtf8JsonPropertyName => "code"u8;

    /// <summary>
    /// JSON property name for <see cref = "Code"/>.
    /// </summary>
    public const string CodeJsonPropertyName = "code";
    /// <summary>
    /// JSON property name for <see cref = "EdmsAccode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EdmsAccodeUtf8JsonPropertyName => "edmsAccode"u8;

    /// <summary>
    /// JSON property name for <see cref = "EdmsAccode"/>.
    /// </summary>
    public const string EdmsAccodeJsonPropertyName = "edmsAccode";
    /// <summary>
    /// JSON property name for <see cref = "EdmsUid"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EdmsUidUtf8JsonPropertyName => "edmsUid"u8;

    /// <summary>
    /// JSON property name for <see cref = "EdmsUid"/>.
    /// </summary>
    public const string EdmsUidJsonPropertyName = "edmsUid";
    /// <summary>
    /// JSON property name for <see cref = "Engine"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EngineUtf8JsonPropertyName => "engine"u8;

    /// <summary>
    /// JSON property name for <see cref = "Engine"/>.
    /// </summary>
    public const string EngineJsonPropertyName = "engine";
    /// <summary>
    /// JSON property name for <see cref = "EngineManufacturer"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EngineManufacturerUtf8JsonPropertyName => "engineManufacturer"u8;

    /// <summary>
    /// JSON property name for <see cref = "EngineManufacturer"/>.
    /// </summary>
    public const string EngineManufacturerJsonPropertyName = "engineManufacturer";
    /// <summary>
    /// JSON property name for <see cref = "FaaAircraftType"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FaaAircraftTypeUtf8JsonPropertyName => "faaAircraftType"u8;

    /// <summary>
    /// JSON property name for <see cref = "FaaAircraftType"/>.
    /// </summary>
    public const string FaaAircraftTypeJsonPropertyName = "faaAircraftType";
    /// <summary>
    /// Gets Code.
    /// </summary>
    public Caers.Api.AircraftEngineTypeCode.CodeEntity Code
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.AircraftEngineTypeCode.CodeEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.AircraftEngineTypeCode.CodeEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EdmsAccode.
    /// </summary>
    public Corvus.Json.JsonString EdmsAccode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EdmsAccodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EdmsAccodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EdmsUid.
    /// </summary>
    public Corvus.Json.JsonString EdmsUid
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EdmsUidUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EdmsUidJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Engine.
    /// </summary>
    public Corvus.Json.JsonString Engine
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EngineUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EngineJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EngineManufacturer.
    /// </summary>
    public Corvus.Json.JsonString EngineManufacturer
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EngineManufacturerUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EngineManufacturerJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FaaAircraftType.
    /// </summary>
    public Corvus.Json.JsonString FaaAircraftType
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FaaAircraftTypeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FaaAircraftTypeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "AircraftEngineTypeCode"/>.
    /// </summary>
    public static AircraftEngineTypeCode Create(Caers.Api.AircraftEngineTypeCode.CodeEntity code, Corvus.Json.JsonString? edmsAccode = null, Corvus.Json.JsonString? edmsUid = null, Corvus.Json.JsonString? engine = null, Corvus.Json.JsonString? engineManufacturer = null, Corvus.Json.JsonString? faaAircraftType = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(CodeJsonPropertyName, code.AsAny);
        if (edmsAccode is Corvus.Json.JsonString edmsAccode__)
        {
            builder.Add(EdmsAccodeJsonPropertyName, edmsAccode__.AsAny);
        }

        if (edmsUid is Corvus.Json.JsonString edmsUid__)
        {
            builder.Add(EdmsUidJsonPropertyName, edmsUid__.AsAny);
        }

        if (engine is Corvus.Json.JsonString engine__)
        {
            builder.Add(EngineJsonPropertyName, engine__.AsAny);
        }

        if (engineManufacturer is Corvus.Json.JsonString engineManufacturer__)
        {
            builder.Add(EngineManufacturerJsonPropertyName, engineManufacturer__.AsAny);
        }

        if (faaAircraftType is Corvus.Json.JsonString faaAircraftType__)
        {
            builder.Add(FaaAircraftTypeJsonPropertyName, faaAircraftType__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets code.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public AircraftEngineTypeCode WithCode(in Caers.Api.AircraftEngineTypeCode.CodeEntity value)
    {
        return this.SetProperty(CodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets edmsAccode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public AircraftEngineTypeCode WithEdmsAccode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EdmsAccodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets edmsUid.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public AircraftEngineTypeCode WithEdmsUid(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EdmsUidJsonPropertyName, value);
    }

    /// <summary>
    /// Sets engine.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public AircraftEngineTypeCode WithEngine(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EngineJsonPropertyName, value);
    }

    /// <summary>
    /// Sets engineManufacturer.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public AircraftEngineTypeCode WithEngineManufacturer(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EngineManufacturerJsonPropertyName, value);
    }

    /// <summary>
    /// Sets faaAircraftType.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public AircraftEngineTypeCode WithFaaAircraftType(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(FaaAircraftTypeJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.AircraftEngineTypeCode.CodeEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFaaAircraftType(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEdmsAccode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEngineManufacturer(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEngine(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEdmsUid(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(CodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateCode;
                return true;
            }
            else if (property.NameEquals(FaaAircraftTypeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFaaAircraftType;
                return true;
            }
            else if (property.NameEquals(EdmsAccodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEdmsAccode;
                return true;
            }
            else if (property.NameEquals(EngineManufacturerUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEngineManufacturer;
                return true;
            }
            else if (property.NameEquals(EngineUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEngine;
                return true;
            }
            else if (property.NameEquals(EdmsUidUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEdmsUid;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(CodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateCode;
                return true;
            }
            else if (property.NameEquals(FaaAircraftTypeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFaaAircraftType;
                return true;
            }
            else if (property.NameEquals(EdmsAccodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEdmsAccode;
                return true;
            }
            else if (property.NameEquals(EngineManufacturerJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEngineManufacturer;
                return true;
            }
            else if (property.NameEquals(EngineJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEngine;
                return true;
            }
            else if (property.NameEquals(EdmsUidJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEdmsUid;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}