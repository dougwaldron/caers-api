//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct EventReportingPeriodDataType
{
    /// <summary>
    /// JSON property name for <see cref = "BeginHour"/>.
    /// </summary>
    public static ReadOnlySpan<byte> BeginHourUtf8JsonPropertyName => "beginHour"u8;

    /// <summary>
    /// JSON property name for <see cref = "BeginHour"/>.
    /// </summary>
    public const string BeginHourJsonPropertyName = "beginHour";
    /// <summary>
    /// JSON property name for <see cref = "EndHour"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EndHourUtf8JsonPropertyName => "endHour"u8;

    /// <summary>
    /// JSON property name for <see cref = "EndHour"/>.
    /// </summary>
    public const string EndHourJsonPropertyName = "endHour";
    /// <summary>
    /// JSON property name for <see cref = "EventBeginDate"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EventBeginDateUtf8JsonPropertyName => "eventBeginDate"u8;

    /// <summary>
    /// JSON property name for <see cref = "EventBeginDate"/>.
    /// </summary>
    public const string EventBeginDateJsonPropertyName = "eventBeginDate";
    /// <summary>
    /// JSON property name for <see cref = "EventEndDate"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EventEndDateUtf8JsonPropertyName => "eventEndDate"u8;

    /// <summary>
    /// JSON property name for <see cref = "EventEndDate"/>.
    /// </summary>
    public const string EventEndDateJsonPropertyName = "eventEndDate";
    /// <summary>
    /// JSON property name for <see cref = "EventLocation"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EventLocationUtf8JsonPropertyName => "eventLocation"u8;

    /// <summary>
    /// JSON property name for <see cref = "EventLocation"/>.
    /// </summary>
    public const string EventLocationJsonPropertyName = "eventLocation";
    /// <summary>
    /// JSON property name for <see cref = "EventReportingPeriodComment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EventReportingPeriodCommentUtf8JsonPropertyName => "eventReportingPeriodComment"u8;

    /// <summary>
    /// JSON property name for <see cref = "EventReportingPeriodComment"/>.
    /// </summary>
    public const string EventReportingPeriodCommentJsonPropertyName = "eventReportingPeriodComment";
    /// <summary>
    /// JSON property name for <see cref = "EventStageCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EventStageCodeUtf8JsonPropertyName => "eventStageCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "EventStageCode"/>.
    /// </summary>
    public const string EventStageCodeJsonPropertyName = "eventStageCode";
    /// <summary>
    /// Gets BeginHour.
    /// </summary>
    public Corvus.Json.JsonString BeginHour
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(BeginHourUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(BeginHourJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EndHour.
    /// </summary>
    public Corvus.Json.JsonString EndHour
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EndHourUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EndHourJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EventBeginDate.
    /// </summary>
    public Corvus.Json.JsonDateTime EventBeginDate
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EventBeginDateUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDateTime(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EventBeginDateJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDateTime>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EventEndDate.
    /// </summary>
    public Corvus.Json.JsonDateTime EventEndDate
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EventEndDateUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDateTime(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EventEndDateJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDateTime>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EventLocation.
    /// </summary>
    public Caers.Api.EventReportingPeriodDataType.EventLocationDataTypeArray EventLocation
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EventLocationUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.EventReportingPeriodDataType.EventLocationDataTypeArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EventLocationJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.EventReportingPeriodDataType.EventLocationDataTypeArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EventReportingPeriodComment.
    /// </summary>
    public Corvus.Json.JsonString EventReportingPeriodComment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EventReportingPeriodCommentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EventReportingPeriodCommentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EventStageCode.
    /// </summary>
    public Corvus.Json.JsonString EventStageCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EventStageCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EventStageCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "EventReportingPeriodDataType"/>.
    /// </summary>
    public static EventReportingPeriodDataType Create(Corvus.Json.JsonDateTime eventBeginDate, Corvus.Json.JsonDateTime eventEndDate, Caers.Api.EventReportingPeriodDataType.EventLocationDataTypeArray eventLocation, Corvus.Json.JsonString? beginHour = null, Corvus.Json.JsonString? endHour = null, Corvus.Json.JsonString? eventReportingPeriodComment = null, Corvus.Json.JsonString? eventStageCode = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(EventBeginDateJsonPropertyName, eventBeginDate.AsAny);
        builder.Add(EventEndDateJsonPropertyName, eventEndDate.AsAny);
        builder.Add(EventLocationJsonPropertyName, eventLocation.AsAny);
        if (beginHour is Corvus.Json.JsonString beginHour__)
        {
            builder.Add(BeginHourJsonPropertyName, beginHour__.AsAny);
        }

        if (endHour is Corvus.Json.JsonString endHour__)
        {
            builder.Add(EndHourJsonPropertyName, endHour__.AsAny);
        }

        if (eventReportingPeriodComment is Corvus.Json.JsonString eventReportingPeriodComment__)
        {
            builder.Add(EventReportingPeriodCommentJsonPropertyName, eventReportingPeriodComment__.AsAny);
        }

        if (eventStageCode is Corvus.Json.JsonString eventStageCode__)
        {
            builder.Add(EventStageCodeJsonPropertyName, eventStageCode__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets beginHour.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventReportingPeriodDataType WithBeginHour(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(BeginHourJsonPropertyName, value);
    }

    /// <summary>
    /// Sets endHour.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventReportingPeriodDataType WithEndHour(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EndHourJsonPropertyName, value);
    }

    /// <summary>
    /// Sets eventBeginDate.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventReportingPeriodDataType WithEventBeginDate(in Corvus.Json.JsonDateTime value)
    {
        return this.SetProperty(EventBeginDateJsonPropertyName, value);
    }

    /// <summary>
    /// Sets eventEndDate.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventReportingPeriodDataType WithEventEndDate(in Corvus.Json.JsonDateTime value)
    {
        return this.SetProperty(EventEndDateJsonPropertyName, value);
    }

    /// <summary>
    /// Sets eventLocation.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventReportingPeriodDataType WithEventLocation(in Caers.Api.EventReportingPeriodDataType.EventLocationDataTypeArray value)
    {
        return this.SetProperty(EventLocationJsonPropertyName, value);
    }

    /// <summary>
    /// Sets eventReportingPeriodComment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventReportingPeriodDataType WithEventReportingPeriodComment(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EventReportingPeriodCommentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets eventStageCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventReportingPeriodDataType WithEventStageCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EventStageCodeJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateEventBeginDate(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDateTime>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEventEndDate(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDateTime>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEventLocation(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.EventReportingPeriodDataType.EventLocationDataTypeArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEventStageCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateBeginHour(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEndHour(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEventReportingPeriodComment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(EventBeginDateUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventBeginDate;
                return true;
            }
            else if (property.NameEquals(EventEndDateUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventEndDate;
                return true;
            }
            else if (property.NameEquals(EventLocationUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventLocation;
                return true;
            }
            else if (property.NameEquals(EventStageCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventStageCode;
                return true;
            }
            else if (property.NameEquals(BeginHourUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateBeginHour;
                return true;
            }
            else if (property.NameEquals(EndHourUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEndHour;
                return true;
            }
            else if (property.NameEquals(EventReportingPeriodCommentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventReportingPeriodComment;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(EventBeginDateJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventBeginDate;
                return true;
            }
            else if (property.NameEquals(EventEndDateJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventEndDate;
                return true;
            }
            else if (property.NameEquals(EventLocationJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventLocation;
                return true;
            }
            else if (property.NameEquals(EventStageCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventStageCode;
                return true;
            }
            else if (property.NameEquals(BeginHourJsonPropertyName))
            {
                propertyValidator = __CorvusValidateBeginHour;
                return true;
            }
            else if (property.NameEquals(EndHourJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEndHour;
                return true;
            }
            else if (property.NameEquals(EventReportingPeriodCommentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventReportingPeriodComment;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}