//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct EmissionsProcess
{
    /// <summary>
    /// JSON property name for <see cref = "AircraftEngineTypeCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> AircraftEngineTypeCodeUtf8JsonPropertyName => "aircraftEngineTypeCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "AircraftEngineTypeCode"/>.
    /// </summary>
    public const string AircraftEngineTypeCodeJsonPropertyName = "aircraftEngineTypeCode";
    /// <summary>
    /// JSON property name for <see cref = "Comment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CommentUtf8JsonPropertyName => "comment"u8;

    /// <summary>
    /// JSON property name for <see cref = "Comment"/>.
    /// </summary>
    public const string CommentJsonPropertyName = "comment";
    /// <summary>
    /// JSON property name for <see cref = "DeleteReportingPeriod"/>.
    /// </summary>
    public static ReadOnlySpan<byte> DeleteReportingPeriodUtf8JsonPropertyName => "deleteReportingPeriod"u8;

    /// <summary>
    /// JSON property name for <see cref = "DeleteReportingPeriod"/>.
    /// </summary>
    public const string DeleteReportingPeriodJsonPropertyName = "deleteReportingPeriod";
    /// <summary>
    /// JSON property name for <see cref = "Description"/>.
    /// </summary>
    public static ReadOnlySpan<byte> DescriptionUtf8JsonPropertyName => "description"u8;

    /// <summary>
    /// JSON property name for <see cref = "Description"/>.
    /// </summary>
    public const string DescriptionJsonPropertyName = "description";
    /// <summary>
    /// JSON property name for <see cref = "EmissionsTypeCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionsTypeCodeUtf8JsonPropertyName => "emissionsTypeCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmissionsTypeCode"/>.
    /// </summary>
    public const string EmissionsTypeCodeJsonPropertyName = "emissionsTypeCode";
    /// <summary>
    /// JSON property name for <see cref = "Identification"/>.
    /// </summary>
    public static ReadOnlySpan<byte> IdentificationUtf8JsonPropertyName => "identification"u8;

    /// <summary>
    /// JSON property name for <see cref = "Identification"/>.
    /// </summary>
    public const string IdentificationJsonPropertyName = "identification";
    /// <summary>
    /// JSON property name for <see cref = "InsignificantSource"/>.
    /// </summary>
    public static ReadOnlySpan<byte> InsignificantSourceUtf8JsonPropertyName => "insignificantSource"u8;

    /// <summary>
    /// JSON property name for <see cref = "InsignificantSource"/>.
    /// </summary>
    public const string InsignificantSourceJsonPropertyName = "insignificantSource";
    /// <summary>
    /// JSON property name for <see cref = "IsBillable"/>.
    /// </summary>
    public static ReadOnlySpan<byte> IsBillableUtf8JsonPropertyName => "isBillable"u8;

    /// <summary>
    /// JSON property name for <see cref = "IsBillable"/>.
    /// </summary>
    public const string IsBillableJsonPropertyName = "isBillable";
    /// <summary>
    /// JSON property name for <see cref = "MainIdentification"/>.
    /// </summary>
    public static ReadOnlySpan<byte> MainIdentificationUtf8JsonPropertyName => "mainIdentification"u8;

    /// <summary>
    /// JSON property name for <see cref = "MainIdentification"/>.
    /// </summary>
    public const string MainIdentificationJsonPropertyName = "mainIdentification";
    /// <summary>
    /// JSON property name for <see cref = "MaximumTheoreticalEmissions"/>.
    /// </summary>
    public static ReadOnlySpan<byte> MaximumTheoreticalEmissionsUtf8JsonPropertyName => "maximumTheoreticalEmissions"u8;

    /// <summary>
    /// JSON property name for <see cref = "MaximumTheoreticalEmissions"/>.
    /// </summary>
    public const string MaximumTheoreticalEmissionsJsonPropertyName = "maximumTheoreticalEmissions";
    /// <summary>
    /// JSON property name for <see cref = "PermitStatusBeginYear"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PermitStatusBeginYearUtf8JsonPropertyName => "permitStatusBeginYear"u8;

    /// <summary>
    /// JSON property name for <see cref = "PermitStatusBeginYear"/>.
    /// </summary>
    public const string PermitStatusBeginYearJsonPropertyName = "permitStatusBeginYear";
    /// <summary>
    /// JSON property name for <see cref = "PermitStatusEndYear"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PermitStatusEndYearUtf8JsonPropertyName => "permitStatusEndYear"u8;

    /// <summary>
    /// JSON property name for <see cref = "PermitStatusEndYear"/>.
    /// </summary>
    public const string PermitStatusEndYearJsonPropertyName = "permitStatusEndYear";
    /// <summary>
    /// JSON property name for <see cref = "PotentialToEmit"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PotentialToEmitUtf8JsonPropertyName => "potentialToEmit"u8;

    /// <summary>
    /// JSON property name for <see cref = "PotentialToEmit"/>.
    /// </summary>
    public const string PotentialToEmitJsonPropertyName = "potentialToEmit";
    /// <summary>
    /// JSON property name for <see cref = "ProcessControlApproach"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ProcessControlApproachUtf8JsonPropertyName => "processControlApproach"u8;

    /// <summary>
    /// JSON property name for <see cref = "ProcessControlApproach"/>.
    /// </summary>
    public const string ProcessControlApproachJsonPropertyName = "processControlApproach";
    /// <summary>
    /// JSON property name for <see cref = "ProcessIsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ProcessIsReadOnlyUtf8JsonPropertyName => "processIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "ProcessIsReadOnly"/>.
    /// </summary>
    public const string ProcessIsReadOnlyJsonPropertyName = "processIsReadOnly";
    /// <summary>
    /// JSON property name for <see cref = "ProcessRegulation"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ProcessRegulationUtf8JsonPropertyName => "processRegulation"u8;

    /// <summary>
    /// JSON property name for <see cref = "ProcessRegulation"/>.
    /// </summary>
    public const string ProcessRegulationJsonPropertyName = "processRegulation";
    /// <summary>
    /// JSON property name for <see cref = "ReleasePointApportionment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ReleasePointApportionmentUtf8JsonPropertyName => "releasePointApportionment"u8;

    /// <summary>
    /// JSON property name for <see cref = "ReleasePointApportionment"/>.
    /// </summary>
    public const string ReleasePointApportionmentJsonPropertyName = "releasePointApportionment";
    /// <summary>
    /// JSON property name for <see cref = "ReportingPeriods"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ReportingPeriodsUtf8JsonPropertyName => "reportingPeriods"u8;

    /// <summary>
    /// JSON property name for <see cref = "ReportingPeriods"/>.
    /// </summary>
    public const string ReportingPeriodsJsonPropertyName = "reportingPeriods";
    /// <summary>
    /// JSON property name for <see cref = "SccDescription"/>.
    /// </summary>
    public static ReadOnlySpan<byte> SccDescriptionUtf8JsonPropertyName => "sccDescription"u8;

    /// <summary>
    /// JSON property name for <see cref = "SccDescription"/>.
    /// </summary>
    public const string SccDescriptionJsonPropertyName = "sccDescription";
    /// <summary>
    /// JSON property name for <see cref = "SccShortName"/>.
    /// </summary>
    public static ReadOnlySpan<byte> SccShortNameUtf8JsonPropertyName => "sccShortName"u8;

    /// <summary>
    /// JSON property name for <see cref = "SccShortName"/>.
    /// </summary>
    public const string SccShortNameJsonPropertyName = "sccShortName";
    /// <summary>
    /// JSON property name for <see cref = "SourceClassificationCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> SourceClassificationCodeUtf8JsonPropertyName => "sourceClassificationCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "SourceClassificationCode"/>.
    /// </summary>
    public const string SourceClassificationCodeJsonPropertyName = "sourceClassificationCode";
    /// <summary>
    /// JSON property name for <see cref = "StatusCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StatusCodeUtf8JsonPropertyName => "statusCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "StatusCode"/>.
    /// </summary>
    public const string StatusCodeJsonPropertyName = "statusCode";
    /// <summary>
    /// JSON property name for <see cref = "StatusCodeYear"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StatusCodeYearUtf8JsonPropertyName => "statusCodeYear"u8;

    /// <summary>
    /// JSON property name for <see cref = "StatusCodeYear"/>.
    /// </summary>
    public const string StatusCodeYearJsonPropertyName = "statusCodeYear";
    /// <summary>
    /// Gets AircraftEngineTypeCode.
    /// </summary>
    public Caers.Api.AircraftEngineTypeCode AircraftEngineTypeCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(AircraftEngineTypeCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.AircraftEngineTypeCode(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(AircraftEngineTypeCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.AircraftEngineTypeCode>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Comment.
    /// </summary>
    public Caers.Api.EmissionsProcess.CommentEntity Comment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CommentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.EmissionsProcess.CommentEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CommentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.EmissionsProcess.CommentEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets DeleteReportingPeriod.
    /// </summary>
    public Caers.Api.EmissionsProcess.DeleteReportingPeriodDataTypeArray DeleteReportingPeriod
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(DeleteReportingPeriodUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.EmissionsProcess.DeleteReportingPeriodDataTypeArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(DeleteReportingPeriodJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.EmissionsProcess.DeleteReportingPeriodDataTypeArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Description.
    /// </summary>
    public Caers.Api.EmissionsProcess.DescriptionEntity Description
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.EmissionsProcess.DescriptionEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.EmissionsProcess.DescriptionEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EmissionsTypeCode.
    /// </summary>
    public Corvus.Json.JsonString EmissionsTypeCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionsTypeCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionsTypeCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Identification.
    /// </summary>
    public Caers.Api.EmissionsProcess.IdentificationIdentificationArray Identification
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(IdentificationUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.EmissionsProcess.IdentificationIdentificationArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(IdentificationJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.EmissionsProcess.IdentificationIdentificationArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets InsignificantSource.
    /// </summary>
    public Corvus.Json.JsonString InsignificantSource
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(InsignificantSourceUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(InsignificantSourceJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets IsBillable.
    /// </summary>
    public Corvus.Json.JsonString IsBillable
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(IsBillableUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(IsBillableJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MainIdentification.
    /// </summary>
    public Caers.Api.Identification MainIdentification
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MainIdentificationUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.Identification(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MainIdentificationJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.Identification>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MaximumTheoreticalEmissions.
    /// </summary>
    public Caers.Api.Measure MaximumTheoreticalEmissions
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MaximumTheoreticalEmissionsUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.Measure(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MaximumTheoreticalEmissionsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.Measure>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PermitStatusBeginYear.
    /// </summary>
    public Corvus.Json.JsonDate PermitStatusBeginYear
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PermitStatusBeginYearUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDate(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PermitStatusBeginYearJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDate>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PermitStatusEndYear.
    /// </summary>
    public Corvus.Json.JsonDate PermitStatusEndYear
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PermitStatusEndYearUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDate(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PermitStatusEndYearJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDate>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PotentialToEmit.
    /// </summary>
    public Caers.Api.Measure PotentialToEmit
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PotentialToEmitUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.Measure(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PotentialToEmitJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.Measure>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ProcessControlApproach.
    /// </summary>
    public Caers.Api.ControlApproachDataType ProcessControlApproach
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ProcessControlApproachUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.ControlApproachDataType(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ProcessControlApproachJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.ControlApproachDataType>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ProcessIsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString ProcessIsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ProcessIsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ProcessIsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ProcessRegulation.
    /// </summary>
    public Caers.Api.EmissionsProcess.RegulationDataTypeArray ProcessRegulation
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ProcessRegulationUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.EmissionsProcess.RegulationDataTypeArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ProcessRegulationJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.EmissionsProcess.RegulationDataTypeArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ReleasePointApportionment.
    /// </summary>
    public Caers.Api.EmissionsProcess.ReleasePointApptArray ReleasePointApportionment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ReleasePointApportionmentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.EmissionsProcess.ReleasePointApptArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ReleasePointApportionmentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.EmissionsProcess.ReleasePointApptArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ReportingPeriods.
    /// </summary>
    public Caers.Api.EmissionsProcess.ReportingPeriodArray ReportingPeriods
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ReportingPeriodsUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.EmissionsProcess.ReportingPeriodArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ReportingPeriodsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.EmissionsProcess.ReportingPeriodArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets SccDescription.
    /// </summary>
    public Caers.Api.EmissionsProcess.SccDescriptionEntity SccDescription
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(SccDescriptionUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.EmissionsProcess.SccDescriptionEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(SccDescriptionJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.EmissionsProcess.SccDescriptionEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets SccShortName.
    /// </summary>
    public Caers.Api.EmissionsProcess.SccShortNameEntity SccShortName
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(SccShortNameUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.EmissionsProcess.SccShortNameEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(SccShortNameJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.EmissionsProcess.SccShortNameEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets SourceClassificationCode.
    /// </summary>
    public Caers.Api.EmissionsProcess.SourceClassificationCodeEntity SourceClassificationCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(SourceClassificationCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.EmissionsProcess.SourceClassificationCodeEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(SourceClassificationCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.EmissionsProcess.SourceClassificationCodeEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StatusCode.
    /// </summary>
    public Caers.Api.LookupValue StatusCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StatusCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.LookupValue(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StatusCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.LookupValue>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StatusCodeYear.
    /// </summary>
    public Corvus.Json.JsonInteger StatusCodeYear
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StatusCodeYearUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StatusCodeYearJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "EmissionsProcess"/>.
    /// </summary>
    public static EmissionsProcess Create(Caers.Api.EmissionsProcess.SourceClassificationCodeEntity sourceClassificationCode, Caers.Api.AircraftEngineTypeCode? aircraftEngineTypeCode = null, Caers.Api.EmissionsProcess.CommentEntity? comment = null, Caers.Api.EmissionsProcess.DeleteReportingPeriodDataTypeArray? deleteReportingPeriod = null, Caers.Api.EmissionsProcess.DescriptionEntity? description = null, Corvus.Json.JsonString? emissionsTypeCode = null, Caers.Api.EmissionsProcess.IdentificationIdentificationArray? identification = null, Corvus.Json.JsonString? insignificantSource = null, Corvus.Json.JsonString? isBillable = null, Caers.Api.Identification? mainIdentification = null, Caers.Api.Measure? maximumTheoreticalEmissions = null, Corvus.Json.JsonDate? permitStatusBeginYear = null, Corvus.Json.JsonDate? permitStatusEndYear = null, Caers.Api.Measure? potentialToEmit = null, Caers.Api.ControlApproachDataType? processControlApproach = null, Corvus.Json.JsonString? processIsReadOnly = null, Caers.Api.EmissionsProcess.RegulationDataTypeArray? processRegulation = null, Caers.Api.EmissionsProcess.ReleasePointApptArray? releasePointApportionment = null, Caers.Api.EmissionsProcess.ReportingPeriodArray? reportingPeriods = null, Caers.Api.EmissionsProcess.SccDescriptionEntity? sccDescription = null, Caers.Api.EmissionsProcess.SccShortNameEntity? sccShortName = null, Caers.Api.LookupValue? statusCode = null, Corvus.Json.JsonInteger? statusCodeYear = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(SourceClassificationCodeJsonPropertyName, sourceClassificationCode.AsAny);
        if (aircraftEngineTypeCode is Caers.Api.AircraftEngineTypeCode aircraftEngineTypeCode__)
        {
            builder.Add(AircraftEngineTypeCodeJsonPropertyName, aircraftEngineTypeCode__.AsAny);
        }

        if (comment is Caers.Api.EmissionsProcess.CommentEntity comment__)
        {
            builder.Add(CommentJsonPropertyName, comment__.AsAny);
        }

        if (deleteReportingPeriod is Caers.Api.EmissionsProcess.DeleteReportingPeriodDataTypeArray deleteReportingPeriod__)
        {
            builder.Add(DeleteReportingPeriodJsonPropertyName, deleteReportingPeriod__.AsAny);
        }

        if (description is Caers.Api.EmissionsProcess.DescriptionEntity description__)
        {
            builder.Add(DescriptionJsonPropertyName, description__.AsAny);
        }

        if (emissionsTypeCode is Corvus.Json.JsonString emissionsTypeCode__)
        {
            builder.Add(EmissionsTypeCodeJsonPropertyName, emissionsTypeCode__.AsAny);
        }

        if (identification is Caers.Api.EmissionsProcess.IdentificationIdentificationArray identification__)
        {
            builder.Add(IdentificationJsonPropertyName, identification__.AsAny);
        }

        if (insignificantSource is Corvus.Json.JsonString insignificantSource__)
        {
            builder.Add(InsignificantSourceJsonPropertyName, insignificantSource__.AsAny);
        }

        if (isBillable is Corvus.Json.JsonString isBillable__)
        {
            builder.Add(IsBillableJsonPropertyName, isBillable__.AsAny);
        }

        if (mainIdentification is Caers.Api.Identification mainIdentification__)
        {
            builder.Add(MainIdentificationJsonPropertyName, mainIdentification__.AsAny);
        }

        if (maximumTheoreticalEmissions is Caers.Api.Measure maximumTheoreticalEmissions__)
        {
            builder.Add(MaximumTheoreticalEmissionsJsonPropertyName, maximumTheoreticalEmissions__.AsAny);
        }

        if (permitStatusBeginYear is Corvus.Json.JsonDate permitStatusBeginYear__)
        {
            builder.Add(PermitStatusBeginYearJsonPropertyName, permitStatusBeginYear__.AsAny);
        }

        if (permitStatusEndYear is Corvus.Json.JsonDate permitStatusEndYear__)
        {
            builder.Add(PermitStatusEndYearJsonPropertyName, permitStatusEndYear__.AsAny);
        }

        if (potentialToEmit is Caers.Api.Measure potentialToEmit__)
        {
            builder.Add(PotentialToEmitJsonPropertyName, potentialToEmit__.AsAny);
        }

        if (processControlApproach is Caers.Api.ControlApproachDataType processControlApproach__)
        {
            builder.Add(ProcessControlApproachJsonPropertyName, processControlApproach__.AsAny);
        }

        if (processIsReadOnly is Corvus.Json.JsonString processIsReadOnly__)
        {
            builder.Add(ProcessIsReadOnlyJsonPropertyName, processIsReadOnly__.AsAny);
        }

        if (processRegulation is Caers.Api.EmissionsProcess.RegulationDataTypeArray processRegulation__)
        {
            builder.Add(ProcessRegulationJsonPropertyName, processRegulation__.AsAny);
        }

        if (releasePointApportionment is Caers.Api.EmissionsProcess.ReleasePointApptArray releasePointApportionment__)
        {
            builder.Add(ReleasePointApportionmentJsonPropertyName, releasePointApportionment__.AsAny);
        }

        if (reportingPeriods is Caers.Api.EmissionsProcess.ReportingPeriodArray reportingPeriods__)
        {
            builder.Add(ReportingPeriodsJsonPropertyName, reportingPeriods__.AsAny);
        }

        if (sccDescription is Caers.Api.EmissionsProcess.SccDescriptionEntity sccDescription__)
        {
            builder.Add(SccDescriptionJsonPropertyName, sccDescription__.AsAny);
        }

        if (sccShortName is Caers.Api.EmissionsProcess.SccShortNameEntity sccShortName__)
        {
            builder.Add(SccShortNameJsonPropertyName, sccShortName__.AsAny);
        }

        if (statusCode is Caers.Api.LookupValue statusCode__)
        {
            builder.Add(StatusCodeJsonPropertyName, statusCode__.AsAny);
        }

        if (statusCodeYear is Corvus.Json.JsonInteger statusCodeYear__)
        {
            builder.Add(StatusCodeYearJsonPropertyName, statusCodeYear__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets aircraftEngineTypeCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithAircraftEngineTypeCode(in Caers.Api.AircraftEngineTypeCode value)
    {
        return this.SetProperty(AircraftEngineTypeCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets comment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithComment(in Caers.Api.EmissionsProcess.CommentEntity value)
    {
        return this.SetProperty(CommentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets deleteReportingPeriod.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithDeleteReportingPeriod(in Caers.Api.EmissionsProcess.DeleteReportingPeriodDataTypeArray value)
    {
        return this.SetProperty(DeleteReportingPeriodJsonPropertyName, value);
    }

    /// <summary>
    /// Sets description.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithDescription(in Caers.Api.EmissionsProcess.DescriptionEntity value)
    {
        return this.SetProperty(DescriptionJsonPropertyName, value);
    }

    /// <summary>
    /// Sets emissionsTypeCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithEmissionsTypeCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EmissionsTypeCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets identification.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithIdentification(in Caers.Api.EmissionsProcess.IdentificationIdentificationArray value)
    {
        return this.SetProperty(IdentificationJsonPropertyName, value);
    }

    /// <summary>
    /// Sets insignificantSource.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithInsignificantSource(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(InsignificantSourceJsonPropertyName, value);
    }

    /// <summary>
    /// Sets isBillable.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithIsBillable(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(IsBillableJsonPropertyName, value);
    }

    /// <summary>
    /// Sets mainIdentification.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithMainIdentification(in Caers.Api.Identification value)
    {
        return this.SetProperty(MainIdentificationJsonPropertyName, value);
    }

    /// <summary>
    /// Sets maximumTheoreticalEmissions.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithMaximumTheoreticalEmissions(in Caers.Api.Measure value)
    {
        return this.SetProperty(MaximumTheoreticalEmissionsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets permitStatusBeginYear.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithPermitStatusBeginYear(in Corvus.Json.JsonDate value)
    {
        return this.SetProperty(PermitStatusBeginYearJsonPropertyName, value);
    }

    /// <summary>
    /// Sets permitStatusEndYear.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithPermitStatusEndYear(in Corvus.Json.JsonDate value)
    {
        return this.SetProperty(PermitStatusEndYearJsonPropertyName, value);
    }

    /// <summary>
    /// Sets potentialToEmit.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithPotentialToEmit(in Caers.Api.Measure value)
    {
        return this.SetProperty(PotentialToEmitJsonPropertyName, value);
    }

    /// <summary>
    /// Sets processControlApproach.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithProcessControlApproach(in Caers.Api.ControlApproachDataType value)
    {
        return this.SetProperty(ProcessControlApproachJsonPropertyName, value);
    }

    /// <summary>
    /// Sets processIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithProcessIsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(ProcessIsReadOnlyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets processRegulation.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithProcessRegulation(in Caers.Api.EmissionsProcess.RegulationDataTypeArray value)
    {
        return this.SetProperty(ProcessRegulationJsonPropertyName, value);
    }

    /// <summary>
    /// Sets releasePointApportionment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithReleasePointApportionment(in Caers.Api.EmissionsProcess.ReleasePointApptArray value)
    {
        return this.SetProperty(ReleasePointApportionmentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets reportingPeriods.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithReportingPeriods(in Caers.Api.EmissionsProcess.ReportingPeriodArray value)
    {
        return this.SetProperty(ReportingPeriodsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets sccDescription.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithSccDescription(in Caers.Api.EmissionsProcess.SccDescriptionEntity value)
    {
        return this.SetProperty(SccDescriptionJsonPropertyName, value);
    }

    /// <summary>
    /// Sets sccShortName.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithSccShortName(in Caers.Api.EmissionsProcess.SccShortNameEntity value)
    {
        return this.SetProperty(SccShortNameJsonPropertyName, value);
    }

    /// <summary>
    /// Sets sourceClassificationCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithSourceClassificationCode(in Caers.Api.EmissionsProcess.SourceClassificationCodeEntity value)
    {
        return this.SetProperty(SourceClassificationCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets statusCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithStatusCode(in Caers.Api.LookupValue value)
    {
        return this.SetProperty(StatusCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets statusCodeYear.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsProcess WithStatusCodeYear(in Corvus.Json.JsonInteger value)
    {
        return this.SetProperty(StatusCodeYearJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateSourceClassificationCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.EmissionsProcess.SourceClassificationCodeEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateIdentification(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.EmissionsProcess.IdentificationIdentificationArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateDescription(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.EmissionsProcess.DescriptionEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStatusCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.LookupValue>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStatusCodeYear(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonInteger>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateComment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.EmissionsProcess.CommentEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateSccShortName(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.EmissionsProcess.SccShortNameEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateSccDescription(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.EmissionsProcess.SccDescriptionEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateAircraftEngineTypeCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.AircraftEngineTypeCode>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateReportingPeriods(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.EmissionsProcess.ReportingPeriodArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateReleasePointApportionment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.EmissionsProcess.ReleasePointApptArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmissionsTypeCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateProcessIsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateProcessRegulation(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.EmissionsProcess.RegulationDataTypeArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateProcessControlApproach(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.ControlApproachDataType>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateDeleteReportingPeriod(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.EmissionsProcess.DeleteReportingPeriodDataTypeArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePermitStatusBeginYear(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDate>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePermitStatusEndYear(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDate>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMaximumTheoreticalEmissions(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.Measure>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePotentialToEmit(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.Measure>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateIsBillable(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateInsignificantSource(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMainIdentification(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.Identification>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(SourceClassificationCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateSourceClassificationCode;
                return true;
            }
            else if (property.NameEquals(IdentificationUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateIdentification;
                return true;
            }
            else if (property.NameEquals(DescriptionUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateDescription;
                return true;
            }
            else if (property.NameEquals(StatusCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStatusCode;
                return true;
            }
            else if (property.NameEquals(StatusCodeYearUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStatusCodeYear;
                return true;
            }
            else if (property.NameEquals(CommentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateComment;
                return true;
            }
            else if (property.NameEquals(SccShortNameUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateSccShortName;
                return true;
            }
            else if (property.NameEquals(SccDescriptionUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateSccDescription;
                return true;
            }
            else if (property.NameEquals(AircraftEngineTypeCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateAircraftEngineTypeCode;
                return true;
            }
            else if (property.NameEquals(ReportingPeriodsUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateReportingPeriods;
                return true;
            }
            else if (property.NameEquals(ReleasePointApportionmentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateReleasePointApportionment;
                return true;
            }
            else if (property.NameEquals(EmissionsTypeCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionsTypeCode;
                return true;
            }
            else if (property.NameEquals(ProcessIsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessIsReadOnly;
                return true;
            }
            else if (property.NameEquals(ProcessRegulationUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessRegulation;
                return true;
            }
            else if (property.NameEquals(ProcessControlApproachUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessControlApproach;
                return true;
            }
            else if (property.NameEquals(DeleteReportingPeriodUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateDeleteReportingPeriod;
                return true;
            }
            else if (property.NameEquals(PermitStatusBeginYearUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitStatusBeginYear;
                return true;
            }
            else if (property.NameEquals(PermitStatusEndYearUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitStatusEndYear;
                return true;
            }
            else if (property.NameEquals(MaximumTheoreticalEmissionsUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateMaximumTheoreticalEmissions;
                return true;
            }
            else if (property.NameEquals(PotentialToEmitUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePotentialToEmit;
                return true;
            }
            else if (property.NameEquals(IsBillableUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateIsBillable;
                return true;
            }
            else if (property.NameEquals(InsignificantSourceUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateInsignificantSource;
                return true;
            }
            else if (property.NameEquals(MainIdentificationUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateMainIdentification;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(SourceClassificationCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateSourceClassificationCode;
                return true;
            }
            else if (property.NameEquals(IdentificationJsonPropertyName))
            {
                propertyValidator = __CorvusValidateIdentification;
                return true;
            }
            else if (property.NameEquals(DescriptionJsonPropertyName))
            {
                propertyValidator = __CorvusValidateDescription;
                return true;
            }
            else if (property.NameEquals(StatusCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStatusCode;
                return true;
            }
            else if (property.NameEquals(StatusCodeYearJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStatusCodeYear;
                return true;
            }
            else if (property.NameEquals(CommentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateComment;
                return true;
            }
            else if (property.NameEquals(SccShortNameJsonPropertyName))
            {
                propertyValidator = __CorvusValidateSccShortName;
                return true;
            }
            else if (property.NameEquals(SccDescriptionJsonPropertyName))
            {
                propertyValidator = __CorvusValidateSccDescription;
                return true;
            }
            else if (property.NameEquals(AircraftEngineTypeCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateAircraftEngineTypeCode;
                return true;
            }
            else if (property.NameEquals(ReportingPeriodsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateReportingPeriods;
                return true;
            }
            else if (property.NameEquals(ReleasePointApportionmentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateReleasePointApportionment;
                return true;
            }
            else if (property.NameEquals(EmissionsTypeCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionsTypeCode;
                return true;
            }
            else if (property.NameEquals(ProcessIsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessIsReadOnly;
                return true;
            }
            else if (property.NameEquals(ProcessRegulationJsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessRegulation;
                return true;
            }
            else if (property.NameEquals(ProcessControlApproachJsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessControlApproach;
                return true;
            }
            else if (property.NameEquals(DeleteReportingPeriodJsonPropertyName))
            {
                propertyValidator = __CorvusValidateDeleteReportingPeriod;
                return true;
            }
            else if (property.NameEquals(PermitStatusBeginYearJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitStatusBeginYear;
                return true;
            }
            else if (property.NameEquals(PermitStatusEndYearJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitStatusEndYear;
                return true;
            }
            else if (property.NameEquals(MaximumTheoreticalEmissionsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMaximumTheoreticalEmissions;
                return true;
            }
            else if (property.NameEquals(PotentialToEmitJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePotentialToEmit;
                return true;
            }
            else if (property.NameEquals(IsBillableJsonPropertyName))
            {
                propertyValidator = __CorvusValidateIsBillable;
                return true;
            }
            else if (property.NameEquals(InsignificantSourceJsonPropertyName))
            {
                propertyValidator = __CorvusValidateInsignificantSource;
                return true;
            }
            else if (property.NameEquals(MainIdentificationJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMainIdentification;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}