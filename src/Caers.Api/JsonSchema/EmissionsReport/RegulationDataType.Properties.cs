//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct RegulationDataType
{
    /// <summary>
    /// JSON property name for <see cref = "AgencyCodeText"/>.
    /// </summary>
    public static ReadOnlySpan<byte> AgencyCodeTextUtf8JsonPropertyName => "agencyCodeText"u8;

    /// <summary>
    /// JSON property name for <see cref = "AgencyCodeText"/>.
    /// </summary>
    public const string AgencyCodeTextJsonPropertyName = "agencyCodeText";
    /// <summary>
    /// JSON property name for <see cref = "RegulationComment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> RegulationCommentUtf8JsonPropertyName => "regulationComment"u8;

    /// <summary>
    /// JSON property name for <see cref = "RegulationComment"/>.
    /// </summary>
    public const string RegulationCommentJsonPropertyName = "regulationComment";
    /// <summary>
    /// JSON property name for <see cref = "RegulationIsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> RegulationIsReadOnlyUtf8JsonPropertyName => "regulationIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "RegulationIsReadOnly"/>.
    /// </summary>
    public const string RegulationIsReadOnlyJsonPropertyName = "regulationIsReadOnly";
    /// <summary>
    /// JSON property name for <see cref = "RegulatoryCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> RegulatoryCodeUtf8JsonPropertyName => "regulatoryCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "RegulatoryCode"/>.
    /// </summary>
    public const string RegulatoryCodeJsonPropertyName = "regulatoryCode";
    /// <summary>
    /// JSON property name for <see cref = "RegulatoryEndYear"/>.
    /// </summary>
    public static ReadOnlySpan<byte> RegulatoryEndYearUtf8JsonPropertyName => "regulatoryEndYear"u8;

    /// <summary>
    /// JSON property name for <see cref = "RegulatoryEndYear"/>.
    /// </summary>
    public const string RegulatoryEndYearJsonPropertyName = "regulatoryEndYear";
    /// <summary>
    /// JSON property name for <see cref = "RegulatoryStartYear"/>.
    /// </summary>
    public static ReadOnlySpan<byte> RegulatoryStartYearUtf8JsonPropertyName => "regulatoryStartYear"u8;

    /// <summary>
    /// JSON property name for <see cref = "RegulatoryStartYear"/>.
    /// </summary>
    public const string RegulatoryStartYearJsonPropertyName = "regulatoryStartYear";
    /// <summary>
    /// Gets AgencyCodeText.
    /// </summary>
    public Corvus.Json.JsonString AgencyCodeText
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(AgencyCodeTextUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(AgencyCodeTextJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets RegulationComment.
    /// </summary>
    public Corvus.Json.JsonString RegulationComment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(RegulationCommentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(RegulationCommentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets RegulationIsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString RegulationIsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(RegulationIsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(RegulationIsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets RegulatoryCode.
    /// </summary>
    public Corvus.Json.JsonString RegulatoryCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(RegulatoryCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(RegulatoryCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets RegulatoryEndYear.
    /// </summary>
    public Corvus.Json.JsonDateTime RegulatoryEndYear
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(RegulatoryEndYearUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDateTime(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(RegulatoryEndYearJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDateTime>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets RegulatoryStartYear.
    /// </summary>
    public Corvus.Json.JsonDateTime RegulatoryStartYear
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(RegulatoryStartYearUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDateTime(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(RegulatoryStartYearJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDateTime>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "RegulationDataType"/>.
    /// </summary>
    public static RegulationDataType Create(Corvus.Json.JsonString regulatoryCode, Corvus.Json.JsonString? agencyCodeText = null, Corvus.Json.JsonString? regulationComment = null, Corvus.Json.JsonString? regulationIsReadOnly = null, Corvus.Json.JsonDateTime? regulatoryEndYear = null, Corvus.Json.JsonDateTime? regulatoryStartYear = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(RegulatoryCodeJsonPropertyName, regulatoryCode.AsAny);
        if (agencyCodeText is Corvus.Json.JsonString agencyCodeText__)
        {
            builder.Add(AgencyCodeTextJsonPropertyName, agencyCodeText__.AsAny);
        }

        if (regulationComment is Corvus.Json.JsonString regulationComment__)
        {
            builder.Add(RegulationCommentJsonPropertyName, regulationComment__.AsAny);
        }

        if (regulationIsReadOnly is Corvus.Json.JsonString regulationIsReadOnly__)
        {
            builder.Add(RegulationIsReadOnlyJsonPropertyName, regulationIsReadOnly__.AsAny);
        }

        if (regulatoryEndYear is Corvus.Json.JsonDateTime regulatoryEndYear__)
        {
            builder.Add(RegulatoryEndYearJsonPropertyName, regulatoryEndYear__.AsAny);
        }

        if (regulatoryStartYear is Corvus.Json.JsonDateTime regulatoryStartYear__)
        {
            builder.Add(RegulatoryStartYearJsonPropertyName, regulatoryStartYear__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets agencyCodeText.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public RegulationDataType WithAgencyCodeText(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(AgencyCodeTextJsonPropertyName, value);
    }

    /// <summary>
    /// Sets regulationComment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public RegulationDataType WithRegulationComment(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(RegulationCommentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets regulationIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public RegulationDataType WithRegulationIsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(RegulationIsReadOnlyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets regulatoryCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public RegulationDataType WithRegulatoryCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(RegulatoryCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets regulatoryEndYear.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public RegulationDataType WithRegulatoryEndYear(in Corvus.Json.JsonDateTime value)
    {
        return this.SetProperty(RegulatoryEndYearJsonPropertyName, value);
    }

    /// <summary>
    /// Sets regulatoryStartYear.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public RegulationDataType WithRegulatoryStartYear(in Corvus.Json.JsonDateTime value)
    {
        return this.SetProperty(RegulatoryStartYearJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateRegulatoryCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateAgencyCodeText(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateRegulatoryStartYear(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDateTime>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateRegulatoryEndYear(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDateTime>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateRegulationComment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateRegulationIsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(RegulatoryCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateRegulatoryCode;
                return true;
            }
            else if (property.NameEquals(AgencyCodeTextUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateAgencyCodeText;
                return true;
            }
            else if (property.NameEquals(RegulatoryStartYearUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateRegulatoryStartYear;
                return true;
            }
            else if (property.NameEquals(RegulatoryEndYearUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateRegulatoryEndYear;
                return true;
            }
            else if (property.NameEquals(RegulationCommentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateRegulationComment;
                return true;
            }
            else if (property.NameEquals(RegulationIsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateRegulationIsReadOnly;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(RegulatoryCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateRegulatoryCode;
                return true;
            }
            else if (property.NameEquals(AgencyCodeTextJsonPropertyName))
            {
                propertyValidator = __CorvusValidateAgencyCodeText;
                return true;
            }
            else if (property.NameEquals(RegulatoryStartYearJsonPropertyName))
            {
                propertyValidator = __CorvusValidateRegulatoryStartYear;
                return true;
            }
            else if (property.NameEquals(RegulatoryEndYearJsonPropertyName))
            {
                propertyValidator = __CorvusValidateRegulatoryEndYear;
                return true;
            }
            else if (property.NameEquals(RegulationCommentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateRegulationComment;
                return true;
            }
            else if (property.NameEquals(RegulationIsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidateRegulationIsReadOnly;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}