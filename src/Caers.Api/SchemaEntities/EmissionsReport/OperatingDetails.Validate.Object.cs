//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api.SchemaEntities;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct OperatingDetails
{
    private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
    {
        ValidationContext result = validationContext;
        if (valueKind != JsonValueKind.Object)
        {
            return result;
        }

        int propertyCount = 0;
        bool foundActualHoursPerPeriod = false;
        bool foundAverageDaysPerWeek = false;
        bool foundAverageHoursPerDay = false;
        bool foundAverageWeeksPerPeriod = false;
        bool foundPercentFallActivity = false;
        bool foundPercentSpringActivity = false;
        bool foundPercentSummerActivity = false;
        bool foundPercentWinterActivity = false;
        foreach (JsonObjectProperty property in this.EnumerateObject())
        {
            if (__TryGetCorvusLocalPropertiesValidator(property, this.HasJsonElementBacking, out ObjectPropertyValidator? propertyValidator))
            {
                result = result.WithLocalProperty(propertyCount);
                if (level > ValidationLevel.Basic)
                {
                    result = result.PushDocumentProperty("properties", property.Name);
                }

                var propertyResult = propertyValidator(property, result.CreateChildContext(), level);
                result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                if (level > ValidationLevel.Basic)
                {
                    result = result.PopLocation(); // property name
                }

                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                if ((this.HasJsonElementBacking && property.NameEquals(ActualHoursPerPeriodUtf8JsonPropertyName)) || (!this.HasJsonElementBacking && property.NameEquals(ActualHoursPerPeriodJsonPropertyName)))
                {
                    foundActualHoursPerPeriod = true;
                }
                else if ((this.HasJsonElementBacking && property.NameEquals(AverageDaysPerWeekUtf8JsonPropertyName)) || (!this.HasJsonElementBacking && property.NameEquals(AverageDaysPerWeekJsonPropertyName)))
                {
                    foundAverageDaysPerWeek = true;
                }
                else if ((this.HasJsonElementBacking && property.NameEquals(AverageHoursPerDayUtf8JsonPropertyName)) || (!this.HasJsonElementBacking && property.NameEquals(AverageHoursPerDayJsonPropertyName)))
                {
                    foundAverageHoursPerDay = true;
                }
                else if ((this.HasJsonElementBacking && property.NameEquals(AverageWeeksPerPeriodUtf8JsonPropertyName)) || (!this.HasJsonElementBacking && property.NameEquals(AverageWeeksPerPeriodJsonPropertyName)))
                {
                    foundAverageWeeksPerPeriod = true;
                }
                else if ((this.HasJsonElementBacking && property.NameEquals(PercentFallActivityUtf8JsonPropertyName)) || (!this.HasJsonElementBacking && property.NameEquals(PercentFallActivityJsonPropertyName)))
                {
                    foundPercentFallActivity = true;
                }
                else if ((this.HasJsonElementBacking && property.NameEquals(PercentSpringActivityUtf8JsonPropertyName)) || (!this.HasJsonElementBacking && property.NameEquals(PercentSpringActivityJsonPropertyName)))
                {
                    foundPercentSpringActivity = true;
                }
                else if ((this.HasJsonElementBacking && property.NameEquals(PercentSummerActivityUtf8JsonPropertyName)) || (!this.HasJsonElementBacking && property.NameEquals(PercentSummerActivityJsonPropertyName)))
                {
                    foundPercentSummerActivity = true;
                }
                else if ((this.HasJsonElementBacking && property.NameEquals(PercentWinterActivityUtf8JsonPropertyName)) || (!this.HasJsonElementBacking && property.NameEquals(PercentWinterActivityJsonPropertyName)))
                {
                    foundPercentWinterActivity = true;
                }
            }

            propertyCount++;
        }

        if (!foundActualHoursPerPeriod)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"actualHoursPerPeriod\" not present.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }

        if (!foundAverageDaysPerWeek)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"averageDaysPerWeek\" not present.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }

        if (!foundAverageHoursPerDay)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"averageHoursPerDay\" not present.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }

        if (!foundAverageWeeksPerPeriod)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"averageWeeksPerPeriod\" not present.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }

        if (!foundPercentFallActivity)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"percentFallActivity\" not present.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }

        if (!foundPercentSpringActivity)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"percentSpringActivity\" not present.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }

        if (!foundPercentSummerActivity)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"percentSummerActivity\" not present.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }

        if (!foundPercentWinterActivity)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"percentWinterActivity\" not present.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }

        return result;
    }
}