//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api.SchemaEntities;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct EmissionsUnit
{
    /// <summary>
    /// JSON property name for <see cref = "Comment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CommentUtf8JsonPropertyName => "comment"u8;

    /// <summary>
    /// JSON property name for <see cref = "Comment"/>.
    /// </summary>
    public const string CommentJsonPropertyName = "comment";
    /// <summary>
    /// JSON property name for <see cref = "Description"/>.
    /// </summary>
    public static ReadOnlySpan<byte> DescriptionUtf8JsonPropertyName => "description"u8;

    /// <summary>
    /// JSON property name for <see cref = "Description"/>.
    /// </summary>
    public const string DescriptionJsonPropertyName = "description";
    /// <summary>
    /// JSON property name for <see cref = "DesignCapacity"/>.
    /// </summary>
    public static ReadOnlySpan<byte> DesignCapacityUtf8JsonPropertyName => "designCapacity"u8;

    /// <summary>
    /// JSON property name for <see cref = "DesignCapacity"/>.
    /// </summary>
    public const string DesignCapacityJsonPropertyName = "designCapacity";
    /// <summary>
    /// JSON property name for <see cref = "DesignCapacityIsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> DesignCapacityIsReadOnlyUtf8JsonPropertyName => "designCapacityIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "DesignCapacityIsReadOnly"/>.
    /// </summary>
    public const string DesignCapacityIsReadOnlyJsonPropertyName = "designCapacityIsReadOnly";
    /// <summary>
    /// JSON property name for <see cref = "EmissionsProcesses"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionsProcessesUtf8JsonPropertyName => "emissionsProcesses"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmissionsProcesses"/>.
    /// </summary>
    public const string EmissionsProcessesJsonPropertyName = "emissionsProcesses";
    /// <summary>
    /// JSON property name for <see cref = "EngineUseType"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EngineUseTypeUtf8JsonPropertyName => "engineUseType"u8;

    /// <summary>
    /// JSON property name for <see cref = "EngineUseType"/>.
    /// </summary>
    public const string EngineUseTypeJsonPropertyName = "engineUseType";
    /// <summary>
    /// JSON property name for <see cref = "EngineUseTypeDescription"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EngineUseTypeDescriptionUtf8JsonPropertyName => "engineUseTypeDescription"u8;

    /// <summary>
    /// JSON property name for <see cref = "EngineUseTypeDescription"/>.
    /// </summary>
    public const string EngineUseTypeDescriptionJsonPropertyName = "engineUseTypeDescription";
    /// <summary>
    /// JSON property name for <see cref = "FederalEnforcableLimitText"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FederalEnforcableLimitTextUtf8JsonPropertyName => "federalEnforcableLimitText"u8;

    /// <summary>
    /// JSON property name for <see cref = "FederalEnforcableLimitText"/>.
    /// </summary>
    public const string FederalEnforcableLimitTextJsonPropertyName = "federalEnforcableLimitText";
    /// <summary>
    /// JSON property name for <see cref = "Identification"/>.
    /// </summary>
    public static ReadOnlySpan<byte> IdentificationUtf8JsonPropertyName => "identification"u8;

    /// <summary>
    /// JSON property name for <see cref = "Identification"/>.
    /// </summary>
    public const string IdentificationJsonPropertyName = "identification";
    /// <summary>
    /// JSON property name for <see cref = "MainIdentification"/>.
    /// </summary>
    public static ReadOnlySpan<byte> MainIdentificationUtf8JsonPropertyName => "mainIdentification"u8;

    /// <summary>
    /// JSON property name for <see cref = "MainIdentification"/>.
    /// </summary>
    public const string MainIdentificationJsonPropertyName = "mainIdentification";
    /// <summary>
    /// JSON property name for <see cref = "MaximumTheoreticalEmissions"/>.
    /// </summary>
    public static ReadOnlySpan<byte> MaximumTheoreticalEmissionsUtf8JsonPropertyName => "maximumTheoreticalEmissions"u8;

    /// <summary>
    /// JSON property name for <see cref = "MaximumTheoreticalEmissions"/>.
    /// </summary>
    public const string MaximumTheoreticalEmissionsJsonPropertyName = "maximumTheoreticalEmissions";
    /// <summary>
    /// JSON property name for <see cref = "PermitByRule"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PermitByRuleUtf8JsonPropertyName => "permitByRule"u8;

    /// <summary>
    /// JSON property name for <see cref = "PermitByRule"/>.
    /// </summary>
    public const string PermitByRuleJsonPropertyName = "permitByRule";
    /// <summary>
    /// JSON property name for <see cref = "PermitLimitText"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PermitLimitTextUtf8JsonPropertyName => "permitLimitText"u8;

    /// <summary>
    /// JSON property name for <see cref = "PermitLimitText"/>.
    /// </summary>
    public const string PermitLimitTextJsonPropertyName = "permitLimitText";
    /// <summary>
    /// JSON property name for <see cref = "PermitStatusBeginYear"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PermitStatusBeginYearUtf8JsonPropertyName => "permitStatusBeginYear"u8;

    /// <summary>
    /// JSON property name for <see cref = "PermitStatusBeginYear"/>.
    /// </summary>
    public const string PermitStatusBeginYearJsonPropertyName = "permitStatusBeginYear";
    /// <summary>
    /// JSON property name for <see cref = "PermitStatusCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PermitStatusCodeUtf8JsonPropertyName => "permitStatusCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "PermitStatusCode"/>.
    /// </summary>
    public const string PermitStatusCodeJsonPropertyName = "permitStatusCode";
    /// <summary>
    /// JSON property name for <see cref = "PermitStatusEndYear"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PermitStatusEndYearUtf8JsonPropertyName => "permitStatusEndYear"u8;

    /// <summary>
    /// JSON property name for <see cref = "PermitStatusEndYear"/>.
    /// </summary>
    public const string PermitStatusEndYearJsonPropertyName = "permitStatusEndYear";
    /// <summary>
    /// JSON property name for <see cref = "PotentialToEmit"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PotentialToEmitUtf8JsonPropertyName => "potentialToEmit"u8;

    /// <summary>
    /// JSON property name for <see cref = "PotentialToEmit"/>.
    /// </summary>
    public const string PotentialToEmitJsonPropertyName = "potentialToEmit";
    /// <summary>
    /// JSON property name for <see cref = "ReportingRequirement"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ReportingRequirementUtf8JsonPropertyName => "reportingRequirement"u8;

    /// <summary>
    /// JSON property name for <see cref = "ReportingRequirement"/>.
    /// </summary>
    public const string ReportingRequirementJsonPropertyName = "reportingRequirement";
    /// <summary>
    /// JSON property name for <see cref = "StatusCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StatusCodeUtf8JsonPropertyName => "statusCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "StatusCode"/>.
    /// </summary>
    public const string StatusCodeJsonPropertyName = "statusCode";
    /// <summary>
    /// JSON property name for <see cref = "StatusCodeYear"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StatusCodeYearUtf8JsonPropertyName => "statusCodeYear"u8;

    /// <summary>
    /// JSON property name for <see cref = "StatusCodeYear"/>.
    /// </summary>
    public const string StatusCodeYearJsonPropertyName = "statusCodeYear";
    /// <summary>
    /// JSON property name for <see cref = "UnitIsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> UnitIsReadOnlyUtf8JsonPropertyName => "unitIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "UnitIsReadOnly"/>.
    /// </summary>
    public const string UnitIsReadOnlyJsonPropertyName = "unitIsReadOnly";
    /// <summary>
    /// JSON property name for <see cref = "UnitModificationDate"/>.
    /// </summary>
    public static ReadOnlySpan<byte> UnitModificationDateUtf8JsonPropertyName => "unitModificationDate"u8;

    /// <summary>
    /// JSON property name for <see cref = "UnitModificationDate"/>.
    /// </summary>
    public const string UnitModificationDateJsonPropertyName = "unitModificationDate";
    /// <summary>
    /// JSON property name for <see cref = "UnitModificationDescription"/>.
    /// </summary>
    public static ReadOnlySpan<byte> UnitModificationDescriptionUtf8JsonPropertyName => "unitModificationDescription"u8;

    /// <summary>
    /// JSON property name for <see cref = "UnitModificationDescription"/>.
    /// </summary>
    public const string UnitModificationDescriptionJsonPropertyName = "unitModificationDescription";
    /// <summary>
    /// JSON property name for <see cref = "UnitNaics"/>.
    /// </summary>
    public static ReadOnlySpan<byte> UnitNaicsUtf8JsonPropertyName => "unitNaics"u8;

    /// <summary>
    /// JSON property name for <see cref = "UnitNaics"/>.
    /// </summary>
    public const string UnitNaicsJsonPropertyName = "unitNaics";
    /// <summary>
    /// JSON property name for <see cref = "UnitOperationDate"/>.
    /// </summary>
    public static ReadOnlySpan<byte> UnitOperationDateUtf8JsonPropertyName => "unitOperationDate"u8;

    /// <summary>
    /// JSON property name for <see cref = "UnitOperationDate"/>.
    /// </summary>
    public const string UnitOperationDateJsonPropertyName = "unitOperationDate";
    /// <summary>
    /// JSON property name for <see cref = "UnitTypeCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> UnitTypeCodeUtf8JsonPropertyName => "unitTypeCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "UnitTypeCode"/>.
    /// </summary>
    public const string UnitTypeCodeJsonPropertyName = "unitTypeCode";
    /// <summary>
    /// Gets Comment.
    /// </summary>
    public Caers.Api.SchemaEntities.EmissionsUnit.CommentEntity Comment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CommentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.EmissionsUnit.CommentEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CommentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.EmissionsUnit.CommentEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Description.
    /// </summary>
    public Caers.Api.SchemaEntities.EmissionsUnit.DescriptionEntity Description
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.EmissionsUnit.DescriptionEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.EmissionsUnit.DescriptionEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets DesignCapacity.
    /// </summary>
    public Caers.Api.SchemaEntities.Measure DesignCapacity
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(DesignCapacityUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Measure(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(DesignCapacityJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Measure>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets DesignCapacityIsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString DesignCapacityIsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(DesignCapacityIsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(DesignCapacityIsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EmissionsProcesses.
    /// </summary>
    public Caers.Api.SchemaEntities.EmissionsUnit.EmissionsProcessArray EmissionsProcesses
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionsProcessesUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.EmissionsUnit.EmissionsProcessArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionsProcessesJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.EmissionsUnit.EmissionsProcessArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EngineUseType.
    /// </summary>
    public Corvus.Json.JsonString EngineUseType
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EngineUseTypeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EngineUseTypeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EngineUseTypeDescription.
    /// </summary>
    public Corvus.Json.JsonString EngineUseTypeDescription
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EngineUseTypeDescriptionUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EngineUseTypeDescriptionJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FederalEnforcableLimitText.
    /// </summary>
    public Corvus.Json.JsonString FederalEnforcableLimitText
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FederalEnforcableLimitTextUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FederalEnforcableLimitTextJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Identification.
    /// </summary>
    public Caers.Api.SchemaEntities.EmissionsUnit.IdentificationIdentificationArray Identification
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(IdentificationUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.EmissionsUnit.IdentificationIdentificationArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(IdentificationJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.EmissionsUnit.IdentificationIdentificationArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MainIdentification.
    /// </summary>
    public Caers.Api.SchemaEntities.Identification MainIdentification
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MainIdentificationUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Identification(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MainIdentificationJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Identification>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MaximumTheoreticalEmissions.
    /// </summary>
    public Caers.Api.SchemaEntities.Measure MaximumTheoreticalEmissions
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MaximumTheoreticalEmissionsUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Measure(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MaximumTheoreticalEmissionsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Measure>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PermitByRule.
    /// </summary>
    public Corvus.Json.JsonString PermitByRule
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PermitByRuleUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PermitByRuleJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PermitLimitText.
    /// </summary>
    public Corvus.Json.JsonString PermitLimitText
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PermitLimitTextUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PermitLimitTextJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PermitStatusBeginYear.
    /// </summary>
    public Corvus.Json.JsonDate PermitStatusBeginYear
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PermitStatusBeginYearUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDate(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PermitStatusBeginYearJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDate>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PermitStatusCode.
    /// </summary>
    public Corvus.Json.JsonString PermitStatusCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PermitStatusCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PermitStatusCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PermitStatusEndYear.
    /// </summary>
    public Corvus.Json.JsonDate PermitStatusEndYear
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PermitStatusEndYearUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDate(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PermitStatusEndYearJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDate>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PotentialToEmit.
    /// </summary>
    public Caers.Api.SchemaEntities.Measure PotentialToEmit
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PotentialToEmitUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Measure(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PotentialToEmitJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Measure>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ReportingRequirement.
    /// </summary>
    public Corvus.Json.JsonString ReportingRequirement
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ReportingRequirementUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ReportingRequirementJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StatusCode.
    /// </summary>
    public Caers.Api.SchemaEntities.LookupValue StatusCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StatusCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.LookupValue(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StatusCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.LookupValue>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StatusCodeYear.
    /// </summary>
    public Corvus.Json.JsonInteger StatusCodeYear
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StatusCodeYearUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StatusCodeYearJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets UnitIsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString UnitIsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(UnitIsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(UnitIsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets UnitModificationDate.
    /// </summary>
    public Corvus.Json.JsonDate UnitModificationDate
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(UnitModificationDateUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDate(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(UnitModificationDateJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDate>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets UnitModificationDescription.
    /// </summary>
    public Corvus.Json.JsonString UnitModificationDescription
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(UnitModificationDescriptionUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(UnitModificationDescriptionJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets UnitNaics.
    /// </summary>
    public Corvus.Json.JsonString UnitNaics
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(UnitNaicsUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(UnitNaicsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets UnitOperationDate.
    /// </summary>
    public Corvus.Json.JsonDate UnitOperationDate
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(UnitOperationDateUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDate(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(UnitOperationDateJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDate>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets UnitTypeCode.
    /// </summary>
    public Caers.Api.SchemaEntities.LookupValue UnitTypeCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(UnitTypeCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.LookupValue(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(UnitTypeCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.LookupValue>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "EmissionsUnit"/>.
    /// </summary>
    public static EmissionsUnit Create(Caers.Api.SchemaEntities.LookupValue unitTypeCode, Caers.Api.SchemaEntities.EmissionsUnit.CommentEntity? comment = null, Caers.Api.SchemaEntities.EmissionsUnit.DescriptionEntity? description = null, Caers.Api.SchemaEntities.Measure? designCapacity = null, Corvus.Json.JsonString? designCapacityIsReadOnly = null, Caers.Api.SchemaEntities.EmissionsUnit.EmissionsProcessArray? emissionsProcesses = null, Corvus.Json.JsonString? engineUseType = null, Corvus.Json.JsonString? engineUseTypeDescription = null, Corvus.Json.JsonString? federalEnforcableLimitText = null, Caers.Api.SchemaEntities.EmissionsUnit.IdentificationIdentificationArray? identification = null, Caers.Api.SchemaEntities.Identification? mainIdentification = null, Caers.Api.SchemaEntities.Measure? maximumTheoreticalEmissions = null, Corvus.Json.JsonString? permitByRule = null, Corvus.Json.JsonString? permitLimitText = null, Corvus.Json.JsonDate? permitStatusBeginYear = null, Corvus.Json.JsonString? permitStatusCode = null, Corvus.Json.JsonDate? permitStatusEndYear = null, Caers.Api.SchemaEntities.Measure? potentialToEmit = null, Corvus.Json.JsonString? reportingRequirement = null, Caers.Api.SchemaEntities.LookupValue? statusCode = null, Corvus.Json.JsonInteger? statusCodeYear = null, Corvus.Json.JsonString? unitIsReadOnly = null, Corvus.Json.JsonDate? unitModificationDate = null, Corvus.Json.JsonString? unitModificationDescription = null, Corvus.Json.JsonString? unitNaics = null, Corvus.Json.JsonDate? unitOperationDate = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(UnitTypeCodeJsonPropertyName, unitTypeCode.AsAny);
        if (comment is Caers.Api.SchemaEntities.EmissionsUnit.CommentEntity comment__)
        {
            builder.Add(CommentJsonPropertyName, comment__.AsAny);
        }

        if (description is Caers.Api.SchemaEntities.EmissionsUnit.DescriptionEntity description__)
        {
            builder.Add(DescriptionJsonPropertyName, description__.AsAny);
        }

        if (designCapacity is Caers.Api.SchemaEntities.Measure designCapacity__)
        {
            builder.Add(DesignCapacityJsonPropertyName, designCapacity__.AsAny);
        }

        if (designCapacityIsReadOnly is Corvus.Json.JsonString designCapacityIsReadOnly__)
        {
            builder.Add(DesignCapacityIsReadOnlyJsonPropertyName, designCapacityIsReadOnly__.AsAny);
        }

        if (emissionsProcesses is Caers.Api.SchemaEntities.EmissionsUnit.EmissionsProcessArray emissionsProcesses__)
        {
            builder.Add(EmissionsProcessesJsonPropertyName, emissionsProcesses__.AsAny);
        }

        if (engineUseType is Corvus.Json.JsonString engineUseType__)
        {
            builder.Add(EngineUseTypeJsonPropertyName, engineUseType__.AsAny);
        }

        if (engineUseTypeDescription is Corvus.Json.JsonString engineUseTypeDescription__)
        {
            builder.Add(EngineUseTypeDescriptionJsonPropertyName, engineUseTypeDescription__.AsAny);
        }

        if (federalEnforcableLimitText is Corvus.Json.JsonString federalEnforcableLimitText__)
        {
            builder.Add(FederalEnforcableLimitTextJsonPropertyName, federalEnforcableLimitText__.AsAny);
        }

        if (identification is Caers.Api.SchemaEntities.EmissionsUnit.IdentificationIdentificationArray identification__)
        {
            builder.Add(IdentificationJsonPropertyName, identification__.AsAny);
        }

        if (mainIdentification is Caers.Api.SchemaEntities.Identification mainIdentification__)
        {
            builder.Add(MainIdentificationJsonPropertyName, mainIdentification__.AsAny);
        }

        if (maximumTheoreticalEmissions is Caers.Api.SchemaEntities.Measure maximumTheoreticalEmissions__)
        {
            builder.Add(MaximumTheoreticalEmissionsJsonPropertyName, maximumTheoreticalEmissions__.AsAny);
        }

        if (permitByRule is Corvus.Json.JsonString permitByRule__)
        {
            builder.Add(PermitByRuleJsonPropertyName, permitByRule__.AsAny);
        }

        if (permitLimitText is Corvus.Json.JsonString permitLimitText__)
        {
            builder.Add(PermitLimitTextJsonPropertyName, permitLimitText__.AsAny);
        }

        if (permitStatusBeginYear is Corvus.Json.JsonDate permitStatusBeginYear__)
        {
            builder.Add(PermitStatusBeginYearJsonPropertyName, permitStatusBeginYear__.AsAny);
        }

        if (permitStatusCode is Corvus.Json.JsonString permitStatusCode__)
        {
            builder.Add(PermitStatusCodeJsonPropertyName, permitStatusCode__.AsAny);
        }

        if (permitStatusEndYear is Corvus.Json.JsonDate permitStatusEndYear__)
        {
            builder.Add(PermitStatusEndYearJsonPropertyName, permitStatusEndYear__.AsAny);
        }

        if (potentialToEmit is Caers.Api.SchemaEntities.Measure potentialToEmit__)
        {
            builder.Add(PotentialToEmitJsonPropertyName, potentialToEmit__.AsAny);
        }

        if (reportingRequirement is Corvus.Json.JsonString reportingRequirement__)
        {
            builder.Add(ReportingRequirementJsonPropertyName, reportingRequirement__.AsAny);
        }

        if (statusCode is Caers.Api.SchemaEntities.LookupValue statusCode__)
        {
            builder.Add(StatusCodeJsonPropertyName, statusCode__.AsAny);
        }

        if (statusCodeYear is Corvus.Json.JsonInteger statusCodeYear__)
        {
            builder.Add(StatusCodeYearJsonPropertyName, statusCodeYear__.AsAny);
        }

        if (unitIsReadOnly is Corvus.Json.JsonString unitIsReadOnly__)
        {
            builder.Add(UnitIsReadOnlyJsonPropertyName, unitIsReadOnly__.AsAny);
        }

        if (unitModificationDate is Corvus.Json.JsonDate unitModificationDate__)
        {
            builder.Add(UnitModificationDateJsonPropertyName, unitModificationDate__.AsAny);
        }

        if (unitModificationDescription is Corvus.Json.JsonString unitModificationDescription__)
        {
            builder.Add(UnitModificationDescriptionJsonPropertyName, unitModificationDescription__.AsAny);
        }

        if (unitNaics is Corvus.Json.JsonString unitNaics__)
        {
            builder.Add(UnitNaicsJsonPropertyName, unitNaics__.AsAny);
        }

        if (unitOperationDate is Corvus.Json.JsonDate unitOperationDate__)
        {
            builder.Add(UnitOperationDateJsonPropertyName, unitOperationDate__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets comment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithComment(in Caers.Api.SchemaEntities.EmissionsUnit.CommentEntity value)
    {
        return this.SetProperty(CommentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets description.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithDescription(in Caers.Api.SchemaEntities.EmissionsUnit.DescriptionEntity value)
    {
        return this.SetProperty(DescriptionJsonPropertyName, value);
    }

    /// <summary>
    /// Sets designCapacity.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithDesignCapacity(in Caers.Api.SchemaEntities.Measure value)
    {
        return this.SetProperty(DesignCapacityJsonPropertyName, value);
    }

    /// <summary>
    /// Sets designCapacityIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithDesignCapacityIsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(DesignCapacityIsReadOnlyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets emissionsProcesses.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithEmissionsProcesses(in Caers.Api.SchemaEntities.EmissionsUnit.EmissionsProcessArray value)
    {
        return this.SetProperty(EmissionsProcessesJsonPropertyName, value);
    }

    /// <summary>
    /// Sets engineUseType.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithEngineUseType(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EngineUseTypeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets engineUseTypeDescription.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithEngineUseTypeDescription(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EngineUseTypeDescriptionJsonPropertyName, value);
    }

    /// <summary>
    /// Sets federalEnforcableLimitText.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithFederalEnforcableLimitText(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(FederalEnforcableLimitTextJsonPropertyName, value);
    }

    /// <summary>
    /// Sets identification.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithIdentification(in Caers.Api.SchemaEntities.EmissionsUnit.IdentificationIdentificationArray value)
    {
        return this.SetProperty(IdentificationJsonPropertyName, value);
    }

    /// <summary>
    /// Sets mainIdentification.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithMainIdentification(in Caers.Api.SchemaEntities.Identification value)
    {
        return this.SetProperty(MainIdentificationJsonPropertyName, value);
    }

    /// <summary>
    /// Sets maximumTheoreticalEmissions.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithMaximumTheoreticalEmissions(in Caers.Api.SchemaEntities.Measure value)
    {
        return this.SetProperty(MaximumTheoreticalEmissionsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets permitByRule.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithPermitByRule(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(PermitByRuleJsonPropertyName, value);
    }

    /// <summary>
    /// Sets permitLimitText.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithPermitLimitText(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(PermitLimitTextJsonPropertyName, value);
    }

    /// <summary>
    /// Sets permitStatusBeginYear.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithPermitStatusBeginYear(in Corvus.Json.JsonDate value)
    {
        return this.SetProperty(PermitStatusBeginYearJsonPropertyName, value);
    }

    /// <summary>
    /// Sets permitStatusCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithPermitStatusCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(PermitStatusCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets permitStatusEndYear.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithPermitStatusEndYear(in Corvus.Json.JsonDate value)
    {
        return this.SetProperty(PermitStatusEndYearJsonPropertyName, value);
    }

    /// <summary>
    /// Sets potentialToEmit.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithPotentialToEmit(in Caers.Api.SchemaEntities.Measure value)
    {
        return this.SetProperty(PotentialToEmitJsonPropertyName, value);
    }

    /// <summary>
    /// Sets reportingRequirement.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithReportingRequirement(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(ReportingRequirementJsonPropertyName, value);
    }

    /// <summary>
    /// Sets statusCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithStatusCode(in Caers.Api.SchemaEntities.LookupValue value)
    {
        return this.SetProperty(StatusCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets statusCodeYear.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithStatusCodeYear(in Corvus.Json.JsonInteger value)
    {
        return this.SetProperty(StatusCodeYearJsonPropertyName, value);
    }

    /// <summary>
    /// Sets unitIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithUnitIsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(UnitIsReadOnlyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets unitModificationDate.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithUnitModificationDate(in Corvus.Json.JsonDate value)
    {
        return this.SetProperty(UnitModificationDateJsonPropertyName, value);
    }

    /// <summary>
    /// Sets unitModificationDescription.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithUnitModificationDescription(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(UnitModificationDescriptionJsonPropertyName, value);
    }

    /// <summary>
    /// Sets unitNaics.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithUnitNaics(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(UnitNaicsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets unitOperationDate.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithUnitOperationDate(in Corvus.Json.JsonDate value)
    {
        return this.SetProperty(UnitOperationDateJsonPropertyName, value);
    }

    /// <summary>
    /// Sets unitTypeCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsUnit WithUnitTypeCode(in Caers.Api.SchemaEntities.LookupValue value)
    {
        return this.SetProperty(UnitTypeCodeJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateUnitTypeCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.LookupValue>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateIdentification(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.EmissionsUnit.IdentificationIdentificationArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateDescription(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.EmissionsUnit.DescriptionEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStatusCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.LookupValue>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStatusCodeYear(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonInteger>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateComment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.EmissionsUnit.CommentEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateDesignCapacity(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Measure>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmissionsProcesses(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.EmissionsUnit.EmissionsProcessArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateUnitOperationDate(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDate>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePermitStatusCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePermitStatusBeginYear(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDate>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePermitStatusEndYear(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDate>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateUnitIsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateDesignCapacityIsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMaximumTheoreticalEmissions(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Measure>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePotentialToEmit(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Measure>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateUnitNaics(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePermitByRule(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEngineUseType(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEngineUseTypeDescription(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFederalEnforcableLimitText(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePermitLimitText(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateUnitModificationDate(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDate>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateUnitModificationDescription(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateReportingRequirement(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMainIdentification(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Identification>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(UnitTypeCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateUnitTypeCode;
                return true;
            }
            else if (property.NameEquals(IdentificationUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateIdentification;
                return true;
            }
            else if (property.NameEquals(DescriptionUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateDescription;
                return true;
            }
            else if (property.NameEquals(StatusCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStatusCode;
                return true;
            }
            else if (property.NameEquals(StatusCodeYearUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStatusCodeYear;
                return true;
            }
            else if (property.NameEquals(CommentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateComment;
                return true;
            }
            else if (property.NameEquals(DesignCapacityUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateDesignCapacity;
                return true;
            }
            else if (property.NameEquals(EmissionsProcessesUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionsProcesses;
                return true;
            }
            else if (property.NameEquals(UnitOperationDateUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateUnitOperationDate;
                return true;
            }
            else if (property.NameEquals(PermitStatusCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitStatusCode;
                return true;
            }
            else if (property.NameEquals(PermitStatusBeginYearUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitStatusBeginYear;
                return true;
            }
            else if (property.NameEquals(PermitStatusEndYearUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitStatusEndYear;
                return true;
            }
            else if (property.NameEquals(UnitIsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateUnitIsReadOnly;
                return true;
            }
            else if (property.NameEquals(DesignCapacityIsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateDesignCapacityIsReadOnly;
                return true;
            }
            else if (property.NameEquals(MaximumTheoreticalEmissionsUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateMaximumTheoreticalEmissions;
                return true;
            }
            else if (property.NameEquals(PotentialToEmitUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePotentialToEmit;
                return true;
            }
            else if (property.NameEquals(UnitNaicsUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateUnitNaics;
                return true;
            }
            else if (property.NameEquals(PermitByRuleUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitByRule;
                return true;
            }
            else if (property.NameEquals(EngineUseTypeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEngineUseType;
                return true;
            }
            else if (property.NameEquals(EngineUseTypeDescriptionUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEngineUseTypeDescription;
                return true;
            }
            else if (property.NameEquals(FederalEnforcableLimitTextUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFederalEnforcableLimitText;
                return true;
            }
            else if (property.NameEquals(PermitLimitTextUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitLimitText;
                return true;
            }
            else if (property.NameEquals(UnitModificationDateUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateUnitModificationDate;
                return true;
            }
            else if (property.NameEquals(UnitModificationDescriptionUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateUnitModificationDescription;
                return true;
            }
            else if (property.NameEquals(ReportingRequirementUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateReportingRequirement;
                return true;
            }
            else if (property.NameEquals(MainIdentificationUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateMainIdentification;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(UnitTypeCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateUnitTypeCode;
                return true;
            }
            else if (property.NameEquals(IdentificationJsonPropertyName))
            {
                propertyValidator = __CorvusValidateIdentification;
                return true;
            }
            else if (property.NameEquals(DescriptionJsonPropertyName))
            {
                propertyValidator = __CorvusValidateDescription;
                return true;
            }
            else if (property.NameEquals(StatusCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStatusCode;
                return true;
            }
            else if (property.NameEquals(StatusCodeYearJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStatusCodeYear;
                return true;
            }
            else if (property.NameEquals(CommentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateComment;
                return true;
            }
            else if (property.NameEquals(DesignCapacityJsonPropertyName))
            {
                propertyValidator = __CorvusValidateDesignCapacity;
                return true;
            }
            else if (property.NameEquals(EmissionsProcessesJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionsProcesses;
                return true;
            }
            else if (property.NameEquals(UnitOperationDateJsonPropertyName))
            {
                propertyValidator = __CorvusValidateUnitOperationDate;
                return true;
            }
            else if (property.NameEquals(PermitStatusCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitStatusCode;
                return true;
            }
            else if (property.NameEquals(PermitStatusBeginYearJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitStatusBeginYear;
                return true;
            }
            else if (property.NameEquals(PermitStatusEndYearJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitStatusEndYear;
                return true;
            }
            else if (property.NameEquals(UnitIsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidateUnitIsReadOnly;
                return true;
            }
            else if (property.NameEquals(DesignCapacityIsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidateDesignCapacityIsReadOnly;
                return true;
            }
            else if (property.NameEquals(MaximumTheoreticalEmissionsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMaximumTheoreticalEmissions;
                return true;
            }
            else if (property.NameEquals(PotentialToEmitJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePotentialToEmit;
                return true;
            }
            else if (property.NameEquals(UnitNaicsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateUnitNaics;
                return true;
            }
            else if (property.NameEquals(PermitByRuleJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitByRule;
                return true;
            }
            else if (property.NameEquals(EngineUseTypeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEngineUseType;
                return true;
            }
            else if (property.NameEquals(EngineUseTypeDescriptionJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEngineUseTypeDescription;
                return true;
            }
            else if (property.NameEquals(FederalEnforcableLimitTextJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFederalEnforcableLimitText;
                return true;
            }
            else if (property.NameEquals(PermitLimitTextJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitLimitText;
                return true;
            }
            else if (property.NameEquals(UnitModificationDateJsonPropertyName))
            {
                propertyValidator = __CorvusValidateUnitModificationDate;
                return true;
            }
            else if (property.NameEquals(UnitModificationDescriptionJsonPropertyName))
            {
                propertyValidator = __CorvusValidateUnitModificationDescription;
                return true;
            }
            else if (property.NameEquals(ReportingRequirementJsonPropertyName))
            {
                propertyValidator = __CorvusValidateReportingRequirement;
                return true;
            }
            else if (property.NameEquals(MainIdentificationJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMainIdentification;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}