//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api.SchemaEntities;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct EventEmissionsProcessDataType
{
    /// <summary>
    /// JSON property name for <see cref = "AmountofFuelConsumed"/>.
    /// </summary>
    public static ReadOnlySpan<byte> AmountofFuelConsumedUtf8JsonPropertyName => "amountofFuelConsumed"u8;

    /// <summary>
    /// JSON property name for <see cref = "AmountofFuelConsumed"/>.
    /// </summary>
    public const string AmountofFuelConsumedJsonPropertyName = "amountofFuelConsumed";
    /// <summary>
    /// JSON property name for <see cref = "AmountofFuelConsumedUnitofMeasureCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> AmountofFuelConsumedUnitofMeasureCodeUtf8JsonPropertyName => "amountofFuelConsumedUnitofMeasureCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "AmountofFuelConsumedUnitofMeasureCode"/>.
    /// </summary>
    public const string AmountofFuelConsumedUnitofMeasureCodeJsonPropertyName = "amountofFuelConsumedUnitofMeasureCode";
    /// <summary>
    /// JSON property name for <see cref = "EmissionReductionTechniqueCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionReductionTechniqueCodeUtf8JsonPropertyName => "emissionReductionTechniqueCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmissionReductionTechniqueCode"/>.
    /// </summary>
    public const string EmissionReductionTechniqueCodeJsonPropertyName = "emissionReductionTechniqueCode";
    /// <summary>
    /// JSON property name for <see cref = "EventEmissionsProcessComment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EventEmissionsProcessCommentUtf8JsonPropertyName => "eventEmissionsProcessComment"u8;

    /// <summary>
    /// JSON property name for <see cref = "EventEmissionsProcessComment"/>.
    /// </summary>
    public const string EventEmissionsProcessCommentJsonPropertyName = "eventEmissionsProcessComment";
    /// <summary>
    /// JSON property name for <see cref = "EventEmissionsProcessEmissions"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EventEmissionsProcessEmissionsUtf8JsonPropertyName => "eventEmissionsProcessEmissions"u8;

    /// <summary>
    /// JSON property name for <see cref = "EventEmissionsProcessEmissions"/>.
    /// </summary>
    public const string EventEmissionsProcessEmissionsJsonPropertyName = "eventEmissionsProcessEmissions";
    /// <summary>
    /// JSON property name for <see cref = "FuelConfigurationCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FuelConfigurationCodeUtf8JsonPropertyName => "fuelConfigurationCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "FuelConfigurationCode"/>.
    /// </summary>
    public const string FuelConfigurationCodeJsonPropertyName = "fuelConfigurationCode";
    /// <summary>
    /// JSON property name for <see cref = "FuelLoading"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FuelLoadingUtf8JsonPropertyName => "fuelLoading"u8;

    /// <summary>
    /// JSON property name for <see cref = "FuelLoading"/>.
    /// </summary>
    public const string FuelLoadingJsonPropertyName = "fuelLoading";
    /// <summary>
    /// JSON property name for <see cref = "FuelLoadingUnitofMeasureCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FuelLoadingUnitofMeasureCodeUtf8JsonPropertyName => "fuelLoadingUnitofMeasureCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "FuelLoadingUnitofMeasureCode"/>.
    /// </summary>
    public const string FuelLoadingUnitofMeasureCodeJsonPropertyName = "fuelLoadingUnitofMeasureCode";
    /// <summary>
    /// JSON property name for <see cref = "HeatRelease"/>.
    /// </summary>
    public static ReadOnlySpan<byte> HeatReleaseUtf8JsonPropertyName => "heatRelease"u8;

    /// <summary>
    /// JSON property name for <see cref = "HeatRelease"/>.
    /// </summary>
    public const string HeatReleaseJsonPropertyName = "heatRelease";
    /// <summary>
    /// JSON property name for <see cref = "HeatReleaseUnitofMeasureCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> HeatReleaseUnitofMeasureCodeUtf8JsonPropertyName => "heatReleaseUnitofMeasureCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "HeatReleaseUnitofMeasureCode"/>.
    /// </summary>
    public const string HeatReleaseUnitofMeasureCodeJsonPropertyName = "heatReleaseUnitofMeasureCode";
    /// <summary>
    /// JSON property name for <see cref = "PercentDuffFuelMoisture"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PercentDuffFuelMoistureUtf8JsonPropertyName => "percentDuffFuelMoisture"u8;

    /// <summary>
    /// JSON property name for <see cref = "PercentDuffFuelMoisture"/>.
    /// </summary>
    public const string PercentDuffFuelMoistureJsonPropertyName = "percentDuffFuelMoisture";
    /// <summary>
    /// JSON property name for <see cref = "PercentLiveFuelMoisture"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PercentLiveFuelMoistureUtf8JsonPropertyName => "percentLiveFuelMoisture"u8;

    /// <summary>
    /// JSON property name for <see cref = "PercentLiveFuelMoisture"/>.
    /// </summary>
    public const string PercentLiveFuelMoistureJsonPropertyName = "percentLiveFuelMoisture";
    /// <summary>
    /// JSON property name for <see cref = "PercentOneThousandHourFuelMoisture"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PercentOneThousandHourFuelMoistureUtf8JsonPropertyName => "percentOneThousandHourFuelMoisture"u8;

    /// <summary>
    /// JSON property name for <see cref = "PercentOneThousandHourFuelMoisture"/>.
    /// </summary>
    public const string PercentOneThousandHourFuelMoistureJsonPropertyName = "percentOneThousandHourFuelMoisture";
    /// <summary>
    /// JSON property name for <see cref = "PercentTenHourFuelMoisture"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PercentTenHourFuelMoistureUtf8JsonPropertyName => "percentTenHourFuelMoisture"u8;

    /// <summary>
    /// JSON property name for <see cref = "PercentTenHourFuelMoisture"/>.
    /// </summary>
    public const string PercentTenHourFuelMoistureJsonPropertyName = "percentTenHourFuelMoisture";
    /// <summary>
    /// JSON property name for <see cref = "SourceClassificationCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> SourceClassificationCodeUtf8JsonPropertyName => "sourceClassificationCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "SourceClassificationCode"/>.
    /// </summary>
    public const string SourceClassificationCodeJsonPropertyName = "sourceClassificationCode";
    /// <summary>
    /// Gets AmountofFuelConsumed.
    /// </summary>
    public Corvus.Json.JsonString AmountofFuelConsumed
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(AmountofFuelConsumedUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(AmountofFuelConsumedJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets AmountofFuelConsumedUnitofMeasureCode.
    /// </summary>
    public Corvus.Json.JsonString AmountofFuelConsumedUnitofMeasureCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(AmountofFuelConsumedUnitofMeasureCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(AmountofFuelConsumedUnitofMeasureCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EmissionReductionTechniqueCode.
    /// </summary>
    public Corvus.Json.JsonString EmissionReductionTechniqueCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionReductionTechniqueCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionReductionTechniqueCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EventEmissionsProcessComment.
    /// </summary>
    public Corvus.Json.JsonString EventEmissionsProcessComment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EventEmissionsProcessCommentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EventEmissionsProcessCommentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EventEmissionsProcessEmissions.
    /// </summary>
    public Caers.Api.SchemaEntities.EventEmissionsProcessDataType.EmissionsDataTypeArray EventEmissionsProcessEmissions
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EventEmissionsProcessEmissionsUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.EventEmissionsProcessDataType.EmissionsDataTypeArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EventEmissionsProcessEmissionsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.EventEmissionsProcessDataType.EmissionsDataTypeArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FuelConfigurationCode.
    /// </summary>
    public Corvus.Json.JsonString FuelConfigurationCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FuelConfigurationCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FuelConfigurationCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FuelLoading.
    /// </summary>
    public Corvus.Json.JsonString FuelLoading
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FuelLoadingUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FuelLoadingJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FuelLoadingUnitofMeasureCode.
    /// </summary>
    public Corvus.Json.JsonString FuelLoadingUnitofMeasureCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FuelLoadingUnitofMeasureCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FuelLoadingUnitofMeasureCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets HeatRelease.
    /// </summary>
    public Corvus.Json.JsonString HeatRelease
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(HeatReleaseUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(HeatReleaseJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets HeatReleaseUnitofMeasureCode.
    /// </summary>
    public Corvus.Json.JsonString HeatReleaseUnitofMeasureCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(HeatReleaseUnitofMeasureCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(HeatReleaseUnitofMeasureCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PercentDuffFuelMoisture.
    /// </summary>
    public Corvus.Json.JsonString PercentDuffFuelMoisture
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PercentDuffFuelMoistureUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PercentDuffFuelMoistureJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PercentLiveFuelMoisture.
    /// </summary>
    public Corvus.Json.JsonString PercentLiveFuelMoisture
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PercentLiveFuelMoistureUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PercentLiveFuelMoistureJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PercentOneThousandHourFuelMoisture.
    /// </summary>
    public Corvus.Json.JsonString PercentOneThousandHourFuelMoisture
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PercentOneThousandHourFuelMoistureUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PercentOneThousandHourFuelMoistureJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PercentTenHourFuelMoisture.
    /// </summary>
    public Corvus.Json.JsonString PercentTenHourFuelMoisture
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PercentTenHourFuelMoistureUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PercentTenHourFuelMoistureJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets SourceClassificationCode.
    /// </summary>
    public Corvus.Json.JsonString SourceClassificationCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(SourceClassificationCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(SourceClassificationCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "EventEmissionsProcessDataType"/>.
    /// </summary>
    public static EventEmissionsProcessDataType Create(Caers.Api.SchemaEntities.EventEmissionsProcessDataType.EmissionsDataTypeArray eventEmissionsProcessEmissions, Corvus.Json.JsonString sourceClassificationCode, Corvus.Json.JsonString? amountofFuelConsumed = null, Corvus.Json.JsonString? amountofFuelConsumedUnitofMeasureCode = null, Corvus.Json.JsonString? emissionReductionTechniqueCode = null, Corvus.Json.JsonString? eventEmissionsProcessComment = null, Corvus.Json.JsonString? fuelConfigurationCode = null, Corvus.Json.JsonString? fuelLoading = null, Corvus.Json.JsonString? fuelLoadingUnitofMeasureCode = null, Corvus.Json.JsonString? heatRelease = null, Corvus.Json.JsonString? heatReleaseUnitofMeasureCode = null, Corvus.Json.JsonString? percentDuffFuelMoisture = null, Corvus.Json.JsonString? percentLiveFuelMoisture = null, Corvus.Json.JsonString? percentOneThousandHourFuelMoisture = null, Corvus.Json.JsonString? percentTenHourFuelMoisture = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(EventEmissionsProcessEmissionsJsonPropertyName, eventEmissionsProcessEmissions.AsAny);
        builder.Add(SourceClassificationCodeJsonPropertyName, sourceClassificationCode.AsAny);
        if (amountofFuelConsumed is Corvus.Json.JsonString amountofFuelConsumed__)
        {
            builder.Add(AmountofFuelConsumedJsonPropertyName, amountofFuelConsumed__.AsAny);
        }

        if (amountofFuelConsumedUnitofMeasureCode is Corvus.Json.JsonString amountofFuelConsumedUnitofMeasureCode__)
        {
            builder.Add(AmountofFuelConsumedUnitofMeasureCodeJsonPropertyName, amountofFuelConsumedUnitofMeasureCode__.AsAny);
        }

        if (emissionReductionTechniqueCode is Corvus.Json.JsonString emissionReductionTechniqueCode__)
        {
            builder.Add(EmissionReductionTechniqueCodeJsonPropertyName, emissionReductionTechniqueCode__.AsAny);
        }

        if (eventEmissionsProcessComment is Corvus.Json.JsonString eventEmissionsProcessComment__)
        {
            builder.Add(EventEmissionsProcessCommentJsonPropertyName, eventEmissionsProcessComment__.AsAny);
        }

        if (fuelConfigurationCode is Corvus.Json.JsonString fuelConfigurationCode__)
        {
            builder.Add(FuelConfigurationCodeJsonPropertyName, fuelConfigurationCode__.AsAny);
        }

        if (fuelLoading is Corvus.Json.JsonString fuelLoading__)
        {
            builder.Add(FuelLoadingJsonPropertyName, fuelLoading__.AsAny);
        }

        if (fuelLoadingUnitofMeasureCode is Corvus.Json.JsonString fuelLoadingUnitofMeasureCode__)
        {
            builder.Add(FuelLoadingUnitofMeasureCodeJsonPropertyName, fuelLoadingUnitofMeasureCode__.AsAny);
        }

        if (heatRelease is Corvus.Json.JsonString heatRelease__)
        {
            builder.Add(HeatReleaseJsonPropertyName, heatRelease__.AsAny);
        }

        if (heatReleaseUnitofMeasureCode is Corvus.Json.JsonString heatReleaseUnitofMeasureCode__)
        {
            builder.Add(HeatReleaseUnitofMeasureCodeJsonPropertyName, heatReleaseUnitofMeasureCode__.AsAny);
        }

        if (percentDuffFuelMoisture is Corvus.Json.JsonString percentDuffFuelMoisture__)
        {
            builder.Add(PercentDuffFuelMoistureJsonPropertyName, percentDuffFuelMoisture__.AsAny);
        }

        if (percentLiveFuelMoisture is Corvus.Json.JsonString percentLiveFuelMoisture__)
        {
            builder.Add(PercentLiveFuelMoistureJsonPropertyName, percentLiveFuelMoisture__.AsAny);
        }

        if (percentOneThousandHourFuelMoisture is Corvus.Json.JsonString percentOneThousandHourFuelMoisture__)
        {
            builder.Add(PercentOneThousandHourFuelMoistureJsonPropertyName, percentOneThousandHourFuelMoisture__.AsAny);
        }

        if (percentTenHourFuelMoisture is Corvus.Json.JsonString percentTenHourFuelMoisture__)
        {
            builder.Add(PercentTenHourFuelMoistureJsonPropertyName, percentTenHourFuelMoisture__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets amountofFuelConsumed.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventEmissionsProcessDataType WithAmountofFuelConsumed(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(AmountofFuelConsumedJsonPropertyName, value);
    }

    /// <summary>
    /// Sets amountofFuelConsumedUnitofMeasureCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventEmissionsProcessDataType WithAmountofFuelConsumedUnitofMeasureCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(AmountofFuelConsumedUnitofMeasureCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets emissionReductionTechniqueCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventEmissionsProcessDataType WithEmissionReductionTechniqueCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EmissionReductionTechniqueCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets eventEmissionsProcessComment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventEmissionsProcessDataType WithEventEmissionsProcessComment(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EventEmissionsProcessCommentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets eventEmissionsProcessEmissions.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventEmissionsProcessDataType WithEventEmissionsProcessEmissions(in Caers.Api.SchemaEntities.EventEmissionsProcessDataType.EmissionsDataTypeArray value)
    {
        return this.SetProperty(EventEmissionsProcessEmissionsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets fuelConfigurationCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventEmissionsProcessDataType WithFuelConfigurationCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(FuelConfigurationCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets fuelLoading.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventEmissionsProcessDataType WithFuelLoading(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(FuelLoadingJsonPropertyName, value);
    }

    /// <summary>
    /// Sets fuelLoadingUnitofMeasureCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventEmissionsProcessDataType WithFuelLoadingUnitofMeasureCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(FuelLoadingUnitofMeasureCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets heatRelease.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventEmissionsProcessDataType WithHeatRelease(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(HeatReleaseJsonPropertyName, value);
    }

    /// <summary>
    /// Sets heatReleaseUnitofMeasureCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventEmissionsProcessDataType WithHeatReleaseUnitofMeasureCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(HeatReleaseUnitofMeasureCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets percentDuffFuelMoisture.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventEmissionsProcessDataType WithPercentDuffFuelMoisture(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(PercentDuffFuelMoistureJsonPropertyName, value);
    }

    /// <summary>
    /// Sets percentLiveFuelMoisture.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventEmissionsProcessDataType WithPercentLiveFuelMoisture(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(PercentLiveFuelMoistureJsonPropertyName, value);
    }

    /// <summary>
    /// Sets percentOneThousandHourFuelMoisture.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventEmissionsProcessDataType WithPercentOneThousandHourFuelMoisture(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(PercentOneThousandHourFuelMoistureJsonPropertyName, value);
    }

    /// <summary>
    /// Sets percentTenHourFuelMoisture.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventEmissionsProcessDataType WithPercentTenHourFuelMoisture(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(PercentTenHourFuelMoistureJsonPropertyName, value);
    }

    /// <summary>
    /// Sets sourceClassificationCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventEmissionsProcessDataType WithSourceClassificationCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(SourceClassificationCodeJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateEventEmissionsProcessEmissions(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.EventEmissionsProcessDataType.EmissionsDataTypeArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateSourceClassificationCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFuelConfigurationCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFuelLoading(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFuelLoadingUnitofMeasureCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateAmountofFuelConsumed(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateAmountofFuelConsumedUnitofMeasureCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePercentTenHourFuelMoisture(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePercentOneThousandHourFuelMoisture(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePercentLiveFuelMoisture(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePercentDuffFuelMoisture(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateHeatRelease(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateHeatReleaseUnitofMeasureCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmissionReductionTechniqueCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEventEmissionsProcessComment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(EventEmissionsProcessEmissionsUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventEmissionsProcessEmissions;
                return true;
            }
            else if (property.NameEquals(SourceClassificationCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateSourceClassificationCode;
                return true;
            }
            else if (property.NameEquals(FuelConfigurationCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFuelConfigurationCode;
                return true;
            }
            else if (property.NameEquals(FuelLoadingUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFuelLoading;
                return true;
            }
            else if (property.NameEquals(FuelLoadingUnitofMeasureCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFuelLoadingUnitofMeasureCode;
                return true;
            }
            else if (property.NameEquals(AmountofFuelConsumedUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateAmountofFuelConsumed;
                return true;
            }
            else if (property.NameEquals(AmountofFuelConsumedUnitofMeasureCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateAmountofFuelConsumedUnitofMeasureCode;
                return true;
            }
            else if (property.NameEquals(PercentTenHourFuelMoistureUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePercentTenHourFuelMoisture;
                return true;
            }
            else if (property.NameEquals(PercentOneThousandHourFuelMoistureUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePercentOneThousandHourFuelMoisture;
                return true;
            }
            else if (property.NameEquals(PercentLiveFuelMoistureUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePercentLiveFuelMoisture;
                return true;
            }
            else if (property.NameEquals(PercentDuffFuelMoistureUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePercentDuffFuelMoisture;
                return true;
            }
            else if (property.NameEquals(HeatReleaseUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateHeatRelease;
                return true;
            }
            else if (property.NameEquals(HeatReleaseUnitofMeasureCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateHeatReleaseUnitofMeasureCode;
                return true;
            }
            else if (property.NameEquals(EmissionReductionTechniqueCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionReductionTechniqueCode;
                return true;
            }
            else if (property.NameEquals(EventEmissionsProcessCommentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventEmissionsProcessComment;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(EventEmissionsProcessEmissionsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventEmissionsProcessEmissions;
                return true;
            }
            else if (property.NameEquals(SourceClassificationCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateSourceClassificationCode;
                return true;
            }
            else if (property.NameEquals(FuelConfigurationCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFuelConfigurationCode;
                return true;
            }
            else if (property.NameEquals(FuelLoadingJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFuelLoading;
                return true;
            }
            else if (property.NameEquals(FuelLoadingUnitofMeasureCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFuelLoadingUnitofMeasureCode;
                return true;
            }
            else if (property.NameEquals(AmountofFuelConsumedJsonPropertyName))
            {
                propertyValidator = __CorvusValidateAmountofFuelConsumed;
                return true;
            }
            else if (property.NameEquals(AmountofFuelConsumedUnitofMeasureCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateAmountofFuelConsumedUnitofMeasureCode;
                return true;
            }
            else if (property.NameEquals(PercentTenHourFuelMoistureJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePercentTenHourFuelMoisture;
                return true;
            }
            else if (property.NameEquals(PercentOneThousandHourFuelMoistureJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePercentOneThousandHourFuelMoisture;
                return true;
            }
            else if (property.NameEquals(PercentLiveFuelMoistureJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePercentLiveFuelMoisture;
                return true;
            }
            else if (property.NameEquals(PercentDuffFuelMoistureJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePercentDuffFuelMoisture;
                return true;
            }
            else if (property.NameEquals(HeatReleaseJsonPropertyName))
            {
                propertyValidator = __CorvusValidateHeatRelease;
                return true;
            }
            else if (property.NameEquals(HeatReleaseUnitofMeasureCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateHeatReleaseUnitofMeasureCode;
                return true;
            }
            else if (property.NameEquals(EmissionReductionTechniqueCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionReductionTechniqueCode;
                return true;
            }
            else if (property.NameEquals(EventEmissionsProcessCommentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventEmissionsProcessComment;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}