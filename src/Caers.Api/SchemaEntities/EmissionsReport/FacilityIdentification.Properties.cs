//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api.SchemaEntities;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct FacilityIdentification
{
    /// <summary>
    /// JSON property name for <see cref = "EffectiveDate"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EffectiveDateUtf8JsonPropertyName => "effectiveDate"u8;

    /// <summary>
    /// JSON property name for <see cref = "EffectiveDate"/>.
    /// </summary>
    public const string EffectiveDateJsonPropertyName = "effectiveDate";
    /// <summary>
    /// JSON property name for <see cref = "EndDate"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EndDateUtf8JsonPropertyName => "endDate"u8;

    /// <summary>
    /// JSON property name for <see cref = "EndDate"/>.
    /// </summary>
    public const string EndDateJsonPropertyName = "endDate";
    /// <summary>
    /// JSON property name for <see cref = "Identifier"/>.
    /// </summary>
    public static ReadOnlySpan<byte> IdentifierUtf8JsonPropertyName => "identifier"u8;

    /// <summary>
    /// JSON property name for <see cref = "Identifier"/>.
    /// </summary>
    public const string IdentifierJsonPropertyName = "identifier";
    /// <summary>
    /// JSON property name for <see cref = "IdentifierIsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> IdentifierIsReadOnlyUtf8JsonPropertyName => "identifierIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "IdentifierIsReadOnly"/>.
    /// </summary>
    public const string IdentifierIsReadOnlyJsonPropertyName = "identifierIsReadOnly";
    /// <summary>
    /// JSON property name for <see cref = "ProgramSystemCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ProgramSystemCodeUtf8JsonPropertyName => "programSystemCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "ProgramSystemCode"/>.
    /// </summary>
    public const string ProgramSystemCodeJsonPropertyName = "programSystemCode";
    /// <summary>
    /// JSON property name for <see cref = "StateAndCountryFISCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StateAndCountryFISCodeUtf8JsonPropertyName => "stateAndCountryFIPSCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "StateAndCountryFISCode"/>.
    /// </summary>
    public const string StateAndCountryFISCodeJsonPropertyName = "stateAndCountryFIPSCode";
    /// <summary>
    /// JSON property name for <see cref = "StateAndCountyFISCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StateAndCountyFISCodeUtf8JsonPropertyName => "stateAndCountyFIPSCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "StateAndCountyFISCode"/>.
    /// </summary>
    public const string StateAndCountyFISCodeJsonPropertyName = "stateAndCountyFIPSCode";
    /// <summary>
    /// JSON property name for <see cref = "TribalCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> TribalCodeUtf8JsonPropertyName => "tribalCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "TribalCode"/>.
    /// </summary>
    public const string TribalCodeJsonPropertyName = "tribalCode";
    /// <summary>
    /// Gets EffectiveDate.
    /// </summary>
    public Corvus.Json.JsonDate EffectiveDate
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EffectiveDateUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDate(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EffectiveDateJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDate>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EndDate.
    /// </summary>
    public Corvus.Json.JsonDate EndDate
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EndDateUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDate(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EndDateJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDate>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Identifier.
    /// </summary>
    public Caers.Api.SchemaEntities.FacilityIdentification.IdentifierEntity Identifier
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(IdentifierUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.FacilityIdentification.IdentifierEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(IdentifierJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.FacilityIdentification.IdentifierEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets IdentifierIsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString IdentifierIsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(IdentifierIsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(IdentifierIsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ProgramSystemCode.
    /// </summary>
    public Caers.Api.SchemaEntities.FacilityIdentification.ProgramSystemCodeEntity ProgramSystemCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ProgramSystemCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.FacilityIdentification.ProgramSystemCodeEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ProgramSystemCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.FacilityIdentification.ProgramSystemCodeEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StateAndCountryFISCode.
    /// </summary>
    public Corvus.Json.JsonString StateAndCountryFISCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StateAndCountryFISCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StateAndCountryFISCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StateAndCountyFISCode.
    /// </summary>
    public Corvus.Json.JsonString StateAndCountyFISCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StateAndCountyFISCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StateAndCountyFISCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets TribalCode.
    /// </summary>
    public Caers.Api.SchemaEntities.LookupValue TribalCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(TribalCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.LookupValue(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(TribalCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.LookupValue>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "FacilityIdentification"/>.
    /// </summary>
    public static FacilityIdentification Create(Caers.Api.SchemaEntities.FacilityIdentification.IdentifierEntity identifier, Corvus.Json.JsonDate? effectiveDate = null, Corvus.Json.JsonDate? endDate = null, Corvus.Json.JsonString? identifierIsReadOnly = null, Caers.Api.SchemaEntities.FacilityIdentification.ProgramSystemCodeEntity? programSystemCode = null, Corvus.Json.JsonString? stateAndCountryFICode = null, Corvus.Json.JsonString? stateAndCountyFICode = null, Caers.Api.SchemaEntities.LookupValue? tribalCode = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(IdentifierJsonPropertyName, identifier.AsAny);
        if (effectiveDate is Corvus.Json.JsonDate effectiveDate__)
        {
            builder.Add(EffectiveDateJsonPropertyName, effectiveDate__.AsAny);
        }

        if (endDate is Corvus.Json.JsonDate endDate__)
        {
            builder.Add(EndDateJsonPropertyName, endDate__.AsAny);
        }

        if (identifierIsReadOnly is Corvus.Json.JsonString identifierIsReadOnly__)
        {
            builder.Add(IdentifierIsReadOnlyJsonPropertyName, identifierIsReadOnly__.AsAny);
        }

        if (programSystemCode is Caers.Api.SchemaEntities.FacilityIdentification.ProgramSystemCodeEntity programSystemCode__)
        {
            builder.Add(ProgramSystemCodeJsonPropertyName, programSystemCode__.AsAny);
        }

        if (stateAndCountryFICode is Corvus.Json.JsonString stateAndCountryFICode__)
        {
            builder.Add(StateAndCountryFISCodeJsonPropertyName, stateAndCountryFICode__.AsAny);
        }

        if (stateAndCountyFICode is Corvus.Json.JsonString stateAndCountyFICode__)
        {
            builder.Add(StateAndCountyFISCodeJsonPropertyName, stateAndCountyFICode__.AsAny);
        }

        if (tribalCode is Caers.Api.SchemaEntities.LookupValue tribalCode__)
        {
            builder.Add(TribalCodeJsonPropertyName, tribalCode__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets effectiveDate.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilityIdentification WithEffectiveDate(in Corvus.Json.JsonDate value)
    {
        return this.SetProperty(EffectiveDateJsonPropertyName, value);
    }

    /// <summary>
    /// Sets endDate.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilityIdentification WithEndDate(in Corvus.Json.JsonDate value)
    {
        return this.SetProperty(EndDateJsonPropertyName, value);
    }

    /// <summary>
    /// Sets identifier.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilityIdentification WithIdentifier(in Caers.Api.SchemaEntities.FacilityIdentification.IdentifierEntity value)
    {
        return this.SetProperty(IdentifierJsonPropertyName, value);
    }

    /// <summary>
    /// Sets identifierIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilityIdentification WithIdentifierIsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(IdentifierIsReadOnlyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets programSystemCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilityIdentification WithProgramSystemCode(in Caers.Api.SchemaEntities.FacilityIdentification.ProgramSystemCodeEntity value)
    {
        return this.SetProperty(ProgramSystemCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets stateAndCountryFIPSCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilityIdentification WithStateAndCountryFISCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(StateAndCountryFISCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets stateAndCountyFIPSCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilityIdentification WithStateAndCountyFISCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(StateAndCountyFISCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets tribalCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilityIdentification WithTribalCode(in Caers.Api.SchemaEntities.LookupValue value)
    {
        return this.SetProperty(TribalCodeJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateIdentifier(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.FacilityIdentification.IdentifierEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateProgramSystemCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.FacilityIdentification.ProgramSystemCodeEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEffectiveDate(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDate>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEndDate(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDate>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateIdentifierIsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateTribalCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.LookupValue>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStateAndCountyFISCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStateAndCountryFISCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(IdentifierUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateIdentifier;
                return true;
            }
            else if (property.NameEquals(ProgramSystemCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateProgramSystemCode;
                return true;
            }
            else if (property.NameEquals(EffectiveDateUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEffectiveDate;
                return true;
            }
            else if (property.NameEquals(EndDateUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEndDate;
                return true;
            }
            else if (property.NameEquals(IdentifierIsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateIdentifierIsReadOnly;
                return true;
            }
            else if (property.NameEquals(TribalCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateTribalCode;
                return true;
            }
            else if (property.NameEquals(StateAndCountyFISCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStateAndCountyFISCode;
                return true;
            }
            else if (property.NameEquals(StateAndCountryFISCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStateAndCountryFISCode;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(IdentifierJsonPropertyName))
            {
                propertyValidator = __CorvusValidateIdentifier;
                return true;
            }
            else if (property.NameEquals(ProgramSystemCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateProgramSystemCode;
                return true;
            }
            else if (property.NameEquals(EffectiveDateJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEffectiveDate;
                return true;
            }
            else if (property.NameEquals(EndDateJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEndDate;
                return true;
            }
            else if (property.NameEquals(IdentifierIsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidateIdentifierIsReadOnly;
                return true;
            }
            else if (property.NameEquals(TribalCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateTribalCode;
                return true;
            }
            else if (property.NameEquals(StateAndCountyFISCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStateAndCountyFISCode;
                return true;
            }
            else if (property.NameEquals(StateAndCountryFISCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStateAndCountryFISCode;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}