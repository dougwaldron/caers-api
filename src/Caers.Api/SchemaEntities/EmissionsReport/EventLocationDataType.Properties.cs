//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api.SchemaEntities;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct EventLocationDataType
{
    /// <summary>
    /// JSON property name for <see cref = "EventEmissionsProcess"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EventEmissionsProcessUtf8JsonPropertyName => "eventEmissionsProcess"u8;

    /// <summary>
    /// JSON property name for <see cref = "EventEmissionsProcess"/>.
    /// </summary>
    public const string EventEmissionsProcessJsonPropertyName = "eventEmissionsProcess";
    /// <summary>
    /// JSON property name for <see cref = "EventGeographicCoordinates"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EventGeographicCoordinatesUtf8JsonPropertyName => "eventGeographicCoordinates"u8;

    /// <summary>
    /// JSON property name for <see cref = "EventGeographicCoordinates"/>.
    /// </summary>
    public const string EventGeographicCoordinatesJsonPropertyName = "eventGeographicCoordinates";
    /// <summary>
    /// JSON property name for <see cref = "StateAndCountryFISCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StateAndCountryFISCodeUtf8JsonPropertyName => "stateAndCountryFIPSCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "StateAndCountryFISCode"/>.
    /// </summary>
    public const string StateAndCountryFISCodeJsonPropertyName = "stateAndCountryFIPSCode";
    /// <summary>
    /// JSON property name for <see cref = "StateAndCountyFISCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StateAndCountyFISCodeUtf8JsonPropertyName => "stateAndCountyFIPSCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "StateAndCountyFISCode"/>.
    /// </summary>
    public const string StateAndCountyFISCodeJsonPropertyName = "stateAndCountyFIPSCode";
    /// <summary>
    /// JSON property name for <see cref = "TribalCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> TribalCodeUtf8JsonPropertyName => "tribalCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "TribalCode"/>.
    /// </summary>
    public const string TribalCodeJsonPropertyName = "tribalCode";
    /// <summary>
    /// Gets EventEmissionsProcess.
    /// </summary>
    public Caers.Api.SchemaEntities.EventLocationDataType.EventEmissionsProcessDataTypeArray EventEmissionsProcess
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EventEmissionsProcessUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.EventLocationDataType.EventEmissionsProcessDataTypeArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EventEmissionsProcessJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.EventLocationDataType.EventEmissionsProcessDataTypeArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EventGeographicCoordinates.
    /// </summary>
    public Caers.Api.SchemaEntities.GeographicCoordinatesDataType EventGeographicCoordinates
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EventGeographicCoordinatesUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.GeographicCoordinatesDataType(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EventGeographicCoordinatesJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.GeographicCoordinatesDataType>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StateAndCountryFISCode.
    /// </summary>
    public Corvus.Json.JsonString StateAndCountryFISCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StateAndCountryFISCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StateAndCountryFISCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StateAndCountyFISCode.
    /// </summary>
    public Corvus.Json.JsonString StateAndCountyFISCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StateAndCountyFISCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StateAndCountyFISCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets TribalCode.
    /// </summary>
    public Corvus.Json.JsonString TribalCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(TribalCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(TribalCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "EventLocationDataType"/>.
    /// </summary>
    public static EventLocationDataType Create(Caers.Api.SchemaEntities.EventLocationDataType.EventEmissionsProcessDataTypeArray eventEmissionsProcess, Caers.Api.SchemaEntities.GeographicCoordinatesDataType? eventGeographicCoordinates = null, Corvus.Json.JsonString? stateAndCountryFICode = null, Corvus.Json.JsonString? stateAndCountyFICode = null, Corvus.Json.JsonString? tribalCode = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(EventEmissionsProcessJsonPropertyName, eventEmissionsProcess.AsAny);
        if (eventGeographicCoordinates is Caers.Api.SchemaEntities.GeographicCoordinatesDataType eventGeographicCoordinates__)
        {
            builder.Add(EventGeographicCoordinatesJsonPropertyName, eventGeographicCoordinates__.AsAny);
        }

        if (stateAndCountryFICode is Corvus.Json.JsonString stateAndCountryFICode__)
        {
            builder.Add(StateAndCountryFISCodeJsonPropertyName, stateAndCountryFICode__.AsAny);
        }

        if (stateAndCountyFICode is Corvus.Json.JsonString stateAndCountyFICode__)
        {
            builder.Add(StateAndCountyFISCodeJsonPropertyName, stateAndCountyFICode__.AsAny);
        }

        if (tribalCode is Corvus.Json.JsonString tribalCode__)
        {
            builder.Add(TribalCodeJsonPropertyName, tribalCode__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets eventEmissionsProcess.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventLocationDataType WithEventEmissionsProcess(in Caers.Api.SchemaEntities.EventLocationDataType.EventEmissionsProcessDataTypeArray value)
    {
        return this.SetProperty(EventEmissionsProcessJsonPropertyName, value);
    }

    /// <summary>
    /// Sets eventGeographicCoordinates.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventLocationDataType WithEventGeographicCoordinates(in Caers.Api.SchemaEntities.GeographicCoordinatesDataType value)
    {
        return this.SetProperty(EventGeographicCoordinatesJsonPropertyName, value);
    }

    /// <summary>
    /// Sets stateAndCountryFIPSCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventLocationDataType WithStateAndCountryFISCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(StateAndCountryFISCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets stateAndCountyFIPSCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventLocationDataType WithStateAndCountyFISCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(StateAndCountyFISCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets tribalCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventLocationDataType WithTribalCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(TribalCodeJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateEventEmissionsProcess(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.EventLocationDataType.EventEmissionsProcessDataTypeArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStateAndCountyFISCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateTribalCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStateAndCountryFISCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEventGeographicCoordinates(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.GeographicCoordinatesDataType>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(EventEmissionsProcessUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventEmissionsProcess;
                return true;
            }
            else if (property.NameEquals(StateAndCountyFISCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStateAndCountyFISCode;
                return true;
            }
            else if (property.NameEquals(TribalCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateTribalCode;
                return true;
            }
            else if (property.NameEquals(StateAndCountryFISCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStateAndCountryFISCode;
                return true;
            }
            else if (property.NameEquals(EventGeographicCoordinatesUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventGeographicCoordinates;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(EventEmissionsProcessJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventEmissionsProcess;
                return true;
            }
            else if (property.NameEquals(StateAndCountyFISCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStateAndCountyFISCode;
                return true;
            }
            else if (property.NameEquals(TribalCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateTribalCode;
                return true;
            }
            else if (property.NameEquals(StateAndCountryFISCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStateAndCountryFISCode;
                return true;
            }
            else if (property.NameEquals(EventGeographicCoordinatesJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventGeographicCoordinates;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}