//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api.SchemaEntities;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct EventDataType
{
    /// <summary>
    /// JSON property name for <see cref = "ContainmentDate"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ContainmentDateUtf8JsonPropertyName => "containmentDate"u8;

    /// <summary>
    /// JSON property name for <see cref = "ContainmentDate"/>.
    /// </summary>
    public const string ContainmentDateJsonPropertyName = "containmentDate";
    /// <summary>
    /// JSON property name for <see cref = "EventClassificationCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EventClassificationCodeUtf8JsonPropertyName => "eventClassificationCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "EventClassificationCode"/>.
    /// </summary>
    public const string EventClassificationCodeJsonPropertyName = "eventClassificationCode";
    /// <summary>
    /// JSON property name for <see cref = "EventComment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EventCommentUtf8JsonPropertyName => "eventComment"u8;

    /// <summary>
    /// JSON property name for <see cref = "EventComment"/>.
    /// </summary>
    public const string EventCommentJsonPropertyName = "eventComment";
    /// <summary>
    /// JSON property name for <see cref = "EventIdentifier"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EventIdentifierUtf8JsonPropertyName => "eventIdentifier"u8;

    /// <summary>
    /// JSON property name for <see cref = "EventIdentifier"/>.
    /// </summary>
    public const string EventIdentifierJsonPropertyName = "eventIdentifier";
    /// <summary>
    /// JSON property name for <see cref = "EventName"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EventNameUtf8JsonPropertyName => "eventName"u8;

    /// <summary>
    /// JSON property name for <see cref = "EventName"/>.
    /// </summary>
    public const string EventNameJsonPropertyName = "eventName";
    /// <summary>
    /// JSON property name for <see cref = "EventReportingPeriod"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EventReportingPeriodUtf8JsonPropertyName => "eventReportingPeriod"u8;

    /// <summary>
    /// JSON property name for <see cref = "EventReportingPeriod"/>.
    /// </summary>
    public const string EventReportingPeriodJsonPropertyName = "eventReportingPeriod";
    /// <summary>
    /// JSON property name for <see cref = "EventSizeSourceCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EventSizeSourceCodeUtf8JsonPropertyName => "eventSizeSourceCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "EventSizeSourceCode"/>.
    /// </summary>
    public const string EventSizeSourceCodeJsonPropertyName = "eventSizeSourceCode";
    /// <summary>
    /// JSON property name for <see cref = "FuelConsumptionAndEmissionsModelCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FuelConsumptionAndEmissionsModelCodeUtf8JsonPropertyName => "fuelConsumptionAndEmissionsModelCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "FuelConsumptionAndEmissionsModelCode"/>.
    /// </summary>
    public const string FuelConsumptionAndEmissionsModelCodeJsonPropertyName = "fuelConsumptionAndEmissionsModelCode";
    /// <summary>
    /// JSON property name for <see cref = "FuelSelectionCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FuelSelectionCodeUtf8JsonPropertyName => "fuelSelectionCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "FuelSelectionCode"/>.
    /// </summary>
    public const string FuelSelectionCodeJsonPropertyName = "fuelSelectionCode";
    /// <summary>
    /// JSON property name for <see cref = "FuelTypeModelCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FuelTypeModelCodeUtf8JsonPropertyName => "fuelTypeModelCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "FuelTypeModelCode"/>.
    /// </summary>
    public const string FuelTypeModelCodeJsonPropertyName = "fuelTypeModelCode";
    /// <summary>
    /// JSON property name for <see cref = "GroundBasedDataSourceCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> GroundBasedDataSourceCodeUtf8JsonPropertyName => "groundBasedDataSourceCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "GroundBasedDataSourceCode"/>.
    /// </summary>
    public const string GroundBasedDataSourceCodeJsonPropertyName = "groundBasedDataSourceCode";
    /// <summary>
    /// JSON property name for <see cref = "IgnitionLocationCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> IgnitionLocationCodeUtf8JsonPropertyName => "ignitionLocationCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "IgnitionLocationCode"/>.
    /// </summary>
    public const string IgnitionLocationCodeJsonPropertyName = "ignitionLocationCode";
    /// <summary>
    /// JSON property name for <see cref = "IgnitionMethodCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> IgnitionMethodCodeUtf8JsonPropertyName => "ignitionMethodCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "IgnitionMethodCode"/>.
    /// </summary>
    public const string IgnitionMethodCodeJsonPropertyName = "ignitionMethodCode";
    /// <summary>
    /// JSON property name for <see cref = "IgnitionOrientationCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> IgnitionOrientationCodeUtf8JsonPropertyName => "ignitionOrientationCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "IgnitionOrientationCode"/>.
    /// </summary>
    public const string IgnitionOrientationCodeJsonPropertyName = "ignitionOrientationCode";
    /// <summary>
    /// JSON property name for <see cref = "LandManager"/>.
    /// </summary>
    public static ReadOnlySpan<byte> LandManagerUtf8JsonPropertyName => "landManager"u8;

    /// <summary>
    /// JSON property name for <see cref = "LandManager"/>.
    /// </summary>
    public const string LandManagerJsonPropertyName = "landManager";
    /// <summary>
    /// JSON property name for <see cref = "LocationDescription"/>.
    /// </summary>
    public static ReadOnlySpan<byte> LocationDescriptionUtf8JsonPropertyName => "locationDescription"u8;

    /// <summary>
    /// JSON property name for <see cref = "LocationDescription"/>.
    /// </summary>
    public const string LocationDescriptionJsonPropertyName = "locationDescription";
    /// <summary>
    /// JSON property name for <see cref = "ProgramSystemCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ProgramSystemCodeUtf8JsonPropertyName => "programSystemCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "ProgramSystemCode"/>.
    /// </summary>
    public const string ProgramSystemCodeJsonPropertyName = "programSystemCode";
    /// <summary>
    /// JSON property name for <see cref = "RecurrenceIndicatorCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> RecurrenceIndicatorCodeUtf8JsonPropertyName => "recurrenceIndicatorCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "RecurrenceIndicatorCode"/>.
    /// </summary>
    public const string RecurrenceIndicatorCodeJsonPropertyName = "recurrenceIndicatorCode";
    /// <summary>
    /// JSON property name for <see cref = "RecurrenceYear"/>.
    /// </summary>
    public static ReadOnlySpan<byte> RecurrenceYearUtf8JsonPropertyName => "recurrenceYear"u8;

    /// <summary>
    /// JSON property name for <see cref = "RecurrenceYear"/>.
    /// </summary>
    public const string RecurrenceYearJsonPropertyName = "recurrenceYear";
    /// <summary>
    /// JSON property name for <see cref = "RemoteSensingDataSourceCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> RemoteSensingDataSourceCodeUtf8JsonPropertyName => "remoteSensingDataSourceCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "RemoteSensingDataSourceCode"/>.
    /// </summary>
    public const string RemoteSensingDataSourceCodeJsonPropertyName = "remoteSensingDataSourceCode";
    /// <summary>
    /// Gets ContainmentDate.
    /// </summary>
    public Corvus.Json.JsonDateTime ContainmentDate
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ContainmentDateUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDateTime(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ContainmentDateJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDateTime>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EventClassificationCode.
    /// </summary>
    public Corvus.Json.JsonString EventClassificationCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EventClassificationCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EventClassificationCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EventComment.
    /// </summary>
    public Corvus.Json.JsonString EventComment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EventCommentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EventCommentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EventIdentifier.
    /// </summary>
    public Corvus.Json.JsonString EventIdentifier
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EventIdentifierUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EventIdentifierJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EventName.
    /// </summary>
    public Corvus.Json.JsonString EventName
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EventNameUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EventNameJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EventReportingPeriod.
    /// </summary>
    public Caers.Api.SchemaEntities.EventDataType.EventReportingPeriodDataTypeArray EventReportingPeriod
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EventReportingPeriodUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.EventDataType.EventReportingPeriodDataTypeArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EventReportingPeriodJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.EventDataType.EventReportingPeriodDataTypeArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EventSizeSourceCode.
    /// </summary>
    public Corvus.Json.JsonString EventSizeSourceCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EventSizeSourceCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EventSizeSourceCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FuelConsumptionAndEmissionsModelCode.
    /// </summary>
    public Corvus.Json.JsonString FuelConsumptionAndEmissionsModelCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FuelConsumptionAndEmissionsModelCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FuelConsumptionAndEmissionsModelCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FuelSelectionCode.
    /// </summary>
    public Corvus.Json.JsonString FuelSelectionCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FuelSelectionCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FuelSelectionCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FuelTypeModelCode.
    /// </summary>
    public Corvus.Json.JsonString FuelTypeModelCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FuelTypeModelCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FuelTypeModelCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets GroundBasedDataSourceCode.
    /// </summary>
    public Corvus.Json.JsonString GroundBasedDataSourceCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(GroundBasedDataSourceCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(GroundBasedDataSourceCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets IgnitionLocationCode.
    /// </summary>
    public Corvus.Json.JsonString IgnitionLocationCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(IgnitionLocationCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(IgnitionLocationCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets IgnitionMethodCode.
    /// </summary>
    public Corvus.Json.JsonString IgnitionMethodCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(IgnitionMethodCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(IgnitionMethodCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets IgnitionOrientationCode.
    /// </summary>
    public Corvus.Json.JsonString IgnitionOrientationCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(IgnitionOrientationCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(IgnitionOrientationCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets LandManager.
    /// </summary>
    public Corvus.Json.JsonString LandManager
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(LandManagerUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(LandManagerJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets LocationDescription.
    /// </summary>
    public Corvus.Json.JsonString LocationDescription
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(LocationDescriptionUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(LocationDescriptionJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ProgramSystemCode.
    /// </summary>
    public Corvus.Json.JsonString ProgramSystemCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ProgramSystemCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ProgramSystemCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets RecurrenceIndicatorCode.
    /// </summary>
    public Corvus.Json.JsonString RecurrenceIndicatorCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(RecurrenceIndicatorCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(RecurrenceIndicatorCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets RecurrenceYear.
    /// </summary>
    public Corvus.Json.JsonDateTime RecurrenceYear
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(RecurrenceYearUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDateTime(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(RecurrenceYearJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDateTime>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets RemoteSensingDataSourceCode.
    /// </summary>
    public Corvus.Json.JsonString RemoteSensingDataSourceCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(RemoteSensingDataSourceCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(RemoteSensingDataSourceCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "EventDataType"/>.
    /// </summary>
    public static EventDataType Create(Corvus.Json.JsonString eventIdentifier, Corvus.Json.JsonString programSystemCode, Corvus.Json.JsonDateTime? containmentDate = null, Corvus.Json.JsonString? eventClassificationCode = null, Corvus.Json.JsonString? eventComment = null, Corvus.Json.JsonString? eventName = null, Caers.Api.SchemaEntities.EventDataType.EventReportingPeriodDataTypeArray? eventReportingPeriod = null, Corvus.Json.JsonString? eventSizeSourceCode = null, Corvus.Json.JsonString? fuelConsumptionAndEmissionsModelCode = null, Corvus.Json.JsonString? fuelSelectionCode = null, Corvus.Json.JsonString? fuelTypeModelCode = null, Corvus.Json.JsonString? groundBasedDataSourceCode = null, Corvus.Json.JsonString? ignitionLocationCode = null, Corvus.Json.JsonString? ignitionMethodCode = null, Corvus.Json.JsonString? ignitionOrientationCode = null, Corvus.Json.JsonString? landManager = null, Corvus.Json.JsonString? locationDescription = null, Corvus.Json.JsonString? recurrenceIndicatorCode = null, Corvus.Json.JsonDateTime? recurrenceYear = null, Corvus.Json.JsonString? remoteSensingDataSourceCode = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(EventIdentifierJsonPropertyName, eventIdentifier.AsAny);
        builder.Add(ProgramSystemCodeJsonPropertyName, programSystemCode.AsAny);
        if (containmentDate is Corvus.Json.JsonDateTime containmentDate__)
        {
            builder.Add(ContainmentDateJsonPropertyName, containmentDate__.AsAny);
        }

        if (eventClassificationCode is Corvus.Json.JsonString eventClassificationCode__)
        {
            builder.Add(EventClassificationCodeJsonPropertyName, eventClassificationCode__.AsAny);
        }

        if (eventComment is Corvus.Json.JsonString eventComment__)
        {
            builder.Add(EventCommentJsonPropertyName, eventComment__.AsAny);
        }

        if (eventName is Corvus.Json.JsonString eventName__)
        {
            builder.Add(EventNameJsonPropertyName, eventName__.AsAny);
        }

        if (eventReportingPeriod is Caers.Api.SchemaEntities.EventDataType.EventReportingPeriodDataTypeArray eventReportingPeriod__)
        {
            builder.Add(EventReportingPeriodJsonPropertyName, eventReportingPeriod__.AsAny);
        }

        if (eventSizeSourceCode is Corvus.Json.JsonString eventSizeSourceCode__)
        {
            builder.Add(EventSizeSourceCodeJsonPropertyName, eventSizeSourceCode__.AsAny);
        }

        if (fuelConsumptionAndEmissionsModelCode is Corvus.Json.JsonString fuelConsumptionAndEmissionsModelCode__)
        {
            builder.Add(FuelConsumptionAndEmissionsModelCodeJsonPropertyName, fuelConsumptionAndEmissionsModelCode__.AsAny);
        }

        if (fuelSelectionCode is Corvus.Json.JsonString fuelSelectionCode__)
        {
            builder.Add(FuelSelectionCodeJsonPropertyName, fuelSelectionCode__.AsAny);
        }

        if (fuelTypeModelCode is Corvus.Json.JsonString fuelTypeModelCode__)
        {
            builder.Add(FuelTypeModelCodeJsonPropertyName, fuelTypeModelCode__.AsAny);
        }

        if (groundBasedDataSourceCode is Corvus.Json.JsonString groundBasedDataSourceCode__)
        {
            builder.Add(GroundBasedDataSourceCodeJsonPropertyName, groundBasedDataSourceCode__.AsAny);
        }

        if (ignitionLocationCode is Corvus.Json.JsonString ignitionLocationCode__)
        {
            builder.Add(IgnitionLocationCodeJsonPropertyName, ignitionLocationCode__.AsAny);
        }

        if (ignitionMethodCode is Corvus.Json.JsonString ignitionMethodCode__)
        {
            builder.Add(IgnitionMethodCodeJsonPropertyName, ignitionMethodCode__.AsAny);
        }

        if (ignitionOrientationCode is Corvus.Json.JsonString ignitionOrientationCode__)
        {
            builder.Add(IgnitionOrientationCodeJsonPropertyName, ignitionOrientationCode__.AsAny);
        }

        if (landManager is Corvus.Json.JsonString landManager__)
        {
            builder.Add(LandManagerJsonPropertyName, landManager__.AsAny);
        }

        if (locationDescription is Corvus.Json.JsonString locationDescription__)
        {
            builder.Add(LocationDescriptionJsonPropertyName, locationDescription__.AsAny);
        }

        if (recurrenceIndicatorCode is Corvus.Json.JsonString recurrenceIndicatorCode__)
        {
            builder.Add(RecurrenceIndicatorCodeJsonPropertyName, recurrenceIndicatorCode__.AsAny);
        }

        if (recurrenceYear is Corvus.Json.JsonDateTime recurrenceYear__)
        {
            builder.Add(RecurrenceYearJsonPropertyName, recurrenceYear__.AsAny);
        }

        if (remoteSensingDataSourceCode is Corvus.Json.JsonString remoteSensingDataSourceCode__)
        {
            builder.Add(RemoteSensingDataSourceCodeJsonPropertyName, remoteSensingDataSourceCode__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets containmentDate.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventDataType WithContainmentDate(in Corvus.Json.JsonDateTime value)
    {
        return this.SetProperty(ContainmentDateJsonPropertyName, value);
    }

    /// <summary>
    /// Sets eventClassificationCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventDataType WithEventClassificationCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EventClassificationCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets eventComment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventDataType WithEventComment(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EventCommentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets eventIdentifier.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventDataType WithEventIdentifier(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EventIdentifierJsonPropertyName, value);
    }

    /// <summary>
    /// Sets eventName.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventDataType WithEventName(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EventNameJsonPropertyName, value);
    }

    /// <summary>
    /// Sets eventReportingPeriod.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventDataType WithEventReportingPeriod(in Caers.Api.SchemaEntities.EventDataType.EventReportingPeriodDataTypeArray value)
    {
        return this.SetProperty(EventReportingPeriodJsonPropertyName, value);
    }

    /// <summary>
    /// Sets eventSizeSourceCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventDataType WithEventSizeSourceCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EventSizeSourceCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets fuelConsumptionAndEmissionsModelCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventDataType WithFuelConsumptionAndEmissionsModelCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(FuelConsumptionAndEmissionsModelCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets fuelSelectionCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventDataType WithFuelSelectionCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(FuelSelectionCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets fuelTypeModelCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventDataType WithFuelTypeModelCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(FuelTypeModelCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets groundBasedDataSourceCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventDataType WithGroundBasedDataSourceCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(GroundBasedDataSourceCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets ignitionLocationCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventDataType WithIgnitionLocationCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(IgnitionLocationCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets ignitionMethodCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventDataType WithIgnitionMethodCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(IgnitionMethodCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets ignitionOrientationCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventDataType WithIgnitionOrientationCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(IgnitionOrientationCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets landManager.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventDataType WithLandManager(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(LandManagerJsonPropertyName, value);
    }

    /// <summary>
    /// Sets locationDescription.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventDataType WithLocationDescription(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(LocationDescriptionJsonPropertyName, value);
    }

    /// <summary>
    /// Sets programSystemCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventDataType WithProgramSystemCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(ProgramSystemCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets recurrenceIndicatorCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventDataType WithRecurrenceIndicatorCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(RecurrenceIndicatorCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets recurrenceYear.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventDataType WithRecurrenceYear(in Corvus.Json.JsonDateTime value)
    {
        return this.SetProperty(RecurrenceYearJsonPropertyName, value);
    }

    /// <summary>
    /// Sets remoteSensingDataSourceCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EventDataType WithRemoteSensingDataSourceCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(RemoteSensingDataSourceCodeJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateEventIdentifier(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateProgramSystemCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEventName(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateLandManager(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateLocationDescription(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEventClassificationCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEventSizeSourceCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateContainmentDate(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDateTime>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateRecurrenceIndicatorCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateRecurrenceYear(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDateTime>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateGroundBasedDataSourceCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateRemoteSensingDataSourceCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFuelConsumptionAndEmissionsModelCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFuelTypeModelCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFuelSelectionCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateIgnitionMethodCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateIgnitionLocationCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateIgnitionOrientationCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEventComment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEventReportingPeriod(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.EventDataType.EventReportingPeriodDataTypeArray>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(EventIdentifierUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventIdentifier;
                return true;
            }
            else if (property.NameEquals(ProgramSystemCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateProgramSystemCode;
                return true;
            }
            else if (property.NameEquals(EventNameUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventName;
                return true;
            }
            else if (property.NameEquals(LandManagerUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateLandManager;
                return true;
            }
            else if (property.NameEquals(LocationDescriptionUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateLocationDescription;
                return true;
            }
            else if (property.NameEquals(EventClassificationCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventClassificationCode;
                return true;
            }
            else if (property.NameEquals(EventSizeSourceCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventSizeSourceCode;
                return true;
            }
            else if (property.NameEquals(ContainmentDateUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateContainmentDate;
                return true;
            }
            else if (property.NameEquals(RecurrenceIndicatorCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateRecurrenceIndicatorCode;
                return true;
            }
            else if (property.NameEquals(RecurrenceYearUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateRecurrenceYear;
                return true;
            }
            else if (property.NameEquals(GroundBasedDataSourceCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateGroundBasedDataSourceCode;
                return true;
            }
            else if (property.NameEquals(RemoteSensingDataSourceCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateRemoteSensingDataSourceCode;
                return true;
            }
            else if (property.NameEquals(FuelConsumptionAndEmissionsModelCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFuelConsumptionAndEmissionsModelCode;
                return true;
            }
            else if (property.NameEquals(FuelTypeModelCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFuelTypeModelCode;
                return true;
            }
            else if (property.NameEquals(FuelSelectionCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFuelSelectionCode;
                return true;
            }
            else if (property.NameEquals(IgnitionMethodCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateIgnitionMethodCode;
                return true;
            }
            else if (property.NameEquals(IgnitionLocationCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateIgnitionLocationCode;
                return true;
            }
            else if (property.NameEquals(IgnitionOrientationCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateIgnitionOrientationCode;
                return true;
            }
            else if (property.NameEquals(EventCommentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventComment;
                return true;
            }
            else if (property.NameEquals(EventReportingPeriodUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventReportingPeriod;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(EventIdentifierJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventIdentifier;
                return true;
            }
            else if (property.NameEquals(ProgramSystemCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateProgramSystemCode;
                return true;
            }
            else if (property.NameEquals(EventNameJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventName;
                return true;
            }
            else if (property.NameEquals(LandManagerJsonPropertyName))
            {
                propertyValidator = __CorvusValidateLandManager;
                return true;
            }
            else if (property.NameEquals(LocationDescriptionJsonPropertyName))
            {
                propertyValidator = __CorvusValidateLocationDescription;
                return true;
            }
            else if (property.NameEquals(EventClassificationCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventClassificationCode;
                return true;
            }
            else if (property.NameEquals(EventSizeSourceCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventSizeSourceCode;
                return true;
            }
            else if (property.NameEquals(ContainmentDateJsonPropertyName))
            {
                propertyValidator = __CorvusValidateContainmentDate;
                return true;
            }
            else if (property.NameEquals(RecurrenceIndicatorCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateRecurrenceIndicatorCode;
                return true;
            }
            else if (property.NameEquals(RecurrenceYearJsonPropertyName))
            {
                propertyValidator = __CorvusValidateRecurrenceYear;
                return true;
            }
            else if (property.NameEquals(GroundBasedDataSourceCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateGroundBasedDataSourceCode;
                return true;
            }
            else if (property.NameEquals(RemoteSensingDataSourceCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateRemoteSensingDataSourceCode;
                return true;
            }
            else if (property.NameEquals(FuelConsumptionAndEmissionsModelCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFuelConsumptionAndEmissionsModelCode;
                return true;
            }
            else if (property.NameEquals(FuelTypeModelCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFuelTypeModelCode;
                return true;
            }
            else if (property.NameEquals(FuelSelectionCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFuelSelectionCode;
                return true;
            }
            else if (property.NameEquals(IgnitionMethodCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateIgnitionMethodCode;
                return true;
            }
            else if (property.NameEquals(IgnitionLocationCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateIgnitionLocationCode;
                return true;
            }
            else if (property.NameEquals(IgnitionOrientationCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateIgnitionOrientationCode;
                return true;
            }
            else if (property.NameEquals(EventCommentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventComment;
                return true;
            }
            else if (property.NameEquals(EventReportingPeriodJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEventReportingPeriod;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}