//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api.SchemaEntities;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct Control
{
    /// <summary>
    /// JSON property name for <see cref = "Comment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CommentUtf8JsonPropertyName => "comment"u8;

    /// <summary>
    /// JSON property name for <see cref = "Comment"/>.
    /// </summary>
    public const string CommentJsonPropertyName = "comment";
    /// <summary>
    /// JSON property name for <see cref = "ControlIsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ControlIsReadOnlyUtf8JsonPropertyName => "controlIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "ControlIsReadOnly"/>.
    /// </summary>
    public const string ControlIsReadOnlyJsonPropertyName = "controlIsReadOnly";
    /// <summary>
    /// JSON property name for <see cref = "ControlManufactureMake"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ControlManufactureMakeUtf8JsonPropertyName => "controlManufactureMake"u8;

    /// <summary>
    /// JSON property name for <see cref = "ControlManufactureMake"/>.
    /// </summary>
    public const string ControlManufactureMakeJsonPropertyName = "controlManufactureMake";
    /// <summary>
    /// JSON property name for <see cref = "ControlManufactureModel"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ControlManufactureModelUtf8JsonPropertyName => "controlManufactureModel"u8;

    /// <summary>
    /// JSON property name for <see cref = "ControlManufactureModel"/>.
    /// </summary>
    public const string ControlManufactureModelJsonPropertyName = "controlManufactureModel";
    /// <summary>
    /// JSON property name for <see cref = "ControlMeasureCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ControlMeasureCodeUtf8JsonPropertyName => "controlMeasureCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "ControlMeasureCode"/>.
    /// </summary>
    public const string ControlMeasureCodeJsonPropertyName = "controlMeasureCode";
    /// <summary>
    /// JSON property name for <see cref = "ControlPollutants"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ControlPollutantsUtf8JsonPropertyName => "controlPollutants"u8;

    /// <summary>
    /// JSON property name for <see cref = "ControlPollutants"/>.
    /// </summary>
    public const string ControlPollutantsJsonPropertyName = "controlPollutants";
    /// <summary>
    /// JSON property name for <see cref = "Description"/>.
    /// </summary>
    public static ReadOnlySpan<byte> DescriptionUtf8JsonPropertyName => "description"u8;

    /// <summary>
    /// JSON property name for <see cref = "Description"/>.
    /// </summary>
    public const string DescriptionJsonPropertyName = "description";
    /// <summary>
    /// JSON property name for <see cref = "EndDate"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EndDateUtf8JsonPropertyName => "endDate"u8;

    /// <summary>
    /// JSON property name for <see cref = "EndDate"/>.
    /// </summary>
    public const string EndDateJsonPropertyName = "endDate";
    /// <summary>
    /// JSON property name for <see cref = "Identification"/>.
    /// </summary>
    public static ReadOnlySpan<byte> IdentificationUtf8JsonPropertyName => "identification"u8;

    /// <summary>
    /// JSON property name for <see cref = "Identification"/>.
    /// </summary>
    public const string IdentificationJsonPropertyName = "identification";
    /// <summary>
    /// JSON property name for <see cref = "MainIdentification"/>.
    /// </summary>
    public static ReadOnlySpan<byte> MainIdentificationUtf8JsonPropertyName => "mainIdentification"u8;

    /// <summary>
    /// JSON property name for <see cref = "MainIdentification"/>.
    /// </summary>
    public const string MainIdentificationJsonPropertyName = "mainIdentification";
    /// <summary>
    /// JSON property name for <see cref = "NumberOperatingMonths"/>.
    /// </summary>
    public static ReadOnlySpan<byte> NumberOperatingMonthsUtf8JsonPropertyName => "numberOperatingMonths"u8;

    /// <summary>
    /// JSON property name for <see cref = "NumberOperatingMonths"/>.
    /// </summary>
    public const string NumberOperatingMonthsJsonPropertyName = "numberOperatingMonths";
    /// <summary>
    /// JSON property name for <see cref = "PercentControlEffectiveness"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PercentControlEffectivenessUtf8JsonPropertyName => "percentControlEffectiveness"u8;

    /// <summary>
    /// JSON property name for <see cref = "PercentControlEffectiveness"/>.
    /// </summary>
    public const string PercentControlEffectivenessJsonPropertyName = "percentControlEffectiveness";
    /// <summary>
    /// JSON property name for <see cref = "StartDate"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StartDateUtf8JsonPropertyName => "startDate"u8;

    /// <summary>
    /// JSON property name for <see cref = "StartDate"/>.
    /// </summary>
    public const string StartDateJsonPropertyName = "startDate";
    /// <summary>
    /// JSON property name for <see cref = "StatusCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StatusCodeUtf8JsonPropertyName => "statusCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "StatusCode"/>.
    /// </summary>
    public const string StatusCodeJsonPropertyName = "statusCode";
    /// <summary>
    /// JSON property name for <see cref = "StatusCodeYear"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StatusCodeYearUtf8JsonPropertyName => "statusCodeYear"u8;

    /// <summary>
    /// JSON property name for <see cref = "StatusCodeYear"/>.
    /// </summary>
    public const string StatusCodeYearJsonPropertyName = "statusCodeYear";
    /// <summary>
    /// JSON property name for <see cref = "UpgradeDate"/>.
    /// </summary>
    public static ReadOnlySpan<byte> UpgradeDateUtf8JsonPropertyName => "upgradeDate"u8;

    /// <summary>
    /// JSON property name for <see cref = "UpgradeDate"/>.
    /// </summary>
    public const string UpgradeDateJsonPropertyName = "upgradeDate";
    /// <summary>
    /// JSON property name for <see cref = "UpgradeDescription"/>.
    /// </summary>
    public static ReadOnlySpan<byte> UpgradeDescriptionUtf8JsonPropertyName => "upgradeDescription"u8;

    /// <summary>
    /// JSON property name for <see cref = "UpgradeDescription"/>.
    /// </summary>
    public const string UpgradeDescriptionJsonPropertyName = "upgradeDescription";
    /// <summary>
    /// Gets Comment.
    /// </summary>
    public Caers.Api.SchemaEntities.Control.CommentEntity Comment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CommentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Control.CommentEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CommentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Control.CommentEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ControlIsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString ControlIsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ControlIsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ControlIsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ControlManufactureMake.
    /// </summary>
    public Corvus.Json.JsonString ControlManufactureMake
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ControlManufactureMakeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ControlManufactureMakeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ControlManufactureModel.
    /// </summary>
    public Corvus.Json.JsonString ControlManufactureModel
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ControlManufactureModelUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ControlManufactureModelJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ControlMeasureCode.
    /// </summary>
    public Caers.Api.SchemaEntities.LookupValue ControlMeasureCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ControlMeasureCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.LookupValue(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ControlMeasureCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.LookupValue>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ControlPollutants.
    /// </summary>
    public Caers.Api.SchemaEntities.Control.ControlPollutantArray ControlPollutants
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ControlPollutantsUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Control.ControlPollutantArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ControlPollutantsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Control.ControlPollutantArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Description.
    /// </summary>
    public Caers.Api.SchemaEntities.Control.DescriptionEntity Description
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Control.DescriptionEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Control.DescriptionEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EndDate.
    /// </summary>
    public Corvus.Json.JsonDate EndDate
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EndDateUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDate(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EndDateJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDate>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Identification.
    /// </summary>
    public Caers.Api.SchemaEntities.Control.IdentificationIdentificationArray Identification
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(IdentificationUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Control.IdentificationIdentificationArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(IdentificationJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Control.IdentificationIdentificationArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MainIdentification.
    /// </summary>
    public Caers.Api.SchemaEntities.Identification MainIdentification
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MainIdentificationUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Identification(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MainIdentificationJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Identification>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets NumberOperatingMonths.
    /// </summary>
    public Caers.Api.SchemaEntities.Control.NumberOperatingMonthsEntity NumberOperatingMonths
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(NumberOperatingMonthsUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Control.NumberOperatingMonthsEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(NumberOperatingMonthsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Control.NumberOperatingMonthsEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PercentControlEffectiveness.
    /// </summary>
    public Caers.Api.SchemaEntities.Control.PercentControlEffectivenessEntity PercentControlEffectiveness
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PercentControlEffectivenessUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Control.PercentControlEffectivenessEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PercentControlEffectivenessJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Control.PercentControlEffectivenessEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StartDate.
    /// </summary>
    public Corvus.Json.JsonDate StartDate
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StartDateUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDate(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StartDateJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDate>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StatusCode.
    /// </summary>
    public Caers.Api.SchemaEntities.LookupValue StatusCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StatusCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.LookupValue(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StatusCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.LookupValue>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StatusCodeYear.
    /// </summary>
    public Corvus.Json.JsonInteger StatusCodeYear
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StatusCodeYearUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StatusCodeYearJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets UpgradeDate.
    /// </summary>
    public Corvus.Json.JsonDate UpgradeDate
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(UpgradeDateUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDate(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(UpgradeDateJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDate>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets UpgradeDescription.
    /// </summary>
    public Caers.Api.SchemaEntities.Control.UpgradeDescriptionEntity UpgradeDescription
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(UpgradeDescriptionUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Control.UpgradeDescriptionEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(UpgradeDescriptionJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Control.UpgradeDescriptionEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "Control"/>.
    /// </summary>
    public static Control Create(Caers.Api.SchemaEntities.LookupValue controlMeasureCode, Caers.Api.SchemaEntities.Control.CommentEntity? comment = null, Corvus.Json.JsonString? controlIsReadOnly = null, Corvus.Json.JsonString? controlManufactureMake = null, Corvus.Json.JsonString? controlManufactureModel = null, Caers.Api.SchemaEntities.Control.ControlPollutantArray? controlPollutants = null, Caers.Api.SchemaEntities.Control.DescriptionEntity? description = null, Corvus.Json.JsonDate? endDate = null, Caers.Api.SchemaEntities.Control.IdentificationIdentificationArray? identification = null, Caers.Api.SchemaEntities.Identification? mainIdentification = null, Caers.Api.SchemaEntities.Control.NumberOperatingMonthsEntity? numberOperatingMonths = null, Caers.Api.SchemaEntities.Control.PercentControlEffectivenessEntity? percentControlEffectiveness = null, Corvus.Json.JsonDate? startDate = null, Caers.Api.SchemaEntities.LookupValue? statusCode = null, Corvus.Json.JsonInteger? statusCodeYear = null, Corvus.Json.JsonDate? upgradeDate = null, Caers.Api.SchemaEntities.Control.UpgradeDescriptionEntity? upgradeDescription = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(ControlMeasureCodeJsonPropertyName, controlMeasureCode.AsAny);
        if (comment is Caers.Api.SchemaEntities.Control.CommentEntity comment__)
        {
            builder.Add(CommentJsonPropertyName, comment__.AsAny);
        }

        if (controlIsReadOnly is Corvus.Json.JsonString controlIsReadOnly__)
        {
            builder.Add(ControlIsReadOnlyJsonPropertyName, controlIsReadOnly__.AsAny);
        }

        if (controlManufactureMake is Corvus.Json.JsonString controlManufactureMake__)
        {
            builder.Add(ControlManufactureMakeJsonPropertyName, controlManufactureMake__.AsAny);
        }

        if (controlManufactureModel is Corvus.Json.JsonString controlManufactureModel__)
        {
            builder.Add(ControlManufactureModelJsonPropertyName, controlManufactureModel__.AsAny);
        }

        if (controlPollutants is Caers.Api.SchemaEntities.Control.ControlPollutantArray controlPollutants__)
        {
            builder.Add(ControlPollutantsJsonPropertyName, controlPollutants__.AsAny);
        }

        if (description is Caers.Api.SchemaEntities.Control.DescriptionEntity description__)
        {
            builder.Add(DescriptionJsonPropertyName, description__.AsAny);
        }

        if (endDate is Corvus.Json.JsonDate endDate__)
        {
            builder.Add(EndDateJsonPropertyName, endDate__.AsAny);
        }

        if (identification is Caers.Api.SchemaEntities.Control.IdentificationIdentificationArray identification__)
        {
            builder.Add(IdentificationJsonPropertyName, identification__.AsAny);
        }

        if (mainIdentification is Caers.Api.SchemaEntities.Identification mainIdentification__)
        {
            builder.Add(MainIdentificationJsonPropertyName, mainIdentification__.AsAny);
        }

        if (numberOperatingMonths is Caers.Api.SchemaEntities.Control.NumberOperatingMonthsEntity numberOperatingMonths__)
        {
            builder.Add(NumberOperatingMonthsJsonPropertyName, numberOperatingMonths__.AsAny);
        }

        if (percentControlEffectiveness is Caers.Api.SchemaEntities.Control.PercentControlEffectivenessEntity percentControlEffectiveness__)
        {
            builder.Add(PercentControlEffectivenessJsonPropertyName, percentControlEffectiveness__.AsAny);
        }

        if (startDate is Corvus.Json.JsonDate startDate__)
        {
            builder.Add(StartDateJsonPropertyName, startDate__.AsAny);
        }

        if (statusCode is Caers.Api.SchemaEntities.LookupValue statusCode__)
        {
            builder.Add(StatusCodeJsonPropertyName, statusCode__.AsAny);
        }

        if (statusCodeYear is Corvus.Json.JsonInteger statusCodeYear__)
        {
            builder.Add(StatusCodeYearJsonPropertyName, statusCodeYear__.AsAny);
        }

        if (upgradeDate is Corvus.Json.JsonDate upgradeDate__)
        {
            builder.Add(UpgradeDateJsonPropertyName, upgradeDate__.AsAny);
        }

        if (upgradeDescription is Caers.Api.SchemaEntities.Control.UpgradeDescriptionEntity upgradeDescription__)
        {
            builder.Add(UpgradeDescriptionJsonPropertyName, upgradeDescription__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets comment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Control WithComment(in Caers.Api.SchemaEntities.Control.CommentEntity value)
    {
        return this.SetProperty(CommentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets controlIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Control WithControlIsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(ControlIsReadOnlyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets controlManufactureMake.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Control WithControlManufactureMake(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(ControlManufactureMakeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets controlManufactureModel.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Control WithControlManufactureModel(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(ControlManufactureModelJsonPropertyName, value);
    }

    /// <summary>
    /// Sets controlMeasureCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Control WithControlMeasureCode(in Caers.Api.SchemaEntities.LookupValue value)
    {
        return this.SetProperty(ControlMeasureCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets controlPollutants.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Control WithControlPollutants(in Caers.Api.SchemaEntities.Control.ControlPollutantArray value)
    {
        return this.SetProperty(ControlPollutantsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets description.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Control WithDescription(in Caers.Api.SchemaEntities.Control.DescriptionEntity value)
    {
        return this.SetProperty(DescriptionJsonPropertyName, value);
    }

    /// <summary>
    /// Sets endDate.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Control WithEndDate(in Corvus.Json.JsonDate value)
    {
        return this.SetProperty(EndDateJsonPropertyName, value);
    }

    /// <summary>
    /// Sets identification.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Control WithIdentification(in Caers.Api.SchemaEntities.Control.IdentificationIdentificationArray value)
    {
        return this.SetProperty(IdentificationJsonPropertyName, value);
    }

    /// <summary>
    /// Sets mainIdentification.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Control WithMainIdentification(in Caers.Api.SchemaEntities.Identification value)
    {
        return this.SetProperty(MainIdentificationJsonPropertyName, value);
    }

    /// <summary>
    /// Sets numberOperatingMonths.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Control WithNumberOperatingMonths(in Caers.Api.SchemaEntities.Control.NumberOperatingMonthsEntity value)
    {
        return this.SetProperty(NumberOperatingMonthsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets percentControlEffectiveness.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Control WithPercentControlEffectiveness(in Caers.Api.SchemaEntities.Control.PercentControlEffectivenessEntity value)
    {
        return this.SetProperty(PercentControlEffectivenessJsonPropertyName, value);
    }

    /// <summary>
    /// Sets startDate.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Control WithStartDate(in Corvus.Json.JsonDate value)
    {
        return this.SetProperty(StartDateJsonPropertyName, value);
    }

    /// <summary>
    /// Sets statusCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Control WithStatusCode(in Caers.Api.SchemaEntities.LookupValue value)
    {
        return this.SetProperty(StatusCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets statusCodeYear.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Control WithStatusCodeYear(in Corvus.Json.JsonInteger value)
    {
        return this.SetProperty(StatusCodeYearJsonPropertyName, value);
    }

    /// <summary>
    /// Sets upgradeDate.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Control WithUpgradeDate(in Corvus.Json.JsonDate value)
    {
        return this.SetProperty(UpgradeDateJsonPropertyName, value);
    }

    /// <summary>
    /// Sets upgradeDescription.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Control WithUpgradeDescription(in Caers.Api.SchemaEntities.Control.UpgradeDescriptionEntity value)
    {
        return this.SetProperty(UpgradeDescriptionJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateControlMeasureCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.LookupValue>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateIdentification(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Control.IdentificationIdentificationArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateDescription(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Control.DescriptionEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStatusCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.LookupValue>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStatusCodeYear(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonInteger>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateComment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Control.CommentEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePercentControlEffectiveness(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Control.PercentControlEffectivenessEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateNumberOperatingMonths(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Control.NumberOperatingMonthsEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStartDate(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDate>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateUpgradeDate(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDate>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEndDate(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDate>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateUpgradeDescription(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Control.UpgradeDescriptionEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateControlPollutants(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Control.ControlPollutantArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateControlIsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateControlManufactureMake(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateControlManufactureModel(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMainIdentification(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Identification>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(ControlMeasureCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlMeasureCode;
                return true;
            }
            else if (property.NameEquals(IdentificationUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateIdentification;
                return true;
            }
            else if (property.NameEquals(DescriptionUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateDescription;
                return true;
            }
            else if (property.NameEquals(StatusCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStatusCode;
                return true;
            }
            else if (property.NameEquals(StatusCodeYearUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStatusCodeYear;
                return true;
            }
            else if (property.NameEquals(CommentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateComment;
                return true;
            }
            else if (property.NameEquals(PercentControlEffectivenessUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePercentControlEffectiveness;
                return true;
            }
            else if (property.NameEquals(NumberOperatingMonthsUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateNumberOperatingMonths;
                return true;
            }
            else if (property.NameEquals(StartDateUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStartDate;
                return true;
            }
            else if (property.NameEquals(UpgradeDateUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateUpgradeDate;
                return true;
            }
            else if (property.NameEquals(EndDateUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEndDate;
                return true;
            }
            else if (property.NameEquals(UpgradeDescriptionUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateUpgradeDescription;
                return true;
            }
            else if (property.NameEquals(ControlPollutantsUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlPollutants;
                return true;
            }
            else if (property.NameEquals(ControlIsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlIsReadOnly;
                return true;
            }
            else if (property.NameEquals(ControlManufactureMakeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlManufactureMake;
                return true;
            }
            else if (property.NameEquals(ControlManufactureModelUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlManufactureModel;
                return true;
            }
            else if (property.NameEquals(MainIdentificationUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateMainIdentification;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(ControlMeasureCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlMeasureCode;
                return true;
            }
            else if (property.NameEquals(IdentificationJsonPropertyName))
            {
                propertyValidator = __CorvusValidateIdentification;
                return true;
            }
            else if (property.NameEquals(DescriptionJsonPropertyName))
            {
                propertyValidator = __CorvusValidateDescription;
                return true;
            }
            else if (property.NameEquals(StatusCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStatusCode;
                return true;
            }
            else if (property.NameEquals(StatusCodeYearJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStatusCodeYear;
                return true;
            }
            else if (property.NameEquals(CommentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateComment;
                return true;
            }
            else if (property.NameEquals(PercentControlEffectivenessJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePercentControlEffectiveness;
                return true;
            }
            else if (property.NameEquals(NumberOperatingMonthsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateNumberOperatingMonths;
                return true;
            }
            else if (property.NameEquals(StartDateJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStartDate;
                return true;
            }
            else if (property.NameEquals(UpgradeDateJsonPropertyName))
            {
                propertyValidator = __CorvusValidateUpgradeDate;
                return true;
            }
            else if (property.NameEquals(EndDateJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEndDate;
                return true;
            }
            else if (property.NameEquals(UpgradeDescriptionJsonPropertyName))
            {
                propertyValidator = __CorvusValidateUpgradeDescription;
                return true;
            }
            else if (property.NameEquals(ControlPollutantsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlPollutants;
                return true;
            }
            else if (property.NameEquals(ControlIsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlIsReadOnly;
                return true;
            }
            else if (property.NameEquals(ControlManufactureMakeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlManufactureMake;
                return true;
            }
            else if (property.NameEquals(ControlManufactureModelJsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlManufactureModel;
                return true;
            }
            else if (property.NameEquals(MainIdentificationJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMainIdentification;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}