//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api.SchemaEntities;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct GeographicCoordinatesDataType
{
    /// <summary>
    /// JSON property name for <see cref = "AreaWithinPerimeter"/>.
    /// </summary>
    public static ReadOnlySpan<byte> AreaWithinPerimeterUtf8JsonPropertyName => "areaWithinPerimeter"u8;

    /// <summary>
    /// JSON property name for <see cref = "AreaWithinPerimeter"/>.
    /// </summary>
    public const string AreaWithinPerimeterJsonPropertyName = "areaWithinPerimeter";
    /// <summary>
    /// JSON property name for <see cref = "AreaWithinPerimeterUnitofMeasureCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> AreaWithinPerimeterUnitofMeasureCodeUtf8JsonPropertyName => "areaWithinPerimeterUnitofMeasureCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "AreaWithinPerimeterUnitofMeasureCode"/>.
    /// </summary>
    public const string AreaWithinPerimeterUnitofMeasureCodeJsonPropertyName = "areaWithinPerimeterUnitofMeasureCode";
    /// <summary>
    /// JSON property name for <see cref = "CoordinateDataSourceCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CoordinateDataSourceCodeUtf8JsonPropertyName => "coordinateDataSourceCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "CoordinateDataSourceCode"/>.
    /// </summary>
    public const string CoordinateDataSourceCodeJsonPropertyName = "coordinateDataSourceCode";
    /// <summary>
    /// JSON property name for <see cref = "DataCollectionDate"/>.
    /// </summary>
    public static ReadOnlySpan<byte> DataCollectionDateUtf8JsonPropertyName => "dataCollectionDate"u8;

    /// <summary>
    /// JSON property name for <see cref = "DataCollectionDate"/>.
    /// </summary>
    public const string DataCollectionDateJsonPropertyName = "dataCollectionDate";
    /// <summary>
    /// JSON property name for <see cref = "GeographicComment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> GeographicCommentUtf8JsonPropertyName => "geographicComment"u8;

    /// <summary>
    /// JSON property name for <see cref = "GeographicComment"/>.
    /// </summary>
    public const string GeographicCommentJsonPropertyName = "geographicComment";
    /// <summary>
    /// JSON property name for <see cref = "GeographicCoordinateIsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> GeographicCoordinateIsReadOnlyUtf8JsonPropertyName => "geographicCoordinateIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "GeographicCoordinateIsReadOnly"/>.
    /// </summary>
    public const string GeographicCoordinateIsReadOnlyJsonPropertyName = "geographicCoordinateIsReadOnly";
    /// <summary>
    /// JSON property name for <see cref = "GeographicReferencePointCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> GeographicReferencePointCodeUtf8JsonPropertyName => "geographicReferencePointCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "GeographicReferencePointCode"/>.
    /// </summary>
    public const string GeographicReferencePointCodeJsonPropertyName = "geographicReferencePointCode";
    /// <summary>
    /// JSON property name for <see cref = "GeometricTypeCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> GeometricTypeCodeUtf8JsonPropertyName => "geometricTypeCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "GeometricTypeCode"/>.
    /// </summary>
    public const string GeometricTypeCodeJsonPropertyName = "geometricTypeCode";
    /// <summary>
    /// JSON property name for <see cref = "HorizontalAccuracyMeasure"/>.
    /// </summary>
    public static ReadOnlySpan<byte> HorizontalAccuracyMeasureUtf8JsonPropertyName => "horizontalAccuracyMeasure"u8;

    /// <summary>
    /// JSON property name for <see cref = "HorizontalAccuracyMeasure"/>.
    /// </summary>
    public const string HorizontalAccuracyMeasureJsonPropertyName = "horizontalAccuracyMeasure";
    /// <summary>
    /// JSON property name for <see cref = "HorizontalAccuracyUnitofMeasure"/>.
    /// </summary>
    public static ReadOnlySpan<byte> HorizontalAccuracyUnitofMeasureUtf8JsonPropertyName => "horizontalAccuracyUnitofMeasure"u8;

    /// <summary>
    /// JSON property name for <see cref = "HorizontalAccuracyUnitofMeasure"/>.
    /// </summary>
    public const string HorizontalAccuracyUnitofMeasureJsonPropertyName = "horizontalAccuracyUnitofMeasure";
    /// <summary>
    /// JSON property name for <see cref = "HorizontalCollectionMethodCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> HorizontalCollectionMethodCodeUtf8JsonPropertyName => "horizontalCollectionMethodCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "HorizontalCollectionMethodCode"/>.
    /// </summary>
    public const string HorizontalCollectionMethodCodeJsonPropertyName = "horizontalCollectionMethodCode";
    /// <summary>
    /// JSON property name for <see cref = "HorizontalReferenceDatumCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> HorizontalReferenceDatumCodeUtf8JsonPropertyName => "horizontalReferenceDatumCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "HorizontalReferenceDatumCode"/>.
    /// </summary>
    public const string HorizontalReferenceDatumCodeJsonPropertyName = "horizontalReferenceDatumCode";
    /// <summary>
    /// JSON property name for <see cref = "LatitudeMeasure"/>.
    /// </summary>
    public static ReadOnlySpan<byte> LatitudeMeasureUtf8JsonPropertyName => "latitudeMeasure"u8;

    /// <summary>
    /// JSON property name for <see cref = "LatitudeMeasure"/>.
    /// </summary>
    public const string LatitudeMeasureJsonPropertyName = "latitudeMeasure";
    /// <summary>
    /// JSON property name for <see cref = "LongitudeMeasure"/>.
    /// </summary>
    public static ReadOnlySpan<byte> LongitudeMeasureUtf8JsonPropertyName => "longitudeMeasure"u8;

    /// <summary>
    /// JSON property name for <see cref = "LongitudeMeasure"/>.
    /// </summary>
    public const string LongitudeMeasureJsonPropertyName = "longitudeMeasure";
    /// <summary>
    /// JSON property name for <see cref = "MidPoint2LatitudeMeasure"/>.
    /// </summary>
    public static ReadOnlySpan<byte> MidPoint2LatitudeMeasureUtf8JsonPropertyName => "midPoint2LatitudeMeasure"u8;

    /// <summary>
    /// JSON property name for <see cref = "MidPoint2LatitudeMeasure"/>.
    /// </summary>
    public const string MidPoint2LatitudeMeasureJsonPropertyName = "midPoint2LatitudeMeasure";
    /// <summary>
    /// JSON property name for <see cref = "MidPoint2LongitudeMeasure"/>.
    /// </summary>
    public static ReadOnlySpan<byte> MidPoint2LongitudeMeasureUtf8JsonPropertyName => "midPoint2LongitudeMeasure"u8;

    /// <summary>
    /// JSON property name for <see cref = "MidPoint2LongitudeMeasure"/>.
    /// </summary>
    public const string MidPoint2LongitudeMeasureJsonPropertyName = "midPoint2LongitudeMeasure";
    /// <summary>
    /// JSON property name for <see cref = "SourceMapScaleNumber"/>.
    /// </summary>
    public static ReadOnlySpan<byte> SourceMapScaleNumberUtf8JsonPropertyName => "sourceMapScaleNumber"u8;

    /// <summary>
    /// JSON property name for <see cref = "SourceMapScaleNumber"/>.
    /// </summary>
    public const string SourceMapScaleNumberJsonPropertyName = "sourceMapScaleNumber";
    /// <summary>
    /// JSON property name for <see cref = "VerificationMethodCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> VerificationMethodCodeUtf8JsonPropertyName => "verificationMethodCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "VerificationMethodCode"/>.
    /// </summary>
    public const string VerificationMethodCodeJsonPropertyName = "verificationMethodCode";
    /// <summary>
    /// JSON property name for <see cref = "VerticalCollectionMethodCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> VerticalCollectionMethodCodeUtf8JsonPropertyName => "verticalCollectionMethodCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "VerticalCollectionMethodCode"/>.
    /// </summary>
    public const string VerticalCollectionMethodCodeJsonPropertyName = "verticalCollectionMethodCode";
    /// <summary>
    /// JSON property name for <see cref = "VerticalMeasure"/>.
    /// </summary>
    public static ReadOnlySpan<byte> VerticalMeasureUtf8JsonPropertyName => "verticalMeasure"u8;

    /// <summary>
    /// JSON property name for <see cref = "VerticalMeasure"/>.
    /// </summary>
    public const string VerticalMeasureJsonPropertyName = "verticalMeasure";
    /// <summary>
    /// JSON property name for <see cref = "VerticalReferenceDatumCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> VerticalReferenceDatumCodeUtf8JsonPropertyName => "verticalReferenceDatumCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "VerticalReferenceDatumCode"/>.
    /// </summary>
    public const string VerticalReferenceDatumCodeJsonPropertyName = "verticalReferenceDatumCode";
    /// <summary>
    /// JSON property name for <see cref = "VerticalUnitofMeasureCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> VerticalUnitofMeasureCodeUtf8JsonPropertyName => "verticalUnitofMeasureCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "VerticalUnitofMeasureCode"/>.
    /// </summary>
    public const string VerticalUnitofMeasureCodeJsonPropertyName = "verticalUnitofMeasureCode";
    /// <summary>
    /// Gets AreaWithinPerimeter.
    /// </summary>
    public Corvus.Json.JsonString AreaWithinPerimeter
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(AreaWithinPerimeterUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(AreaWithinPerimeterJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets AreaWithinPerimeterUnitofMeasureCode.
    /// </summary>
    public Corvus.Json.JsonString AreaWithinPerimeterUnitofMeasureCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(AreaWithinPerimeterUnitofMeasureCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(AreaWithinPerimeterUnitofMeasureCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets CoordinateDataSourceCode.
    /// </summary>
    public Corvus.Json.JsonString CoordinateDataSourceCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CoordinateDataSourceCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CoordinateDataSourceCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets DataCollectionDate.
    /// </summary>
    public Corvus.Json.JsonDateTime DataCollectionDate
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(DataCollectionDateUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDateTime(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(DataCollectionDateJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDateTime>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets GeographicComment.
    /// </summary>
    public Corvus.Json.JsonString GeographicComment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(GeographicCommentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(GeographicCommentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets GeographicCoordinateIsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString GeographicCoordinateIsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(GeographicCoordinateIsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(GeographicCoordinateIsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets GeographicReferencePointCode.
    /// </summary>
    public Corvus.Json.JsonString GeographicReferencePointCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(GeographicReferencePointCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(GeographicReferencePointCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets GeometricTypeCode.
    /// </summary>
    public Corvus.Json.JsonString GeometricTypeCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(GeometricTypeCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(GeometricTypeCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets HorizontalAccuracyMeasure.
    /// </summary>
    public Corvus.Json.JsonString HorizontalAccuracyMeasure
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(HorizontalAccuracyMeasureUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(HorizontalAccuracyMeasureJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets HorizontalAccuracyUnitofMeasure.
    /// </summary>
    public Corvus.Json.JsonString HorizontalAccuracyUnitofMeasure
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(HorizontalAccuracyUnitofMeasureUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(HorizontalAccuracyUnitofMeasureJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets HorizontalCollectionMethodCode.
    /// </summary>
    public Corvus.Json.JsonString HorizontalCollectionMethodCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(HorizontalCollectionMethodCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(HorizontalCollectionMethodCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets HorizontalReferenceDatumCode.
    /// </summary>
    public Corvus.Json.JsonString HorizontalReferenceDatumCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(HorizontalReferenceDatumCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(HorizontalReferenceDatumCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets LatitudeMeasure.
    /// </summary>
    public Corvus.Json.JsonString LatitudeMeasure
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(LatitudeMeasureUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(LatitudeMeasureJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets LongitudeMeasure.
    /// </summary>
    public Corvus.Json.JsonString LongitudeMeasure
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(LongitudeMeasureUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(LongitudeMeasureJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MidPoint2LatitudeMeasure.
    /// </summary>
    public Corvus.Json.JsonString MidPoint2LatitudeMeasure
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MidPoint2LatitudeMeasureUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MidPoint2LatitudeMeasureJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MidPoint2LongitudeMeasure.
    /// </summary>
    public Corvus.Json.JsonString MidPoint2LongitudeMeasure
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MidPoint2LongitudeMeasureUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MidPoint2LongitudeMeasureJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets SourceMapScaleNumber.
    /// </summary>
    public Corvus.Json.JsonString SourceMapScaleNumber
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(SourceMapScaleNumberUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(SourceMapScaleNumberJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets VerificationMethodCode.
    /// </summary>
    public Corvus.Json.JsonString VerificationMethodCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(VerificationMethodCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(VerificationMethodCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets VerticalCollectionMethodCode.
    /// </summary>
    public Corvus.Json.JsonString VerticalCollectionMethodCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(VerticalCollectionMethodCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(VerticalCollectionMethodCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets VerticalMeasure.
    /// </summary>
    public Corvus.Json.JsonString VerticalMeasure
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(VerticalMeasureUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(VerticalMeasureJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets VerticalReferenceDatumCode.
    /// </summary>
    public Corvus.Json.JsonString VerticalReferenceDatumCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(VerticalReferenceDatumCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(VerticalReferenceDatumCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets VerticalUnitofMeasureCode.
    /// </summary>
    public Corvus.Json.JsonString VerticalUnitofMeasureCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(VerticalUnitofMeasureCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(VerticalUnitofMeasureCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "GeographicCoordinatesDataType"/>.
    /// </summary>
    public static GeographicCoordinatesDataType Create(Corvus.Json.JsonString latitudeMeasure, Corvus.Json.JsonString longitudeMeasure, Corvus.Json.JsonString? areaWithinPerimeter = null, Corvus.Json.JsonString? areaWithinPerimeterUnitofMeasureCode = null, Corvus.Json.JsonString? coordinateDataSourceCode = null, Corvus.Json.JsonDateTime? dataCollectionDate = null, Corvus.Json.JsonString? geographicComment = null, Corvus.Json.JsonString? geographicCoordinateIsReadOnly = null, Corvus.Json.JsonString? geographicReferencePointCode = null, Corvus.Json.JsonString? geometricTypeCode = null, Corvus.Json.JsonString? horizontalAccuracyMeasure = null, Corvus.Json.JsonString? horizontalAccuracyUnitofMeasure = null, Corvus.Json.JsonString? horizontalCollectionMethodCode = null, Corvus.Json.JsonString? horizontalReferenceDatumCode = null, Corvus.Json.JsonString? midPoint2LatitudeMeasure = null, Corvus.Json.JsonString? midPoint2LongitudeMeasure = null, Corvus.Json.JsonString? sourceMapScaleNumber = null, Corvus.Json.JsonString? verificationMethodCode = null, Corvus.Json.JsonString? verticalCollectionMethodCode = null, Corvus.Json.JsonString? verticalMeasure = null, Corvus.Json.JsonString? verticalReferenceDatumCode = null, Corvus.Json.JsonString? verticalUnitofMeasureCode = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(LatitudeMeasureJsonPropertyName, latitudeMeasure.AsAny);
        builder.Add(LongitudeMeasureJsonPropertyName, longitudeMeasure.AsAny);
        if (areaWithinPerimeter is Corvus.Json.JsonString areaWithinPerimeter__)
        {
            builder.Add(AreaWithinPerimeterJsonPropertyName, areaWithinPerimeter__.AsAny);
        }

        if (areaWithinPerimeterUnitofMeasureCode is Corvus.Json.JsonString areaWithinPerimeterUnitofMeasureCode__)
        {
            builder.Add(AreaWithinPerimeterUnitofMeasureCodeJsonPropertyName, areaWithinPerimeterUnitofMeasureCode__.AsAny);
        }

        if (coordinateDataSourceCode is Corvus.Json.JsonString coordinateDataSourceCode__)
        {
            builder.Add(CoordinateDataSourceCodeJsonPropertyName, coordinateDataSourceCode__.AsAny);
        }

        if (dataCollectionDate is Corvus.Json.JsonDateTime dataCollectionDate__)
        {
            builder.Add(DataCollectionDateJsonPropertyName, dataCollectionDate__.AsAny);
        }

        if (geographicComment is Corvus.Json.JsonString geographicComment__)
        {
            builder.Add(GeographicCommentJsonPropertyName, geographicComment__.AsAny);
        }

        if (geographicCoordinateIsReadOnly is Corvus.Json.JsonString geographicCoordinateIsReadOnly__)
        {
            builder.Add(GeographicCoordinateIsReadOnlyJsonPropertyName, geographicCoordinateIsReadOnly__.AsAny);
        }

        if (geographicReferencePointCode is Corvus.Json.JsonString geographicReferencePointCode__)
        {
            builder.Add(GeographicReferencePointCodeJsonPropertyName, geographicReferencePointCode__.AsAny);
        }

        if (geometricTypeCode is Corvus.Json.JsonString geometricTypeCode__)
        {
            builder.Add(GeometricTypeCodeJsonPropertyName, geometricTypeCode__.AsAny);
        }

        if (horizontalAccuracyMeasure is Corvus.Json.JsonString horizontalAccuracyMeasure__)
        {
            builder.Add(HorizontalAccuracyMeasureJsonPropertyName, horizontalAccuracyMeasure__.AsAny);
        }

        if (horizontalAccuracyUnitofMeasure is Corvus.Json.JsonString horizontalAccuracyUnitofMeasure__)
        {
            builder.Add(HorizontalAccuracyUnitofMeasureJsonPropertyName, horizontalAccuracyUnitofMeasure__.AsAny);
        }

        if (horizontalCollectionMethodCode is Corvus.Json.JsonString horizontalCollectionMethodCode__)
        {
            builder.Add(HorizontalCollectionMethodCodeJsonPropertyName, horizontalCollectionMethodCode__.AsAny);
        }

        if (horizontalReferenceDatumCode is Corvus.Json.JsonString horizontalReferenceDatumCode__)
        {
            builder.Add(HorizontalReferenceDatumCodeJsonPropertyName, horizontalReferenceDatumCode__.AsAny);
        }

        if (midPoint2LatitudeMeasure is Corvus.Json.JsonString midPoint2LatitudeMeasure__)
        {
            builder.Add(MidPoint2LatitudeMeasureJsonPropertyName, midPoint2LatitudeMeasure__.AsAny);
        }

        if (midPoint2LongitudeMeasure is Corvus.Json.JsonString midPoint2LongitudeMeasure__)
        {
            builder.Add(MidPoint2LongitudeMeasureJsonPropertyName, midPoint2LongitudeMeasure__.AsAny);
        }

        if (sourceMapScaleNumber is Corvus.Json.JsonString sourceMapScaleNumber__)
        {
            builder.Add(SourceMapScaleNumberJsonPropertyName, sourceMapScaleNumber__.AsAny);
        }

        if (verificationMethodCode is Corvus.Json.JsonString verificationMethodCode__)
        {
            builder.Add(VerificationMethodCodeJsonPropertyName, verificationMethodCode__.AsAny);
        }

        if (verticalCollectionMethodCode is Corvus.Json.JsonString verticalCollectionMethodCode__)
        {
            builder.Add(VerticalCollectionMethodCodeJsonPropertyName, verticalCollectionMethodCode__.AsAny);
        }

        if (verticalMeasure is Corvus.Json.JsonString verticalMeasure__)
        {
            builder.Add(VerticalMeasureJsonPropertyName, verticalMeasure__.AsAny);
        }

        if (verticalReferenceDatumCode is Corvus.Json.JsonString verticalReferenceDatumCode__)
        {
            builder.Add(VerticalReferenceDatumCodeJsonPropertyName, verticalReferenceDatumCode__.AsAny);
        }

        if (verticalUnitofMeasureCode is Corvus.Json.JsonString verticalUnitofMeasureCode__)
        {
            builder.Add(VerticalUnitofMeasureCodeJsonPropertyName, verticalUnitofMeasureCode__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets areaWithinPerimeter.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithAreaWithinPerimeter(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(AreaWithinPerimeterJsonPropertyName, value);
    }

    /// <summary>
    /// Sets areaWithinPerimeterUnitofMeasureCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithAreaWithinPerimeterUnitofMeasureCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(AreaWithinPerimeterUnitofMeasureCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets coordinateDataSourceCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithCoordinateDataSourceCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(CoordinateDataSourceCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets dataCollectionDate.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithDataCollectionDate(in Corvus.Json.JsonDateTime value)
    {
        return this.SetProperty(DataCollectionDateJsonPropertyName, value);
    }

    /// <summary>
    /// Sets geographicComment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithGeographicComment(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(GeographicCommentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets geographicCoordinateIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithGeographicCoordinateIsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(GeographicCoordinateIsReadOnlyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets geographicReferencePointCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithGeographicReferencePointCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(GeographicReferencePointCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets geometricTypeCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithGeometricTypeCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(GeometricTypeCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets horizontalAccuracyMeasure.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithHorizontalAccuracyMeasure(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(HorizontalAccuracyMeasureJsonPropertyName, value);
    }

    /// <summary>
    /// Sets horizontalAccuracyUnitofMeasure.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithHorizontalAccuracyUnitofMeasure(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(HorizontalAccuracyUnitofMeasureJsonPropertyName, value);
    }

    /// <summary>
    /// Sets horizontalCollectionMethodCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithHorizontalCollectionMethodCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(HorizontalCollectionMethodCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets horizontalReferenceDatumCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithHorizontalReferenceDatumCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(HorizontalReferenceDatumCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets latitudeMeasure.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithLatitudeMeasure(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(LatitudeMeasureJsonPropertyName, value);
    }

    /// <summary>
    /// Sets longitudeMeasure.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithLongitudeMeasure(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(LongitudeMeasureJsonPropertyName, value);
    }

    /// <summary>
    /// Sets midPoint2LatitudeMeasure.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithMidPoint2LatitudeMeasure(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(MidPoint2LatitudeMeasureJsonPropertyName, value);
    }

    /// <summary>
    /// Sets midPoint2LongitudeMeasure.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithMidPoint2LongitudeMeasure(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(MidPoint2LongitudeMeasureJsonPropertyName, value);
    }

    /// <summary>
    /// Sets sourceMapScaleNumber.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithSourceMapScaleNumber(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(SourceMapScaleNumberJsonPropertyName, value);
    }

    /// <summary>
    /// Sets verificationMethodCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithVerificationMethodCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(VerificationMethodCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets verticalCollectionMethodCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithVerticalCollectionMethodCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(VerticalCollectionMethodCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets verticalMeasure.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithVerticalMeasure(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(VerticalMeasureJsonPropertyName, value);
    }

    /// <summary>
    /// Sets verticalReferenceDatumCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithVerticalReferenceDatumCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(VerticalReferenceDatumCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets verticalUnitofMeasureCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public GeographicCoordinatesDataType WithVerticalUnitofMeasureCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(VerticalUnitofMeasureCodeJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateLatitudeMeasure(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateLongitudeMeasure(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMidPoint2LatitudeMeasure(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMidPoint2LongitudeMeasure(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateSourceMapScaleNumber(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateHorizontalAccuracyMeasure(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateHorizontalAccuracyUnitofMeasure(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateHorizontalCollectionMethodCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateHorizontalReferenceDatumCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateGeographicReferencePointCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateDataCollectionDate(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDateTime>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateGeographicComment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateVerticalMeasure(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateVerticalUnitofMeasureCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateVerticalCollectionMethodCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateVerticalReferenceDatumCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateVerificationMethodCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateCoordinateDataSourceCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateGeometricTypeCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateAreaWithinPerimeter(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateAreaWithinPerimeterUnitofMeasureCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateGeographicCoordinateIsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(LatitudeMeasureUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateLatitudeMeasure;
                return true;
            }
            else if (property.NameEquals(LongitudeMeasureUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateLongitudeMeasure;
                return true;
            }
            else if (property.NameEquals(MidPoint2LatitudeMeasureUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateMidPoint2LatitudeMeasure;
                return true;
            }
            else if (property.NameEquals(MidPoint2LongitudeMeasureUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateMidPoint2LongitudeMeasure;
                return true;
            }
            else if (property.NameEquals(SourceMapScaleNumberUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateSourceMapScaleNumber;
                return true;
            }
            else if (property.NameEquals(HorizontalAccuracyMeasureUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateHorizontalAccuracyMeasure;
                return true;
            }
            else if (property.NameEquals(HorizontalAccuracyUnitofMeasureUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateHorizontalAccuracyUnitofMeasure;
                return true;
            }
            else if (property.NameEquals(HorizontalCollectionMethodCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateHorizontalCollectionMethodCode;
                return true;
            }
            else if (property.NameEquals(HorizontalReferenceDatumCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateHorizontalReferenceDatumCode;
                return true;
            }
            else if (property.NameEquals(GeographicReferencePointCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateGeographicReferencePointCode;
                return true;
            }
            else if (property.NameEquals(DataCollectionDateUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateDataCollectionDate;
                return true;
            }
            else if (property.NameEquals(GeographicCommentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateGeographicComment;
                return true;
            }
            else if (property.NameEquals(VerticalMeasureUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateVerticalMeasure;
                return true;
            }
            else if (property.NameEquals(VerticalUnitofMeasureCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateVerticalUnitofMeasureCode;
                return true;
            }
            else if (property.NameEquals(VerticalCollectionMethodCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateVerticalCollectionMethodCode;
                return true;
            }
            else if (property.NameEquals(VerticalReferenceDatumCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateVerticalReferenceDatumCode;
                return true;
            }
            else if (property.NameEquals(VerificationMethodCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateVerificationMethodCode;
                return true;
            }
            else if (property.NameEquals(CoordinateDataSourceCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateCoordinateDataSourceCode;
                return true;
            }
            else if (property.NameEquals(GeometricTypeCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateGeometricTypeCode;
                return true;
            }
            else if (property.NameEquals(AreaWithinPerimeterUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateAreaWithinPerimeter;
                return true;
            }
            else if (property.NameEquals(AreaWithinPerimeterUnitofMeasureCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateAreaWithinPerimeterUnitofMeasureCode;
                return true;
            }
            else if (property.NameEquals(GeographicCoordinateIsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateGeographicCoordinateIsReadOnly;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(LatitudeMeasureJsonPropertyName))
            {
                propertyValidator = __CorvusValidateLatitudeMeasure;
                return true;
            }
            else if (property.NameEquals(LongitudeMeasureJsonPropertyName))
            {
                propertyValidator = __CorvusValidateLongitudeMeasure;
                return true;
            }
            else if (property.NameEquals(MidPoint2LatitudeMeasureJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMidPoint2LatitudeMeasure;
                return true;
            }
            else if (property.NameEquals(MidPoint2LongitudeMeasureJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMidPoint2LongitudeMeasure;
                return true;
            }
            else if (property.NameEquals(SourceMapScaleNumberJsonPropertyName))
            {
                propertyValidator = __CorvusValidateSourceMapScaleNumber;
                return true;
            }
            else if (property.NameEquals(HorizontalAccuracyMeasureJsonPropertyName))
            {
                propertyValidator = __CorvusValidateHorizontalAccuracyMeasure;
                return true;
            }
            else if (property.NameEquals(HorizontalAccuracyUnitofMeasureJsonPropertyName))
            {
                propertyValidator = __CorvusValidateHorizontalAccuracyUnitofMeasure;
                return true;
            }
            else if (property.NameEquals(HorizontalCollectionMethodCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateHorizontalCollectionMethodCode;
                return true;
            }
            else if (property.NameEquals(HorizontalReferenceDatumCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateHorizontalReferenceDatumCode;
                return true;
            }
            else if (property.NameEquals(GeographicReferencePointCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateGeographicReferencePointCode;
                return true;
            }
            else if (property.NameEquals(DataCollectionDateJsonPropertyName))
            {
                propertyValidator = __CorvusValidateDataCollectionDate;
                return true;
            }
            else if (property.NameEquals(GeographicCommentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateGeographicComment;
                return true;
            }
            else if (property.NameEquals(VerticalMeasureJsonPropertyName))
            {
                propertyValidator = __CorvusValidateVerticalMeasure;
                return true;
            }
            else if (property.NameEquals(VerticalUnitofMeasureCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateVerticalUnitofMeasureCode;
                return true;
            }
            else if (property.NameEquals(VerticalCollectionMethodCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateVerticalCollectionMethodCode;
                return true;
            }
            else if (property.NameEquals(VerticalReferenceDatumCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateVerticalReferenceDatumCode;
                return true;
            }
            else if (property.NameEquals(VerificationMethodCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateVerificationMethodCode;
                return true;
            }
            else if (property.NameEquals(CoordinateDataSourceCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateCoordinateDataSourceCode;
                return true;
            }
            else if (property.NameEquals(GeometricTypeCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateGeometricTypeCode;
                return true;
            }
            else if (property.NameEquals(AreaWithinPerimeterJsonPropertyName))
            {
                propertyValidator = __CorvusValidateAreaWithinPerimeter;
                return true;
            }
            else if (property.NameEquals(AreaWithinPerimeterUnitofMeasureCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateAreaWithinPerimeterUnitofMeasureCode;
                return true;
            }
            else if (property.NameEquals(GeographicCoordinateIsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidateGeographicCoordinateIsReadOnly;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}