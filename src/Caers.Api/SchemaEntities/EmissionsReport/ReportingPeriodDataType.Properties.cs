//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api.SchemaEntities;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct ReportingPeriodDataType
{
    /// <summary>
    /// JSON property name for <see cref = "CalculationDataSource"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CalculationDataSourceUtf8JsonPropertyName => "calculationDataSource"u8;

    /// <summary>
    /// JSON property name for <see cref = "CalculationDataSource"/>.
    /// </summary>
    public const string CalculationDataSourceJsonPropertyName = "calculationDataSource";
    /// <summary>
    /// JSON property name for <see cref = "CalculationDataYear"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CalculationDataYearUtf8JsonPropertyName => "calculationDataYear"u8;

    /// <summary>
    /// JSON property name for <see cref = "CalculationDataYear"/>.
    /// </summary>
    public const string CalculationDataYearJsonPropertyName = "calculationDataYear";
    /// <summary>
    /// JSON property name for <see cref = "CalculationMaterialCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CalculationMaterialCodeUtf8JsonPropertyName => "calculationMaterialCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "CalculationMaterialCode"/>.
    /// </summary>
    public const string CalculationMaterialCodeJsonPropertyName = "calculationMaterialCode";
    /// <summary>
    /// JSON property name for <see cref = "CalculationParameterTypeCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CalculationParameterTypeCodeUtf8JsonPropertyName => "calculationParameterTypeCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "CalculationParameterTypeCode"/>.
    /// </summary>
    public const string CalculationParameterTypeCodeJsonPropertyName = "calculationParameterTypeCode";
    /// <summary>
    /// JSON property name for <see cref = "CalculationParameterUnitofMeasure"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CalculationParameterUnitofMeasureUtf8JsonPropertyName => "calculationParameterUnitofMeasure"u8;

    /// <summary>
    /// JSON property name for <see cref = "CalculationParameterUnitofMeasure"/>.
    /// </summary>
    public const string CalculationParameterUnitofMeasureJsonPropertyName = "calculationParameterUnitofMeasure";
    /// <summary>
    /// JSON property name for <see cref = "CalculationParameterValue"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CalculationParameterValueUtf8JsonPropertyName => "calculationParameterValue"u8;

    /// <summary>
    /// JSON property name for <see cref = "CalculationParameterValue"/>.
    /// </summary>
    public const string CalculationParameterValueJsonPropertyName = "calculationParameterValue";
    /// <summary>
    /// JSON property name for <see cref = "EmissionOperatingTypeCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionOperatingTypeCodeUtf8JsonPropertyName => "emissionOperatingTypeCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmissionOperatingTypeCode"/>.
    /// </summary>
    public const string EmissionOperatingTypeCodeJsonPropertyName = "emissionOperatingTypeCode";
    /// <summary>
    /// JSON property name for <see cref = "EndDate"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EndDateUtf8JsonPropertyName => "endDate"u8;

    /// <summary>
    /// JSON property name for <see cref = "EndDate"/>.
    /// </summary>
    public const string EndDateJsonPropertyName = "endDate";
    /// <summary>
    /// JSON property name for <see cref = "OperatingDetails"/>.
    /// </summary>
    public static ReadOnlySpan<byte> OperatingDetailsUtf8JsonPropertyName => "operatingDetails"u8;

    /// <summary>
    /// JSON property name for <see cref = "OperatingDetails"/>.
    /// </summary>
    public const string OperatingDetailsJsonPropertyName = "operatingDetails";
    /// <summary>
    /// JSON property name for <see cref = "ReportingPeriodComment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ReportingPeriodCommentUtf8JsonPropertyName => "reportingPeriodComment"u8;

    /// <summary>
    /// JSON property name for <see cref = "ReportingPeriodComment"/>.
    /// </summary>
    public const string ReportingPeriodCommentJsonPropertyName = "reportingPeriodComment";
    /// <summary>
    /// JSON property name for <see cref = "ReportingPeriodEmissions"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ReportingPeriodEmissionsUtf8JsonPropertyName => "reportingPeriodEmissions"u8;

    /// <summary>
    /// JSON property name for <see cref = "ReportingPeriodEmissions"/>.
    /// </summary>
    public const string ReportingPeriodEmissionsJsonPropertyName = "reportingPeriodEmissions";
    /// <summary>
    /// JSON property name for <see cref = "ReportingPeriodTypeCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ReportingPeriodTypeCodeUtf8JsonPropertyName => "reportingPeriodTypeCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "ReportingPeriodTypeCode"/>.
    /// </summary>
    public const string ReportingPeriodTypeCodeJsonPropertyName = "reportingPeriodTypeCode";
    /// <summary>
    /// JSON property name for <see cref = "StartDate"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StartDateUtf8JsonPropertyName => "startDate"u8;

    /// <summary>
    /// JSON property name for <see cref = "StartDate"/>.
    /// </summary>
    public const string StartDateJsonPropertyName = "startDate";
    /// <summary>
    /// JSON property name for <see cref = "SupplementalCalculationParameter"/>.
    /// </summary>
    public static ReadOnlySpan<byte> SupplementalCalculationParameterUtf8JsonPropertyName => "supplementalCalculationParameter"u8;

    /// <summary>
    /// JSON property name for <see cref = "SupplementalCalculationParameter"/>.
    /// </summary>
    public const string SupplementalCalculationParameterJsonPropertyName = "supplementalCalculationParameter";
    /// <summary>
    /// Gets CalculationDataSource.
    /// </summary>
    public Corvus.Json.JsonString CalculationDataSource
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CalculationDataSourceUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CalculationDataSourceJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets CalculationDataYear.
    /// </summary>
    public Corvus.Json.JsonDateTime CalculationDataYear
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CalculationDataYearUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDateTime(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CalculationDataYearJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDateTime>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets CalculationMaterialCode.
    /// </summary>
    public Corvus.Json.JsonString CalculationMaterialCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CalculationMaterialCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CalculationMaterialCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets CalculationParameterTypeCode.
    /// </summary>
    public Corvus.Json.JsonString CalculationParameterTypeCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CalculationParameterTypeCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CalculationParameterTypeCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets CalculationParameterUnitofMeasure.
    /// </summary>
    public Corvus.Json.JsonString CalculationParameterUnitofMeasure
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CalculationParameterUnitofMeasureUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CalculationParameterUnitofMeasureJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets CalculationParameterValue.
    /// </summary>
    public Corvus.Json.JsonString CalculationParameterValue
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CalculationParameterValueUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CalculationParameterValueJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EmissionOperatingTypeCode.
    /// </summary>
    public Corvus.Json.JsonString EmissionOperatingTypeCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionOperatingTypeCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionOperatingTypeCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EndDate.
    /// </summary>
    public Corvus.Json.JsonDateTime EndDate
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EndDateUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDateTime(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EndDateJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDateTime>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets OperatingDetails.
    /// </summary>
    public Caers.Api.SchemaEntities.OperatingDetailsDataType OperatingDetails
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(OperatingDetailsUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.OperatingDetailsDataType(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(OperatingDetailsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.OperatingDetailsDataType>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ReportingPeriodComment.
    /// </summary>
    public Corvus.Json.JsonString ReportingPeriodComment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ReportingPeriodCommentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ReportingPeriodCommentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ReportingPeriodEmissions.
    /// </summary>
    public Caers.Api.SchemaEntities.ReportingPeriodDataType.EmissionsDataTypeArray ReportingPeriodEmissions
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ReportingPeriodEmissionsUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.ReportingPeriodDataType.EmissionsDataTypeArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ReportingPeriodEmissionsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.ReportingPeriodDataType.EmissionsDataTypeArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ReportingPeriodTypeCode.
    /// </summary>
    public Corvus.Json.JsonString ReportingPeriodTypeCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ReportingPeriodTypeCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ReportingPeriodTypeCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StartDate.
    /// </summary>
    public Corvus.Json.JsonDateTime StartDate
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StartDateUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDateTime(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StartDateJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDateTime>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets SupplementalCalculationParameter.
    /// </summary>
    public Caers.Api.SchemaEntities.ReportingPeriodDataType.SupplementalCalculationParameterDataTypeArray SupplementalCalculationParameter
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(SupplementalCalculationParameterUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.ReportingPeriodDataType.SupplementalCalculationParameterDataTypeArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(SupplementalCalculationParameterJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.ReportingPeriodDataType.SupplementalCalculationParameterDataTypeArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "ReportingPeriodDataType"/>.
    /// </summary>
    public static ReportingPeriodDataType Create(Caers.Api.SchemaEntities.ReportingPeriodDataType.EmissionsDataTypeArray reportingPeriodEmissions, Corvus.Json.JsonString reportingPeriodTypeCode, Corvus.Json.JsonString? calculationDataSource = null, Corvus.Json.JsonDateTime? calculationDataYear = null, Corvus.Json.JsonString? calculationMaterialCode = null, Corvus.Json.JsonString? calculationParameterTypeCode = null, Corvus.Json.JsonString? calculationParameterUnitofMeasure = null, Corvus.Json.JsonString? calculationParameterValue = null, Corvus.Json.JsonString? emissionOperatingTypeCode = null, Corvus.Json.JsonDateTime? endDate = null, Caers.Api.SchemaEntities.OperatingDetailsDataType? operatingDetails = null, Corvus.Json.JsonString? reportingPeriodComment = null, Corvus.Json.JsonDateTime? startDate = null, Caers.Api.SchemaEntities.ReportingPeriodDataType.SupplementalCalculationParameterDataTypeArray? supplementalCalculationParameter = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(ReportingPeriodEmissionsJsonPropertyName, reportingPeriodEmissions.AsAny);
        builder.Add(ReportingPeriodTypeCodeJsonPropertyName, reportingPeriodTypeCode.AsAny);
        if (calculationDataSource is Corvus.Json.JsonString calculationDataSource__)
        {
            builder.Add(CalculationDataSourceJsonPropertyName, calculationDataSource__.AsAny);
        }

        if (calculationDataYear is Corvus.Json.JsonDateTime calculationDataYear__)
        {
            builder.Add(CalculationDataYearJsonPropertyName, calculationDataYear__.AsAny);
        }

        if (calculationMaterialCode is Corvus.Json.JsonString calculationMaterialCode__)
        {
            builder.Add(CalculationMaterialCodeJsonPropertyName, calculationMaterialCode__.AsAny);
        }

        if (calculationParameterTypeCode is Corvus.Json.JsonString calculationParameterTypeCode__)
        {
            builder.Add(CalculationParameterTypeCodeJsonPropertyName, calculationParameterTypeCode__.AsAny);
        }

        if (calculationParameterUnitofMeasure is Corvus.Json.JsonString calculationParameterUnitofMeasure__)
        {
            builder.Add(CalculationParameterUnitofMeasureJsonPropertyName, calculationParameterUnitofMeasure__.AsAny);
        }

        if (calculationParameterValue is Corvus.Json.JsonString calculationParameterValue__)
        {
            builder.Add(CalculationParameterValueJsonPropertyName, calculationParameterValue__.AsAny);
        }

        if (emissionOperatingTypeCode is Corvus.Json.JsonString emissionOperatingTypeCode__)
        {
            builder.Add(EmissionOperatingTypeCodeJsonPropertyName, emissionOperatingTypeCode__.AsAny);
        }

        if (endDate is Corvus.Json.JsonDateTime endDate__)
        {
            builder.Add(EndDateJsonPropertyName, endDate__.AsAny);
        }

        if (operatingDetails is Caers.Api.SchemaEntities.OperatingDetailsDataType operatingDetails__)
        {
            builder.Add(OperatingDetailsJsonPropertyName, operatingDetails__.AsAny);
        }

        if (reportingPeriodComment is Corvus.Json.JsonString reportingPeriodComment__)
        {
            builder.Add(ReportingPeriodCommentJsonPropertyName, reportingPeriodComment__.AsAny);
        }

        if (startDate is Corvus.Json.JsonDateTime startDate__)
        {
            builder.Add(StartDateJsonPropertyName, startDate__.AsAny);
        }

        if (supplementalCalculationParameter is Caers.Api.SchemaEntities.ReportingPeriodDataType.SupplementalCalculationParameterDataTypeArray supplementalCalculationParameter__)
        {
            builder.Add(SupplementalCalculationParameterJsonPropertyName, supplementalCalculationParameter__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets calculationDataSource.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriodDataType WithCalculationDataSource(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(CalculationDataSourceJsonPropertyName, value);
    }

    /// <summary>
    /// Sets calculationDataYear.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriodDataType WithCalculationDataYear(in Corvus.Json.JsonDateTime value)
    {
        return this.SetProperty(CalculationDataYearJsonPropertyName, value);
    }

    /// <summary>
    /// Sets calculationMaterialCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriodDataType WithCalculationMaterialCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(CalculationMaterialCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets calculationParameterTypeCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriodDataType WithCalculationParameterTypeCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(CalculationParameterTypeCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets calculationParameterUnitofMeasure.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriodDataType WithCalculationParameterUnitofMeasure(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(CalculationParameterUnitofMeasureJsonPropertyName, value);
    }

    /// <summary>
    /// Sets calculationParameterValue.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriodDataType WithCalculationParameterValue(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(CalculationParameterValueJsonPropertyName, value);
    }

    /// <summary>
    /// Sets emissionOperatingTypeCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriodDataType WithEmissionOperatingTypeCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EmissionOperatingTypeCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets endDate.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriodDataType WithEndDate(in Corvus.Json.JsonDateTime value)
    {
        return this.SetProperty(EndDateJsonPropertyName, value);
    }

    /// <summary>
    /// Sets operatingDetails.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriodDataType WithOperatingDetails(in Caers.Api.SchemaEntities.OperatingDetailsDataType value)
    {
        return this.SetProperty(OperatingDetailsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets reportingPeriodComment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriodDataType WithReportingPeriodComment(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(ReportingPeriodCommentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets reportingPeriodEmissions.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriodDataType WithReportingPeriodEmissions(in Caers.Api.SchemaEntities.ReportingPeriodDataType.EmissionsDataTypeArray value)
    {
        return this.SetProperty(ReportingPeriodEmissionsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets reportingPeriodTypeCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriodDataType WithReportingPeriodTypeCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(ReportingPeriodTypeCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets startDate.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriodDataType WithStartDate(in Corvus.Json.JsonDateTime value)
    {
        return this.SetProperty(StartDateJsonPropertyName, value);
    }

    /// <summary>
    /// Sets supplementalCalculationParameter.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReportingPeriodDataType WithSupplementalCalculationParameter(in Caers.Api.SchemaEntities.ReportingPeriodDataType.SupplementalCalculationParameterDataTypeArray value)
    {
        return this.SetProperty(SupplementalCalculationParameterJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateReportingPeriodEmissions(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.ReportingPeriodDataType.EmissionsDataTypeArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateReportingPeriodTypeCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmissionOperatingTypeCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStartDate(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDateTime>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEndDate(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDateTime>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateCalculationParameterTypeCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateCalculationParameterValue(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateCalculationParameterUnitofMeasure(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateCalculationMaterialCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateCalculationDataYear(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDateTime>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateCalculationDataSource(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateReportingPeriodComment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateOperatingDetails(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.OperatingDetailsDataType>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateSupplementalCalculationParameter(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.ReportingPeriodDataType.SupplementalCalculationParameterDataTypeArray>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(ReportingPeriodEmissionsUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateReportingPeriodEmissions;
                return true;
            }
            else if (property.NameEquals(ReportingPeriodTypeCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateReportingPeriodTypeCode;
                return true;
            }
            else if (property.NameEquals(EmissionOperatingTypeCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionOperatingTypeCode;
                return true;
            }
            else if (property.NameEquals(StartDateUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStartDate;
                return true;
            }
            else if (property.NameEquals(EndDateUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEndDate;
                return true;
            }
            else if (property.NameEquals(CalculationParameterTypeCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationParameterTypeCode;
                return true;
            }
            else if (property.NameEquals(CalculationParameterValueUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationParameterValue;
                return true;
            }
            else if (property.NameEquals(CalculationParameterUnitofMeasureUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationParameterUnitofMeasure;
                return true;
            }
            else if (property.NameEquals(CalculationMaterialCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationMaterialCode;
                return true;
            }
            else if (property.NameEquals(CalculationDataYearUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationDataYear;
                return true;
            }
            else if (property.NameEquals(CalculationDataSourceUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationDataSource;
                return true;
            }
            else if (property.NameEquals(ReportingPeriodCommentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateReportingPeriodComment;
                return true;
            }
            else if (property.NameEquals(OperatingDetailsUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateOperatingDetails;
                return true;
            }
            else if (property.NameEquals(SupplementalCalculationParameterUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateSupplementalCalculationParameter;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(ReportingPeriodEmissionsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateReportingPeriodEmissions;
                return true;
            }
            else if (property.NameEquals(ReportingPeriodTypeCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateReportingPeriodTypeCode;
                return true;
            }
            else if (property.NameEquals(EmissionOperatingTypeCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionOperatingTypeCode;
                return true;
            }
            else if (property.NameEquals(StartDateJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStartDate;
                return true;
            }
            else if (property.NameEquals(EndDateJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEndDate;
                return true;
            }
            else if (property.NameEquals(CalculationParameterTypeCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationParameterTypeCode;
                return true;
            }
            else if (property.NameEquals(CalculationParameterValueJsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationParameterValue;
                return true;
            }
            else if (property.NameEquals(CalculationParameterUnitofMeasureJsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationParameterUnitofMeasure;
                return true;
            }
            else if (property.NameEquals(CalculationMaterialCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationMaterialCode;
                return true;
            }
            else if (property.NameEquals(CalculationDataYearJsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationDataYear;
                return true;
            }
            else if (property.NameEquals(CalculationDataSourceJsonPropertyName))
            {
                propertyValidator = __CorvusValidateCalculationDataSource;
                return true;
            }
            else if (property.NameEquals(ReportingPeriodCommentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateReportingPeriodComment;
                return true;
            }
            else if (property.NameEquals(OperatingDetailsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateOperatingDetails;
                return true;
            }
            else if (property.NameEquals(SupplementalCalculationParameterJsonPropertyName))
            {
                propertyValidator = __CorvusValidateSupplementalCalculationParameter;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}