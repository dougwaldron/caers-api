//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api.SchemaEntities;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct ProcessDataType
{
    /// <summary>
    /// JSON property name for <see cref = "AircraftEngineTypeCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> AircraftEngineTypeCodeUtf8JsonPropertyName => "aircraftEngineTypeCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "AircraftEngineTypeCode"/>.
    /// </summary>
    public const string AircraftEngineTypeCodeJsonPropertyName = "aircraftEngineTypeCode";
    /// <summary>
    /// JSON property name for <see cref = "DeleteReportingPeriod"/>.
    /// </summary>
    public static ReadOnlySpan<byte> DeleteReportingPeriodUtf8JsonPropertyName => "deleteReportingPeriod"u8;

    /// <summary>
    /// JSON property name for <see cref = "DeleteReportingPeriod"/>.
    /// </summary>
    public const string DeleteReportingPeriodJsonPropertyName = "deleteReportingPeriod";
    /// <summary>
    /// JSON property name for <see cref = "EmissionsTypeCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionsTypeCodeUtf8JsonPropertyName => "emissionsTypeCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmissionsTypeCode"/>.
    /// </summary>
    public const string EmissionsTypeCodeJsonPropertyName = "emissionsTypeCode";
    /// <summary>
    /// JSON property name for <see cref = "ProcessComment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ProcessCommentUtf8JsonPropertyName => "processComment"u8;

    /// <summary>
    /// JSON property name for <see cref = "ProcessComment"/>.
    /// </summary>
    public const string ProcessCommentJsonPropertyName = "processComment";
    /// <summary>
    /// JSON property name for <see cref = "ProcessControlApproach"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ProcessControlApproachUtf8JsonPropertyName => "processControlApproach"u8;

    /// <summary>
    /// JSON property name for <see cref = "ProcessControlApproach"/>.
    /// </summary>
    public const string ProcessControlApproachJsonPropertyName = "processControlApproach";
    /// <summary>
    /// JSON property name for <see cref = "ProcessDescription"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ProcessDescriptionUtf8JsonPropertyName => "processDescription"u8;

    /// <summary>
    /// JSON property name for <see cref = "ProcessDescription"/>.
    /// </summary>
    public const string ProcessDescriptionJsonPropertyName = "processDescription";
    /// <summary>
    /// JSON property name for <see cref = "ProcessIdentification"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ProcessIdentificationUtf8JsonPropertyName => "processIdentification"u8;

    /// <summary>
    /// JSON property name for <see cref = "ProcessIdentification"/>.
    /// </summary>
    public const string ProcessIdentificationJsonPropertyName = "processIdentification";
    /// <summary>
    /// JSON property name for <see cref = "ProcessIsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ProcessIsReadOnlyUtf8JsonPropertyName => "processIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "ProcessIsReadOnly"/>.
    /// </summary>
    public const string ProcessIsReadOnlyJsonPropertyName = "processIsReadOnly";
    /// <summary>
    /// JSON property name for <see cref = "ProcessRegulation"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ProcessRegulationUtf8JsonPropertyName => "processRegulation"u8;

    /// <summary>
    /// JSON property name for <see cref = "ProcessRegulation"/>.
    /// </summary>
    public const string ProcessRegulationJsonPropertyName = "processRegulation";
    /// <summary>
    /// JSON property name for <see cref = "ProcessStatusCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ProcessStatusCodeUtf8JsonPropertyName => "processStatusCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "ProcessStatusCode"/>.
    /// </summary>
    public const string ProcessStatusCodeJsonPropertyName = "processStatusCode";
    /// <summary>
    /// JSON property name for <see cref = "ProcessStatusCodeYear"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ProcessStatusCodeYearUtf8JsonPropertyName => "processStatusCodeYear"u8;

    /// <summary>
    /// JSON property name for <see cref = "ProcessStatusCodeYear"/>.
    /// </summary>
    public const string ProcessStatusCodeYearJsonPropertyName = "processStatusCodeYear";
    /// <summary>
    /// JSON property name for <see cref = "ReleasePointApportionment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ReleasePointApportionmentUtf8JsonPropertyName => "releasePointApportionment"u8;

    /// <summary>
    /// JSON property name for <see cref = "ReleasePointApportionment"/>.
    /// </summary>
    public const string ReleasePointApportionmentJsonPropertyName = "releasePointApportionment";
    /// <summary>
    /// JSON property name for <see cref = "ReportingPeriod"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ReportingPeriodUtf8JsonPropertyName => "reportingPeriod"u8;

    /// <summary>
    /// JSON property name for <see cref = "ReportingPeriod"/>.
    /// </summary>
    public const string ReportingPeriodJsonPropertyName = "reportingPeriod";
    /// <summary>
    /// JSON property name for <see cref = "SourceClassificationCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> SourceClassificationCodeUtf8JsonPropertyName => "sourceClassificationCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "SourceClassificationCode"/>.
    /// </summary>
    public const string SourceClassificationCodeJsonPropertyName = "sourceClassificationCode";
    /// <summary>
    /// Gets AircraftEngineTypeCode.
    /// </summary>
    public Corvus.Json.JsonString AircraftEngineTypeCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(AircraftEngineTypeCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(AircraftEngineTypeCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets DeleteReportingPeriod.
    /// </summary>
    public Caers.Api.SchemaEntities.ProcessDataType.DeleteReportingPeriodDataTypeArray DeleteReportingPeriod
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(DeleteReportingPeriodUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.ProcessDataType.DeleteReportingPeriodDataTypeArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(DeleteReportingPeriodJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.ProcessDataType.DeleteReportingPeriodDataTypeArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EmissionsTypeCode.
    /// </summary>
    public Corvus.Json.JsonString EmissionsTypeCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionsTypeCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionsTypeCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ProcessComment.
    /// </summary>
    public Corvus.Json.JsonString ProcessComment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ProcessCommentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ProcessCommentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ProcessControlApproach.
    /// </summary>
    public Caers.Api.SchemaEntities.ControlApproachDataType ProcessControlApproach
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ProcessControlApproachUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.ControlApproachDataType(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ProcessControlApproachJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.ControlApproachDataType>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ProcessDescription.
    /// </summary>
    public Corvus.Json.JsonString ProcessDescription
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ProcessDescriptionUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ProcessDescriptionJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ProcessIdentification.
    /// </summary>
    public Caers.Api.SchemaEntities.ProcessDataType.IdentificationDataTypeArray ProcessIdentification
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ProcessIdentificationUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.ProcessDataType.IdentificationDataTypeArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ProcessIdentificationJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.ProcessDataType.IdentificationDataTypeArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ProcessIsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString ProcessIsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ProcessIsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ProcessIsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ProcessRegulation.
    /// </summary>
    public Caers.Api.SchemaEntities.ProcessDataType.RegulationDataTypeArray ProcessRegulation
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ProcessRegulationUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.ProcessDataType.RegulationDataTypeArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ProcessRegulationJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.ProcessDataType.RegulationDataTypeArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ProcessStatusCode.
    /// </summary>
    public Corvus.Json.JsonString ProcessStatusCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ProcessStatusCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ProcessStatusCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ProcessStatusCodeYear.
    /// </summary>
    public Corvus.Json.JsonDateTime ProcessStatusCodeYear
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ProcessStatusCodeYearUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDateTime(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ProcessStatusCodeYearJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDateTime>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ReleasePointApportionment.
    /// </summary>
    public Caers.Api.SchemaEntities.ProcessDataType.ReleasePointApportionmentDataTypeArray ReleasePointApportionment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ReleasePointApportionmentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.ProcessDataType.ReleasePointApportionmentDataTypeArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ReleasePointApportionmentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.ProcessDataType.ReleasePointApportionmentDataTypeArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ReportingPeriod.
    /// </summary>
    public Caers.Api.SchemaEntities.ProcessDataType.ReportingPeriodDataTypeArray ReportingPeriod
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ReportingPeriodUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.ProcessDataType.ReportingPeriodDataTypeArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ReportingPeriodJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.ProcessDataType.ReportingPeriodDataTypeArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets SourceClassificationCode.
    /// </summary>
    public Corvus.Json.JsonString SourceClassificationCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(SourceClassificationCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(SourceClassificationCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "ProcessDataType"/>.
    /// </summary>
    public static ProcessDataType Create(Corvus.Json.JsonString? aircraftEngineTypeCode = null, Caers.Api.SchemaEntities.ProcessDataType.DeleteReportingPeriodDataTypeArray? deleteReportingPeriod = null, Corvus.Json.JsonString? emissionsTypeCode = null, Corvus.Json.JsonString? processComment = null, Caers.Api.SchemaEntities.ControlApproachDataType? processControlApproach = null, Corvus.Json.JsonString? processDescription = null, Caers.Api.SchemaEntities.ProcessDataType.IdentificationDataTypeArray? processIdentification = null, Corvus.Json.JsonString? processIsReadOnly = null, Caers.Api.SchemaEntities.ProcessDataType.RegulationDataTypeArray? processRegulation = null, Corvus.Json.JsonString? processStatusCode = null, Corvus.Json.JsonDateTime? processStatusCodeYear = null, Caers.Api.SchemaEntities.ProcessDataType.ReleasePointApportionmentDataTypeArray? releasePointApportionment = null, Caers.Api.SchemaEntities.ProcessDataType.ReportingPeriodDataTypeArray? reportingPeriod = null, Corvus.Json.JsonString? sourceClassificationCode = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        if (aircraftEngineTypeCode is Corvus.Json.JsonString aircraftEngineTypeCode__)
        {
            builder.Add(AircraftEngineTypeCodeJsonPropertyName, aircraftEngineTypeCode__.AsAny);
        }

        if (deleteReportingPeriod is Caers.Api.SchemaEntities.ProcessDataType.DeleteReportingPeriodDataTypeArray deleteReportingPeriod__)
        {
            builder.Add(DeleteReportingPeriodJsonPropertyName, deleteReportingPeriod__.AsAny);
        }

        if (emissionsTypeCode is Corvus.Json.JsonString emissionsTypeCode__)
        {
            builder.Add(EmissionsTypeCodeJsonPropertyName, emissionsTypeCode__.AsAny);
        }

        if (processComment is Corvus.Json.JsonString processComment__)
        {
            builder.Add(ProcessCommentJsonPropertyName, processComment__.AsAny);
        }

        if (processControlApproach is Caers.Api.SchemaEntities.ControlApproachDataType processControlApproach__)
        {
            builder.Add(ProcessControlApproachJsonPropertyName, processControlApproach__.AsAny);
        }

        if (processDescription is Corvus.Json.JsonString processDescription__)
        {
            builder.Add(ProcessDescriptionJsonPropertyName, processDescription__.AsAny);
        }

        if (processIdentification is Caers.Api.SchemaEntities.ProcessDataType.IdentificationDataTypeArray processIdentification__)
        {
            builder.Add(ProcessIdentificationJsonPropertyName, processIdentification__.AsAny);
        }

        if (processIsReadOnly is Corvus.Json.JsonString processIsReadOnly__)
        {
            builder.Add(ProcessIsReadOnlyJsonPropertyName, processIsReadOnly__.AsAny);
        }

        if (processRegulation is Caers.Api.SchemaEntities.ProcessDataType.RegulationDataTypeArray processRegulation__)
        {
            builder.Add(ProcessRegulationJsonPropertyName, processRegulation__.AsAny);
        }

        if (processStatusCode is Corvus.Json.JsonString processStatusCode__)
        {
            builder.Add(ProcessStatusCodeJsonPropertyName, processStatusCode__.AsAny);
        }

        if (processStatusCodeYear is Corvus.Json.JsonDateTime processStatusCodeYear__)
        {
            builder.Add(ProcessStatusCodeYearJsonPropertyName, processStatusCodeYear__.AsAny);
        }

        if (releasePointApportionment is Caers.Api.SchemaEntities.ProcessDataType.ReleasePointApportionmentDataTypeArray releasePointApportionment__)
        {
            builder.Add(ReleasePointApportionmentJsonPropertyName, releasePointApportionment__.AsAny);
        }

        if (reportingPeriod is Caers.Api.SchemaEntities.ProcessDataType.ReportingPeriodDataTypeArray reportingPeriod__)
        {
            builder.Add(ReportingPeriodJsonPropertyName, reportingPeriod__.AsAny);
        }

        if (sourceClassificationCode is Corvus.Json.JsonString sourceClassificationCode__)
        {
            builder.Add(SourceClassificationCodeJsonPropertyName, sourceClassificationCode__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets aircraftEngineTypeCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ProcessDataType WithAircraftEngineTypeCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(AircraftEngineTypeCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets deleteReportingPeriod.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ProcessDataType WithDeleteReportingPeriod(in Caers.Api.SchemaEntities.ProcessDataType.DeleteReportingPeriodDataTypeArray value)
    {
        return this.SetProperty(DeleteReportingPeriodJsonPropertyName, value);
    }

    /// <summary>
    /// Sets emissionsTypeCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ProcessDataType WithEmissionsTypeCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EmissionsTypeCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets processComment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ProcessDataType WithProcessComment(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(ProcessCommentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets processControlApproach.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ProcessDataType WithProcessControlApproach(in Caers.Api.SchemaEntities.ControlApproachDataType value)
    {
        return this.SetProperty(ProcessControlApproachJsonPropertyName, value);
    }

    /// <summary>
    /// Sets processDescription.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ProcessDataType WithProcessDescription(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(ProcessDescriptionJsonPropertyName, value);
    }

    /// <summary>
    /// Sets processIdentification.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ProcessDataType WithProcessIdentification(in Caers.Api.SchemaEntities.ProcessDataType.IdentificationDataTypeArray value)
    {
        return this.SetProperty(ProcessIdentificationJsonPropertyName, value);
    }

    /// <summary>
    /// Sets processIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ProcessDataType WithProcessIsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(ProcessIsReadOnlyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets processRegulation.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ProcessDataType WithProcessRegulation(in Caers.Api.SchemaEntities.ProcessDataType.RegulationDataTypeArray value)
    {
        return this.SetProperty(ProcessRegulationJsonPropertyName, value);
    }

    /// <summary>
    /// Sets processStatusCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ProcessDataType WithProcessStatusCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(ProcessStatusCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets processStatusCodeYear.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ProcessDataType WithProcessStatusCodeYear(in Corvus.Json.JsonDateTime value)
    {
        return this.SetProperty(ProcessStatusCodeYearJsonPropertyName, value);
    }

    /// <summary>
    /// Sets releasePointApportionment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ProcessDataType WithReleasePointApportionment(in Caers.Api.SchemaEntities.ProcessDataType.ReleasePointApportionmentDataTypeArray value)
    {
        return this.SetProperty(ReleasePointApportionmentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets reportingPeriod.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ProcessDataType WithReportingPeriod(in Caers.Api.SchemaEntities.ProcessDataType.ReportingPeriodDataTypeArray value)
    {
        return this.SetProperty(ReportingPeriodJsonPropertyName, value);
    }

    /// <summary>
    /// Sets sourceClassificationCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ProcessDataType WithSourceClassificationCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(SourceClassificationCodeJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateSourceClassificationCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmissionsTypeCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateAircraftEngineTypeCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateProcessDescription(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateProcessStatusCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateProcessStatusCodeYear(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDateTime>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateProcessComment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateProcessIsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateProcessIdentification(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.ProcessDataType.IdentificationDataTypeArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateProcessRegulation(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.ProcessDataType.RegulationDataTypeArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateProcessControlApproach(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.ControlApproachDataType>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateDeleteReportingPeriod(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.ProcessDataType.DeleteReportingPeriodDataTypeArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateReportingPeriod(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.ProcessDataType.ReportingPeriodDataTypeArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateReleasePointApportionment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.ProcessDataType.ReleasePointApportionmentDataTypeArray>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(SourceClassificationCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateSourceClassificationCode;
                return true;
            }
            else if (property.NameEquals(EmissionsTypeCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionsTypeCode;
                return true;
            }
            else if (property.NameEquals(AircraftEngineTypeCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateAircraftEngineTypeCode;
                return true;
            }
            else if (property.NameEquals(ProcessDescriptionUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessDescription;
                return true;
            }
            else if (property.NameEquals(ProcessStatusCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessStatusCode;
                return true;
            }
            else if (property.NameEquals(ProcessStatusCodeYearUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessStatusCodeYear;
                return true;
            }
            else if (property.NameEquals(ProcessCommentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessComment;
                return true;
            }
            else if (property.NameEquals(ProcessIsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessIsReadOnly;
                return true;
            }
            else if (property.NameEquals(ProcessIdentificationUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessIdentification;
                return true;
            }
            else if (property.NameEquals(ProcessRegulationUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessRegulation;
                return true;
            }
            else if (property.NameEquals(ProcessControlApproachUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessControlApproach;
                return true;
            }
            else if (property.NameEquals(DeleteReportingPeriodUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateDeleteReportingPeriod;
                return true;
            }
            else if (property.NameEquals(ReportingPeriodUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateReportingPeriod;
                return true;
            }
            else if (property.NameEquals(ReleasePointApportionmentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateReleasePointApportionment;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(SourceClassificationCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateSourceClassificationCode;
                return true;
            }
            else if (property.NameEquals(EmissionsTypeCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionsTypeCode;
                return true;
            }
            else if (property.NameEquals(AircraftEngineTypeCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateAircraftEngineTypeCode;
                return true;
            }
            else if (property.NameEquals(ProcessDescriptionJsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessDescription;
                return true;
            }
            else if (property.NameEquals(ProcessStatusCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessStatusCode;
                return true;
            }
            else if (property.NameEquals(ProcessStatusCodeYearJsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessStatusCodeYear;
                return true;
            }
            else if (property.NameEquals(ProcessCommentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessComment;
                return true;
            }
            else if (property.NameEquals(ProcessIsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessIsReadOnly;
                return true;
            }
            else if (property.NameEquals(ProcessIdentificationJsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessIdentification;
                return true;
            }
            else if (property.NameEquals(ProcessRegulationJsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessRegulation;
                return true;
            }
            else if (property.NameEquals(ProcessControlApproachJsonPropertyName))
            {
                propertyValidator = __CorvusValidateProcessControlApproach;
                return true;
            }
            else if (property.NameEquals(DeleteReportingPeriodJsonPropertyName))
            {
                propertyValidator = __CorvusValidateDeleteReportingPeriod;
                return true;
            }
            else if (property.NameEquals(ReportingPeriodJsonPropertyName))
            {
                propertyValidator = __CorvusValidateReportingPeriod;
                return true;
            }
            else if (property.NameEquals(ReleasePointApportionmentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateReleasePointApportionment;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}