//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api.SchemaEntities;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct Measure
{
    /// <summary>
    /// JSON property name for <see cref = "Unit"/>.
    /// </summary>
    public static ReadOnlySpan<byte> UnitUtf8JsonPropertyName => "unit"u8;

    /// <summary>
    /// JSON property name for <see cref = "Unit"/>.
    /// </summary>
    public const string UnitJsonPropertyName = "unit";
    /// <summary>
    /// JSON property name for <see cref = "Value"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ValueUtf8JsonPropertyName => "value"u8;

    /// <summary>
    /// JSON property name for <see cref = "Value"/>.
    /// </summary>
    public const string ValueJsonPropertyName = "value";
    /// <summary>
    /// Gets Unit.
    /// </summary>
    public Caers.Api.SchemaEntities.MeasureUnit Unit
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(UnitUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.MeasureUnit(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(UnitJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.MeasureUnit>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Value.
    /// </summary>
    public Corvus.Json.JsonNumber Value
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ValueUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonNumber(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ValueJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonNumber>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "Measure"/>.
    /// </summary>
    public static Measure Create(Caers.Api.SchemaEntities.MeasureUnit unit, Corvus.Json.JsonNumber value)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(UnitJsonPropertyName, unit.AsAny);
        builder.Add(ValueJsonPropertyName, value.AsAny);
        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets unit.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Measure WithUnit(in Caers.Api.SchemaEntities.MeasureUnit value)
    {
        return this.SetProperty(UnitJsonPropertyName, value);
    }

    /// <summary>
    /// Sets value.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Measure WithValue(in Corvus.Json.JsonNumber value)
    {
        return this.SetProperty(ValueJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateUnit(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.MeasureUnit>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateValue(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonNumber>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(UnitUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateUnit;
                return true;
            }
            else if (property.NameEquals(ValueUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateValue;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(UnitJsonPropertyName))
            {
                propertyValidator = __CorvusValidateUnit;
                return true;
            }
            else if (property.NameEquals(ValueJsonPropertyName))
            {
                propertyValidator = __CorvusValidateValue;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}