//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api.SchemaEntities;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct FacilitySite
{
    /// <summary>
    /// JSON property name for <see cref = "AlternativeFacilityIdentification"/>.
    /// </summary>
    public static ReadOnlySpan<byte> AlternativeFacilityIdentificationUtf8JsonPropertyName => "alternativeFacilityIdentification"u8;

    /// <summary>
    /// JSON property name for <see cref = "AlternativeFacilityIdentification"/>.
    /// </summary>
    public const string AlternativeFacilityIdentificationJsonPropertyName = "alternativeFacilityIdentification";
    /// <summary>
    /// JSON property name for <see cref = "AlternativeFacilityName"/>.
    /// </summary>
    public static ReadOnlySpan<byte> AlternativeFacilityNameUtf8JsonPropertyName => "alternativeFacilityName"u8;

    /// <summary>
    /// JSON property name for <see cref = "AlternativeFacilityName"/>.
    /// </summary>
    public const string AlternativeFacilityNameJsonPropertyName = "alternativeFacilityName";
    /// <summary>
    /// JSON property name for <see cref = "Comment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CommentUtf8JsonPropertyName => "comment"u8;

    /// <summary>
    /// JSON property name for <see cref = "Comment"/>.
    /// </summary>
    public const string CommentJsonPropertyName = "comment";
    /// <summary>
    /// JSON property name for <see cref = "ConstructionLimitDescription"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ConstructionLimitDescriptionUtf8JsonPropertyName => "constructionLimitDescription"u8;

    /// <summary>
    /// JSON property name for <see cref = "ConstructionLimitDescription"/>.
    /// </summary>
    public const string ConstructionLimitDescriptionJsonPropertyName = "constructionLimitDescription";
    /// <summary>
    /// JSON property name for <see cref = "ControlPaths"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ControlPathsUtf8JsonPropertyName => "controlPaths"u8;

    /// <summary>
    /// JSON property name for <see cref = "ControlPaths"/>.
    /// </summary>
    public const string ControlPathsJsonPropertyName = "controlPaths";
    /// <summary>
    /// JSON property name for <see cref = "Controls"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ControlsUtf8JsonPropertyName => "controls"u8;

    /// <summary>
    /// JSON property name for <see cref = "Controls"/>.
    /// </summary>
    public const string ControlsJsonPropertyName = "controls";
    /// <summary>
    /// JSON property name for <see cref = "CoordinateTolerance"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CoordinateToleranceUtf8JsonPropertyName => "coordinateTolerance"u8;

    /// <summary>
    /// JSON property name for <see cref = "CoordinateTolerance"/>.
    /// </summary>
    public const string CoordinateToleranceJsonPropertyName = "coordinateTolerance";
    /// <summary>
    /// JSON property name for <see cref = "Description"/>.
    /// </summary>
    public static ReadOnlySpan<byte> DescriptionUtf8JsonPropertyName => "description"u8;

    /// <summary>
    /// JSON property name for <see cref = "Description"/>.
    /// </summary>
    public const string DescriptionJsonPropertyName = "description";
    /// <summary>
    /// JSON property name for <see cref = "EisProgramId"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EisProgramIdUtf8JsonPropertyName => "eisProgramId"u8;

    /// <summary>
    /// JSON property name for <see cref = "EisProgramId"/>.
    /// </summary>
    public const string EisProgramIdJsonPropertyName = "eisProgramId";
    /// <summary>
    /// JSON property name for <see cref = "EmissionsUnits"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionsUnitsUtf8JsonPropertyName => "emissionsUnits"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmissionsUnits"/>.
    /// </summary>
    public const string EmissionsUnitsJsonPropertyName = "emissionsUnits";
    /// <summary>
    /// JSON property name for <see cref = "EmployeeCount"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmployeeCountUtf8JsonPropertyName => "employeeCount"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmployeeCount"/>.
    /// </summary>
    public const string EmployeeCountJsonPropertyName = "employeeCount";
    /// <summary>
    /// JSON property name for <see cref = "FacilityCategoryCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FacilityCategoryCodeUtf8JsonPropertyName => "facilityCategoryCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "FacilityCategoryCode"/>.
    /// </summary>
    public const string FacilityCategoryCodeJsonPropertyName = "facilityCategoryCode";
    /// <summary>
    /// JSON property name for <see cref = "FacilityContacts"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FacilityContactsUtf8JsonPropertyName => "facilityContacts"u8;

    /// <summary>
    /// JSON property name for <see cref = "FacilityContacts"/>.
    /// </summary>
    public const string FacilityContactsJsonPropertyName = "facilityContacts";
    /// <summary>
    /// JSON property name for <see cref = "FacilityIdentification"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FacilityIdentificationUtf8JsonPropertyName => "facilityIdentification"u8;

    /// <summary>
    /// JSON property name for <see cref = "FacilityIdentification"/>.
    /// </summary>
    public const string FacilityIdentificationJsonPropertyName = "facilityIdentification";
    /// <summary>
    /// JSON property name for <see cref = "FacilityNACS"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FacilityNACSUtf8JsonPropertyName => "facilityNAICS"u8;

    /// <summary>
    /// JSON property name for <see cref = "FacilityNACS"/>.
    /// </summary>
    public const string FacilityNACSJsonPropertyName = "facilityNAICS";
    /// <summary>
    /// JSON property name for <see cref = "FacilityNameIsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FacilityNameIsReadOnlyUtf8JsonPropertyName => "facilityNameIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "FacilityNameIsReadOnly"/>.
    /// </summary>
    public const string FacilityNameIsReadOnlyJsonPropertyName = "facilityNameIsReadOnly";
    /// <summary>
    /// JSON property name for <see cref = "FacilitySiteAddress"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FacilitySiteAddressUtf8JsonPropertyName => "facilitySiteAddress"u8;

    /// <summary>
    /// JSON property name for <see cref = "FacilitySiteAddress"/>.
    /// </summary>
    public const string FacilitySiteAddressJsonPropertyName = "facilitySiteAddress";
    /// <summary>
    /// JSON property name for <see cref = "FacilitySiteComment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FacilitySiteCommentUtf8JsonPropertyName => "facilitySiteComment"u8;

    /// <summary>
    /// JSON property name for <see cref = "FacilitySiteComment"/>.
    /// </summary>
    public const string FacilitySiteCommentJsonPropertyName = "facilitySiteComment";
    /// <summary>
    /// JSON property name for <see cref = "FacilitySiteGeographicCoordinates"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FacilitySiteGeographicCoordinatesUtf8JsonPropertyName => "facilitySiteGeographicCoordinates"u8;

    /// <summary>
    /// JSON property name for <see cref = "FacilitySiteGeographicCoordinates"/>.
    /// </summary>
    public const string FacilitySiteGeographicCoordinatesJsonPropertyName = "facilitySiteGeographicCoordinates";
    /// <summary>
    /// JSON property name for <see cref = "FacilitySourceTypeCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FacilitySourceTypeCodeUtf8JsonPropertyName => "facilitySourceTypeCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "FacilitySourceTypeCode"/>.
    /// </summary>
    public const string FacilitySourceTypeCodeJsonPropertyName = "facilitySourceTypeCode";
    /// <summary>
    /// JSON property name for <see cref = "HapFacilityCategoryCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> HapFacilityCategoryCodeUtf8JsonPropertyName => "hapFacilityCategoryCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "HapFacilityCategoryCode"/>.
    /// </summary>
    public const string HapFacilityCategoryCodeJsonPropertyName = "hapFacilityCategoryCode";
    /// <summary>
    /// JSON property name for <see cref = "HasSensitiveData"/>.
    /// </summary>
    public static ReadOnlySpan<byte> HasSensitiveDataUtf8JsonPropertyName => "hasSensitiveData"u8;

    /// <summary>
    /// JSON property name for <see cref = "HasSensitiveData"/>.
    /// </summary>
    public const string HasSensitiveDataJsonPropertyName = "hasSensitiveData";
    /// <summary>
    /// JSON property name for <see cref = "IsBillable"/>.
    /// </summary>
    public static ReadOnlySpan<byte> IsBillableUtf8JsonPropertyName => "isBillable"u8;

    /// <summary>
    /// JSON property name for <see cref = "IsBillable"/>.
    /// </summary>
    public const string IsBillableJsonPropertyName = "isBillable";
    /// <summary>
    /// JSON property name for <see cref = "LocationIsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> LocationIsReadOnlyUtf8JsonPropertyName => "locationIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "LocationIsReadOnly"/>.
    /// </summary>
    public const string LocationIsReadOnlyJsonPropertyName = "locationIsReadOnly";
    /// <summary>
    /// JSON property name for <see cref = "MailingAddress"/>.
    /// </summary>
    public static ReadOnlySpan<byte> MailingAddressUtf8JsonPropertyName => "mailingAddress"u8;

    /// <summary>
    /// JSON property name for <see cref = "MailingAddress"/>.
    /// </summary>
    public const string MailingAddressJsonPropertyName = "mailingAddress";
    /// <summary>
    /// JSON property name for <see cref = "MainFacilityIdentification"/>.
    /// </summary>
    public static ReadOnlySpan<byte> MainFacilityIdentificationUtf8JsonPropertyName => "mainFacilityIdentification"u8;

    /// <summary>
    /// JSON property name for <see cref = "MainFacilityIdentification"/>.
    /// </summary>
    public const string MainFacilityIdentificationJsonPropertyName = "mainFacilityIdentification";
    /// <summary>
    /// JSON property name for <see cref = "MainFacilitySiteAddress"/>.
    /// </summary>
    public static ReadOnlySpan<byte> MainFacilitySiteAddressUtf8JsonPropertyName => "mainFacilitySiteAddress"u8;

    /// <summary>
    /// JSON property name for <see cref = "MainFacilitySiteAddress"/>.
    /// </summary>
    public const string MainFacilitySiteAddressJsonPropertyName = "mainFacilitySiteAddress";
    /// <summary>
    /// JSON property name for <see cref = "MaximumTheoreticalEmissions"/>.
    /// </summary>
    public static ReadOnlySpan<byte> MaximumTheoreticalEmissionsUtf8JsonPropertyName => "maximumTheoreticalEmissions"u8;

    /// <summary>
    /// JSON property name for <see cref = "MaximumTheoreticalEmissions"/>.
    /// </summary>
    public const string MaximumTheoreticalEmissionsJsonPropertyName = "maximumTheoreticalEmissions";
    /// <summary>
    /// JSON property name for <see cref = "Name"/>.
    /// </summary>
    public static ReadOnlySpan<byte> NameUtf8JsonPropertyName => "name"u8;

    /// <summary>
    /// JSON property name for <see cref = "Name"/>.
    /// </summary>
    public const string NameJsonPropertyName = "name";
    /// <summary>
    /// JSON property name for <see cref = "PermitNumber"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PermitNumberUtf8JsonPropertyName => "permitNumber"u8;

    /// <summary>
    /// JSON property name for <see cref = "PermitNumber"/>.
    /// </summary>
    public const string PermitNumberJsonPropertyName = "permitNumber";
    /// <summary>
    /// JSON property name for <see cref = "PermitStatusBeginYear"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PermitStatusBeginYearUtf8JsonPropertyName => "permitStatusBeginYear"u8;

    /// <summary>
    /// JSON property name for <see cref = "PermitStatusBeginYear"/>.
    /// </summary>
    public const string PermitStatusBeginYearJsonPropertyName = "permitStatusBeginYear";
    /// <summary>
    /// JSON property name for <see cref = "PermitStatusEndYear"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PermitStatusEndYearUtf8JsonPropertyName => "permitStatusEndYear"u8;

    /// <summary>
    /// JSON property name for <see cref = "PermitStatusEndYear"/>.
    /// </summary>
    public const string PermitStatusEndYearJsonPropertyName = "permitStatusEndYear";
    /// <summary>
    /// JSON property name for <see cref = "PermitTypes"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PermitTypesUtf8JsonPropertyName => "permitTypes"u8;

    /// <summary>
    /// JSON property name for <see cref = "PermitTypes"/>.
    /// </summary>
    public const string PermitTypesJsonPropertyName = "permitTypes";
    /// <summary>
    /// JSON property name for <see cref = "PotentialToEmit"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PotentialToEmitUtf8JsonPropertyName => "potentialToEmit"u8;

    /// <summary>
    /// JSON property name for <see cref = "PotentialToEmit"/>.
    /// </summary>
    public const string PotentialToEmitJsonPropertyName = "potentialToEmit";
    /// <summary>
    /// JSON property name for <see cref = "PrimaryNACSsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PrimaryNACSsReadOnlyUtf8JsonPropertyName => "primaryNAICSIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "PrimaryNACSsReadOnly"/>.
    /// </summary>
    public const string PrimaryNACSsReadOnlyJsonPropertyName = "primaryNAICSIsReadOnly";
    /// <summary>
    /// JSON property name for <see cref = "ReleasePoints"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ReleasePointsUtf8JsonPropertyName => "releasePoints"u8;

    /// <summary>
    /// JSON property name for <see cref = "ReleasePoints"/>.
    /// </summary>
    public const string ReleasePointsJsonPropertyName = "releasePoints";
    /// <summary>
    /// JSON property name for <see cref = "SltFacilityCategoryCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> SltFacilityCategoryCodeUtf8JsonPropertyName => "sltFacilityCategoryCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "SltFacilityCategoryCode"/>.
    /// </summary>
    public const string SltFacilityCategoryCodeJsonPropertyName = "sltFacilityCategoryCode";
    /// <summary>
    /// JSON property name for <see cref = "StatusCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StatusCodeUtf8JsonPropertyName => "statusCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "StatusCode"/>.
    /// </summary>
    public const string StatusCodeJsonPropertyName = "statusCode";
    /// <summary>
    /// JSON property name for <see cref = "StatusCodeYear"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StatusCodeYearUtf8JsonPropertyName => "statusCodeYear"u8;

    /// <summary>
    /// JSON property name for <see cref = "StatusCodeYear"/>.
    /// </summary>
    public const string StatusCodeYearJsonPropertyName = "statusCodeYear";
    /// <summary>
    /// Gets AlternativeFacilityIdentification.
    /// </summary>
    public Caers.Api.SchemaEntities.FacilitySite.AlternativeFacilityIdentificationAlternativeFacilityIdentificationArray AlternativeFacilityIdentification
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(AlternativeFacilityIdentificationUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.FacilitySite.AlternativeFacilityIdentificationAlternativeFacilityIdentificationArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(AlternativeFacilityIdentificationJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.FacilitySite.AlternativeFacilityIdentificationAlternativeFacilityIdentificationArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets AlternativeFacilityName.
    /// </summary>
    public Caers.Api.SchemaEntities.FacilitySite.AlternativeFacilityNameDataTypeArray AlternativeFacilityName
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(AlternativeFacilityNameUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.FacilitySite.AlternativeFacilityNameDataTypeArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(AlternativeFacilityNameJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.FacilitySite.AlternativeFacilityNameDataTypeArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Comment.
    /// </summary>
    public Caers.Api.SchemaEntities.FacilitySite.CommentEntity Comment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CommentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.FacilitySite.CommentEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CommentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.FacilitySite.CommentEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ConstructionLimitDescription.
    /// </summary>
    public Corvus.Json.JsonString ConstructionLimitDescription
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ConstructionLimitDescriptionUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ConstructionLimitDescriptionJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ControlPaths.
    /// </summary>
    public Caers.Api.SchemaEntities.FacilitySite.ControlPathArray ControlPaths
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ControlPathsUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.FacilitySite.ControlPathArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ControlPathsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.FacilitySite.ControlPathArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Controls.
    /// </summary>
    public Caers.Api.SchemaEntities.FacilitySite.ControlArray Controls
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ControlsUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.FacilitySite.ControlArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ControlsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.FacilitySite.ControlArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets CoordinateTolerance.
    /// </summary>
    public Corvus.Json.JsonString CoordinateTolerance
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CoordinateToleranceUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CoordinateToleranceJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Description.
    /// </summary>
    public Caers.Api.SchemaEntities.FacilitySite.DescriptionEntity Description
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.FacilitySite.DescriptionEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.FacilitySite.DescriptionEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EisProgramId.
    /// </summary>
    public Caers.Api.SchemaEntities.FacilitySite.EisProgramIdEntity EisProgramId
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EisProgramIdUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.FacilitySite.EisProgramIdEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EisProgramIdJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.FacilitySite.EisProgramIdEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EmissionsUnits.
    /// </summary>
    public Caers.Api.SchemaEntities.FacilitySite.EmissionsUnitArray EmissionsUnits
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionsUnitsUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.FacilitySite.EmissionsUnitArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionsUnitsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.FacilitySite.EmissionsUnitArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EmployeeCount.
    /// </summary>
    public Corvus.Json.JsonInteger EmployeeCount
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmployeeCountUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmployeeCountJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FacilityCategoryCode.
    /// </summary>
    public Caers.Api.SchemaEntities.FacilitySite.FacilityCategoryCodeEntity FacilityCategoryCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FacilityCategoryCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.FacilitySite.FacilityCategoryCodeEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FacilityCategoryCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.FacilitySite.FacilityCategoryCodeEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FacilityContacts.
    /// </summary>
    public Caers.Api.SchemaEntities.FacilitySite.FacilityContactArray FacilityContacts
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FacilityContactsUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.FacilitySite.FacilityContactArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FacilityContactsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.FacilitySite.FacilityContactArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FacilityIdentification.
    /// </summary>
    public Caers.Api.SchemaEntities.FacilitySite.FacilityIdentificationFacilityIdentificationArray FacilityIdentification
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FacilityIdentificationUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.FacilitySite.FacilityIdentificationFacilityIdentificationArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FacilityIdentificationJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.FacilitySite.FacilityIdentificationFacilityIdentificationArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FacilityNACS.
    /// </summary>
    public Caers.Api.SchemaEntities.FacilitySite.FacilityNACSFacilityNACSArray FacilityNACS
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FacilityNACSUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.FacilitySite.FacilityNACSFacilityNACSArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FacilityNACSJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.FacilitySite.FacilityNACSFacilityNACSArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FacilityNameIsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString FacilityNameIsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FacilityNameIsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FacilityNameIsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FacilitySiteAddress.
    /// </summary>
    public Caers.Api.SchemaEntities.FacilitySite.AddressArray FacilitySiteAddress
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FacilitySiteAddressUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.FacilitySite.AddressArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FacilitySiteAddressJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.FacilitySite.AddressArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FacilitySiteComment.
    /// </summary>
    public Corvus.Json.JsonString FacilitySiteComment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FacilitySiteCommentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FacilitySiteCommentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FacilitySiteGeographicCoordinates.
    /// </summary>
    public Caers.Api.SchemaEntities.GeographicCoordinates FacilitySiteGeographicCoordinates
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FacilitySiteGeographicCoordinatesUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.GeographicCoordinates(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FacilitySiteGeographicCoordinatesJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.GeographicCoordinates>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FacilitySourceTypeCode.
    /// </summary>
    public Caers.Api.SchemaEntities.LookupValue FacilitySourceTypeCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FacilitySourceTypeCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.LookupValue(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FacilitySourceTypeCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.LookupValue>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets HapFacilityCategoryCode.
    /// </summary>
    public Corvus.Json.JsonString HapFacilityCategoryCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(HapFacilityCategoryCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(HapFacilityCategoryCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets HasSensitiveData.
    /// </summary>
    public Corvus.Json.JsonString HasSensitiveData
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(HasSensitiveDataUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(HasSensitiveDataJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets IsBillable.
    /// </summary>
    public Corvus.Json.JsonString IsBillable
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(IsBillableUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(IsBillableJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets LocationIsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString LocationIsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(LocationIsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(LocationIsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MailingAddress.
    /// </summary>
    public Caers.Api.SchemaEntities.Address MailingAddress
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MailingAddressUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Address(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MailingAddressJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Address>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MainFacilityIdentification.
    /// </summary>
    public Caers.Api.SchemaEntities.FacilityIdentification MainFacilityIdentification
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MainFacilityIdentificationUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.FacilityIdentification(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MainFacilityIdentificationJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.FacilityIdentification>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MainFacilitySiteAddress.
    /// </summary>
    public Caers.Api.SchemaEntities.Address MainFacilitySiteAddress
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MainFacilitySiteAddressUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Address(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MainFacilitySiteAddressJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Address>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MaximumTheoreticalEmissions.
    /// </summary>
    public Caers.Api.SchemaEntities.Measure MaximumTheoreticalEmissions
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MaximumTheoreticalEmissionsUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Measure(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MaximumTheoreticalEmissionsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Measure>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Name.
    /// </summary>
    public Caers.Api.SchemaEntities.FacilitySite.NameEntity Name
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(NameUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.FacilitySite.NameEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(NameJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.FacilitySite.NameEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PermitNumber.
    /// </summary>
    public Corvus.Json.JsonString PermitNumber
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PermitNumberUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PermitNumberJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PermitStatusBeginYear.
    /// </summary>
    public Corvus.Json.JsonDate PermitStatusBeginYear
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PermitStatusBeginYearUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDate(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PermitStatusBeginYearJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDate>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PermitStatusEndYear.
    /// </summary>
    public Corvus.Json.JsonDate PermitStatusEndYear
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PermitStatusEndYearUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDate(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PermitStatusEndYearJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDate>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PermitTypes.
    /// </summary>
    public Caers.Api.SchemaEntities.FacilitySite.JsonStringArray PermitTypes
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PermitTypesUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.FacilitySite.JsonStringArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PermitTypesJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.FacilitySite.JsonStringArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PotentialToEmit.
    /// </summary>
    public Caers.Api.SchemaEntities.Measure PotentialToEmit
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PotentialToEmitUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Measure(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PotentialToEmitJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Measure>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PrimaryNACSsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString PrimaryNACSsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PrimaryNACSsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PrimaryNACSsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ReleasePoints.
    /// </summary>
    public Caers.Api.SchemaEntities.FacilitySite.ReleasePointArray ReleasePoints
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ReleasePointsUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.FacilitySite.ReleasePointArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ReleasePointsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.FacilitySite.ReleasePointArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets SltFacilityCategoryCode.
    /// </summary>
    public Corvus.Json.JsonString SltFacilityCategoryCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(SltFacilityCategoryCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(SltFacilityCategoryCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StatusCode.
    /// </summary>
    public Caers.Api.SchemaEntities.LookupValue StatusCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StatusCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.LookupValue(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StatusCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.LookupValue>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StatusCodeYear.
    /// </summary>
    public Corvus.Json.JsonInteger StatusCodeYear
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StatusCodeYearUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StatusCodeYearJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "FacilitySite"/>.
    /// </summary>
    public static FacilitySite Create(Caers.Api.SchemaEntities.Address mailingAddress, Caers.Api.SchemaEntities.FacilitySite.NameEntity name, Caers.Api.SchemaEntities.LookupValue statusCode, Corvus.Json.JsonInteger statusCodeYear, Caers.Api.SchemaEntities.FacilitySite.AlternativeFacilityIdentificationAlternativeFacilityIdentificationArray? alternativeFacilityIdentification = null, Caers.Api.SchemaEntities.FacilitySite.AlternativeFacilityNameDataTypeArray? alternativeFacilityName = null, Caers.Api.SchemaEntities.FacilitySite.CommentEntity? comment = null, Corvus.Json.JsonString? constructionLimitDescription = null, Caers.Api.SchemaEntities.FacilitySite.ControlPathArray? controlPaths = null, Caers.Api.SchemaEntities.FacilitySite.ControlArray? controls = null, Corvus.Json.JsonString? coordinateTolerance = null, Caers.Api.SchemaEntities.FacilitySite.DescriptionEntity? description = null, Caers.Api.SchemaEntities.FacilitySite.EisProgramIdEntity? eisProgramId = null, Caers.Api.SchemaEntities.FacilitySite.EmissionsUnitArray? emissionsUnits = null, Corvus.Json.JsonInteger? employeeCount = null, Caers.Api.SchemaEntities.FacilitySite.FacilityCategoryCodeEntity? facilityCategoryCode = null, Caers.Api.SchemaEntities.FacilitySite.FacilityContactArray? facilityContacts = null, Caers.Api.SchemaEntities.FacilitySite.FacilityIdentificationFacilityIdentificationArray? facilityIdentification = null, Caers.Api.SchemaEntities.FacilitySite.FacilityNACSFacilityNACSArray? facilityNAS = null, Corvus.Json.JsonString? facilityNameIsReadOnly = null, Caers.Api.SchemaEntities.FacilitySite.AddressArray? facilitySiteAddress = null, Corvus.Json.JsonString? facilitySiteComment = null, Caers.Api.SchemaEntities.GeographicCoordinates? facilitySiteGeographicCoordinates = null, Caers.Api.SchemaEntities.LookupValue? facilitySourceTypeCode = null, Corvus.Json.JsonString? hapFacilityCategoryCode = null, Corvus.Json.JsonString? hasSensitiveData = null, Corvus.Json.JsonString? isBillable = null, Corvus.Json.JsonString? locationIsReadOnly = null, Caers.Api.SchemaEntities.FacilityIdentification? mainFacilityIdentification = null, Caers.Api.SchemaEntities.Address? mainFacilitySiteAddress = null, Caers.Api.SchemaEntities.Measure? maximumTheoreticalEmissions = null, Corvus.Json.JsonString? permitNumber = null, Corvus.Json.JsonDate? permitStatusBeginYear = null, Corvus.Json.JsonDate? permitStatusEndYear = null, Caers.Api.SchemaEntities.FacilitySite.JsonStringArray? permitTypes = null, Caers.Api.SchemaEntities.Measure? potentialToEmit = null, Corvus.Json.JsonString? primaryNASsReadOnly = null, Caers.Api.SchemaEntities.FacilitySite.ReleasePointArray? releasePoints = null, Corvus.Json.JsonString? sltFacilityCategoryCode = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(MailingAddressJsonPropertyName, mailingAddress.AsAny);
        builder.Add(NameJsonPropertyName, name.AsAny);
        builder.Add(StatusCodeJsonPropertyName, statusCode.AsAny);
        builder.Add(StatusCodeYearJsonPropertyName, statusCodeYear.AsAny);
        if (alternativeFacilityIdentification is Caers.Api.SchemaEntities.FacilitySite.AlternativeFacilityIdentificationAlternativeFacilityIdentificationArray alternativeFacilityIdentification__)
        {
            builder.Add(AlternativeFacilityIdentificationJsonPropertyName, alternativeFacilityIdentification__.AsAny);
        }

        if (alternativeFacilityName is Caers.Api.SchemaEntities.FacilitySite.AlternativeFacilityNameDataTypeArray alternativeFacilityName__)
        {
            builder.Add(AlternativeFacilityNameJsonPropertyName, alternativeFacilityName__.AsAny);
        }

        if (comment is Caers.Api.SchemaEntities.FacilitySite.CommentEntity comment__)
        {
            builder.Add(CommentJsonPropertyName, comment__.AsAny);
        }

        if (constructionLimitDescription is Corvus.Json.JsonString constructionLimitDescription__)
        {
            builder.Add(ConstructionLimitDescriptionJsonPropertyName, constructionLimitDescription__.AsAny);
        }

        if (controlPaths is Caers.Api.SchemaEntities.FacilitySite.ControlPathArray controlPaths__)
        {
            builder.Add(ControlPathsJsonPropertyName, controlPaths__.AsAny);
        }

        if (controls is Caers.Api.SchemaEntities.FacilitySite.ControlArray controls__)
        {
            builder.Add(ControlsJsonPropertyName, controls__.AsAny);
        }

        if (coordinateTolerance is Corvus.Json.JsonString coordinateTolerance__)
        {
            builder.Add(CoordinateToleranceJsonPropertyName, coordinateTolerance__.AsAny);
        }

        if (description is Caers.Api.SchemaEntities.FacilitySite.DescriptionEntity description__)
        {
            builder.Add(DescriptionJsonPropertyName, description__.AsAny);
        }

        if (eisProgramId is Caers.Api.SchemaEntities.FacilitySite.EisProgramIdEntity eisProgramId__)
        {
            builder.Add(EisProgramIdJsonPropertyName, eisProgramId__.AsAny);
        }

        if (emissionsUnits is Caers.Api.SchemaEntities.FacilitySite.EmissionsUnitArray emissionsUnits__)
        {
            builder.Add(EmissionsUnitsJsonPropertyName, emissionsUnits__.AsAny);
        }

        if (employeeCount is Corvus.Json.JsonInteger employeeCount__)
        {
            builder.Add(EmployeeCountJsonPropertyName, employeeCount__.AsAny);
        }

        if (facilityCategoryCode is Caers.Api.SchemaEntities.FacilitySite.FacilityCategoryCodeEntity facilityCategoryCode__)
        {
            builder.Add(FacilityCategoryCodeJsonPropertyName, facilityCategoryCode__.AsAny);
        }

        if (facilityContacts is Caers.Api.SchemaEntities.FacilitySite.FacilityContactArray facilityContacts__)
        {
            builder.Add(FacilityContactsJsonPropertyName, facilityContacts__.AsAny);
        }

        if (facilityIdentification is Caers.Api.SchemaEntities.FacilitySite.FacilityIdentificationFacilityIdentificationArray facilityIdentification__)
        {
            builder.Add(FacilityIdentificationJsonPropertyName, facilityIdentification__.AsAny);
        }

        if (facilityNAS is Caers.Api.SchemaEntities.FacilitySite.FacilityNACSFacilityNACSArray facilityNAS__)
        {
            builder.Add(FacilityNACSJsonPropertyName, facilityNAS__.AsAny);
        }

        if (facilityNameIsReadOnly is Corvus.Json.JsonString facilityNameIsReadOnly__)
        {
            builder.Add(FacilityNameIsReadOnlyJsonPropertyName, facilityNameIsReadOnly__.AsAny);
        }

        if (facilitySiteAddress is Caers.Api.SchemaEntities.FacilitySite.AddressArray facilitySiteAddress__)
        {
            builder.Add(FacilitySiteAddressJsonPropertyName, facilitySiteAddress__.AsAny);
        }

        if (facilitySiteComment is Corvus.Json.JsonString facilitySiteComment__)
        {
            builder.Add(FacilitySiteCommentJsonPropertyName, facilitySiteComment__.AsAny);
        }

        if (facilitySiteGeographicCoordinates is Caers.Api.SchemaEntities.GeographicCoordinates facilitySiteGeographicCoordinates__)
        {
            builder.Add(FacilitySiteGeographicCoordinatesJsonPropertyName, facilitySiteGeographicCoordinates__.AsAny);
        }

        if (facilitySourceTypeCode is Caers.Api.SchemaEntities.LookupValue facilitySourceTypeCode__)
        {
            builder.Add(FacilitySourceTypeCodeJsonPropertyName, facilitySourceTypeCode__.AsAny);
        }

        if (hapFacilityCategoryCode is Corvus.Json.JsonString hapFacilityCategoryCode__)
        {
            builder.Add(HapFacilityCategoryCodeJsonPropertyName, hapFacilityCategoryCode__.AsAny);
        }

        if (hasSensitiveData is Corvus.Json.JsonString hasSensitiveData__)
        {
            builder.Add(HasSensitiveDataJsonPropertyName, hasSensitiveData__.AsAny);
        }

        if (isBillable is Corvus.Json.JsonString isBillable__)
        {
            builder.Add(IsBillableJsonPropertyName, isBillable__.AsAny);
        }

        if (locationIsReadOnly is Corvus.Json.JsonString locationIsReadOnly__)
        {
            builder.Add(LocationIsReadOnlyJsonPropertyName, locationIsReadOnly__.AsAny);
        }

        if (mainFacilityIdentification is Caers.Api.SchemaEntities.FacilityIdentification mainFacilityIdentification__)
        {
            builder.Add(MainFacilityIdentificationJsonPropertyName, mainFacilityIdentification__.AsAny);
        }

        if (mainFacilitySiteAddress is Caers.Api.SchemaEntities.Address mainFacilitySiteAddress__)
        {
            builder.Add(MainFacilitySiteAddressJsonPropertyName, mainFacilitySiteAddress__.AsAny);
        }

        if (maximumTheoreticalEmissions is Caers.Api.SchemaEntities.Measure maximumTheoreticalEmissions__)
        {
            builder.Add(MaximumTheoreticalEmissionsJsonPropertyName, maximumTheoreticalEmissions__.AsAny);
        }

        if (permitNumber is Corvus.Json.JsonString permitNumber__)
        {
            builder.Add(PermitNumberJsonPropertyName, permitNumber__.AsAny);
        }

        if (permitStatusBeginYear is Corvus.Json.JsonDate permitStatusBeginYear__)
        {
            builder.Add(PermitStatusBeginYearJsonPropertyName, permitStatusBeginYear__.AsAny);
        }

        if (permitStatusEndYear is Corvus.Json.JsonDate permitStatusEndYear__)
        {
            builder.Add(PermitStatusEndYearJsonPropertyName, permitStatusEndYear__.AsAny);
        }

        if (permitTypes is Caers.Api.SchemaEntities.FacilitySite.JsonStringArray permitTypes__)
        {
            builder.Add(PermitTypesJsonPropertyName, permitTypes__.AsAny);
        }

        if (potentialToEmit is Caers.Api.SchemaEntities.Measure potentialToEmit__)
        {
            builder.Add(PotentialToEmitJsonPropertyName, potentialToEmit__.AsAny);
        }

        if (primaryNASsReadOnly is Corvus.Json.JsonString primaryNASsReadOnly__)
        {
            builder.Add(PrimaryNACSsReadOnlyJsonPropertyName, primaryNASsReadOnly__.AsAny);
        }

        if (releasePoints is Caers.Api.SchemaEntities.FacilitySite.ReleasePointArray releasePoints__)
        {
            builder.Add(ReleasePointsJsonPropertyName, releasePoints__.AsAny);
        }

        if (sltFacilityCategoryCode is Corvus.Json.JsonString sltFacilityCategoryCode__)
        {
            builder.Add(SltFacilityCategoryCodeJsonPropertyName, sltFacilityCategoryCode__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets alternativeFacilityIdentification.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithAlternativeFacilityIdentification(in Caers.Api.SchemaEntities.FacilitySite.AlternativeFacilityIdentificationAlternativeFacilityIdentificationArray value)
    {
        return this.SetProperty(AlternativeFacilityIdentificationJsonPropertyName, value);
    }

    /// <summary>
    /// Sets alternativeFacilityName.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithAlternativeFacilityName(in Caers.Api.SchemaEntities.FacilitySite.AlternativeFacilityNameDataTypeArray value)
    {
        return this.SetProperty(AlternativeFacilityNameJsonPropertyName, value);
    }

    /// <summary>
    /// Sets comment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithComment(in Caers.Api.SchemaEntities.FacilitySite.CommentEntity value)
    {
        return this.SetProperty(CommentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets constructionLimitDescription.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithConstructionLimitDescription(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(ConstructionLimitDescriptionJsonPropertyName, value);
    }

    /// <summary>
    /// Sets controlPaths.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithControlPaths(in Caers.Api.SchemaEntities.FacilitySite.ControlPathArray value)
    {
        return this.SetProperty(ControlPathsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets controls.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithControls(in Caers.Api.SchemaEntities.FacilitySite.ControlArray value)
    {
        return this.SetProperty(ControlsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets coordinateTolerance.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithCoordinateTolerance(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(CoordinateToleranceJsonPropertyName, value);
    }

    /// <summary>
    /// Sets description.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithDescription(in Caers.Api.SchemaEntities.FacilitySite.DescriptionEntity value)
    {
        return this.SetProperty(DescriptionJsonPropertyName, value);
    }

    /// <summary>
    /// Sets eisProgramId.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithEisProgramId(in Caers.Api.SchemaEntities.FacilitySite.EisProgramIdEntity value)
    {
        return this.SetProperty(EisProgramIdJsonPropertyName, value);
    }

    /// <summary>
    /// Sets emissionsUnits.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithEmissionsUnits(in Caers.Api.SchemaEntities.FacilitySite.EmissionsUnitArray value)
    {
        return this.SetProperty(EmissionsUnitsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets employeeCount.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithEmployeeCount(in Corvus.Json.JsonInteger value)
    {
        return this.SetProperty(EmployeeCountJsonPropertyName, value);
    }

    /// <summary>
    /// Sets facilityCategoryCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithFacilityCategoryCode(in Caers.Api.SchemaEntities.FacilitySite.FacilityCategoryCodeEntity value)
    {
        return this.SetProperty(FacilityCategoryCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets facilityContacts.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithFacilityContacts(in Caers.Api.SchemaEntities.FacilitySite.FacilityContactArray value)
    {
        return this.SetProperty(FacilityContactsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets facilityIdentification.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithFacilityIdentification(in Caers.Api.SchemaEntities.FacilitySite.FacilityIdentificationFacilityIdentificationArray value)
    {
        return this.SetProperty(FacilityIdentificationJsonPropertyName, value);
    }

    /// <summary>
    /// Sets facilityNAICS.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithFacilityNACS(in Caers.Api.SchemaEntities.FacilitySite.FacilityNACSFacilityNACSArray value)
    {
        return this.SetProperty(FacilityNACSJsonPropertyName, value);
    }

    /// <summary>
    /// Sets facilityNameIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithFacilityNameIsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(FacilityNameIsReadOnlyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets facilitySiteAddress.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithFacilitySiteAddress(in Caers.Api.SchemaEntities.FacilitySite.AddressArray value)
    {
        return this.SetProperty(FacilitySiteAddressJsonPropertyName, value);
    }

    /// <summary>
    /// Sets facilitySiteComment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithFacilitySiteComment(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(FacilitySiteCommentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets facilitySiteGeographicCoordinates.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithFacilitySiteGeographicCoordinates(in Caers.Api.SchemaEntities.GeographicCoordinates value)
    {
        return this.SetProperty(FacilitySiteGeographicCoordinatesJsonPropertyName, value);
    }

    /// <summary>
    /// Sets facilitySourceTypeCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithFacilitySourceTypeCode(in Caers.Api.SchemaEntities.LookupValue value)
    {
        return this.SetProperty(FacilitySourceTypeCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets hapFacilityCategoryCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithHapFacilityCategoryCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(HapFacilityCategoryCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets hasSensitiveData.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithHasSensitiveData(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(HasSensitiveDataJsonPropertyName, value);
    }

    /// <summary>
    /// Sets isBillable.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithIsBillable(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(IsBillableJsonPropertyName, value);
    }

    /// <summary>
    /// Sets locationIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithLocationIsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(LocationIsReadOnlyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets mailingAddress.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithMailingAddress(in Caers.Api.SchemaEntities.Address value)
    {
        return this.SetProperty(MailingAddressJsonPropertyName, value);
    }

    /// <summary>
    /// Sets mainFacilityIdentification.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithMainFacilityIdentification(in Caers.Api.SchemaEntities.FacilityIdentification value)
    {
        return this.SetProperty(MainFacilityIdentificationJsonPropertyName, value);
    }

    /// <summary>
    /// Sets mainFacilitySiteAddress.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithMainFacilitySiteAddress(in Caers.Api.SchemaEntities.Address value)
    {
        return this.SetProperty(MainFacilitySiteAddressJsonPropertyName, value);
    }

    /// <summary>
    /// Sets maximumTheoreticalEmissions.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithMaximumTheoreticalEmissions(in Caers.Api.SchemaEntities.Measure value)
    {
        return this.SetProperty(MaximumTheoreticalEmissionsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets name.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithName(in Caers.Api.SchemaEntities.FacilitySite.NameEntity value)
    {
        return this.SetProperty(NameJsonPropertyName, value);
    }

    /// <summary>
    /// Sets permitNumber.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithPermitNumber(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(PermitNumberJsonPropertyName, value);
    }

    /// <summary>
    /// Sets permitStatusBeginYear.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithPermitStatusBeginYear(in Corvus.Json.JsonDate value)
    {
        return this.SetProperty(PermitStatusBeginYearJsonPropertyName, value);
    }

    /// <summary>
    /// Sets permitStatusEndYear.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithPermitStatusEndYear(in Corvus.Json.JsonDate value)
    {
        return this.SetProperty(PermitStatusEndYearJsonPropertyName, value);
    }

    /// <summary>
    /// Sets permitTypes.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithPermitTypes(in Caers.Api.SchemaEntities.FacilitySite.JsonStringArray value)
    {
        return this.SetProperty(PermitTypesJsonPropertyName, value);
    }

    /// <summary>
    /// Sets potentialToEmit.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithPotentialToEmit(in Caers.Api.SchemaEntities.Measure value)
    {
        return this.SetProperty(PotentialToEmitJsonPropertyName, value);
    }

    /// <summary>
    /// Sets primaryNAICSIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithPrimaryNACSsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(PrimaryNACSsReadOnlyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets releasePoints.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithReleasePoints(in Caers.Api.SchemaEntities.FacilitySite.ReleasePointArray value)
    {
        return this.SetProperty(ReleasePointsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets sltFacilityCategoryCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithSltFacilityCategoryCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(SltFacilityCategoryCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets statusCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithStatusCode(in Caers.Api.SchemaEntities.LookupValue value)
    {
        return this.SetProperty(StatusCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets statusCodeYear.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public FacilitySite WithStatusCodeYear(in Corvus.Json.JsonInteger value)
    {
        return this.SetProperty(StatusCodeYearJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateMailingAddress(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Address>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateName(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.FacilitySite.NameEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStatusCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.LookupValue>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStatusCodeYear(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonInteger>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEisProgramId(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.FacilitySite.EisProgramIdEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateComment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.FacilitySite.CommentEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFacilityCategoryCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.FacilitySite.FacilityCategoryCodeEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateDescription(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.FacilitySite.DescriptionEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFacilitySourceTypeCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.LookupValue>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFacilityIdentification(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.FacilitySite.FacilityIdentificationFacilityIdentificationArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateAlternativeFacilityIdentification(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.FacilitySite.AlternativeFacilityIdentificationAlternativeFacilityIdentificationArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateAlternativeFacilityName(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.FacilitySite.AlternativeFacilityNameDataTypeArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFacilitySiteAddress(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.FacilitySite.AddressArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFacilitySiteGeographicCoordinates(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.GeographicCoordinates>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmissionsUnits(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.FacilitySite.EmissionsUnitArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateReleasePoints(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.FacilitySite.ReleasePointArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateControlPaths(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.FacilitySite.ControlPathArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateControls(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.FacilitySite.ControlArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFacilityNACS(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.FacilitySite.FacilityNACSFacilityNACSArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFacilityContacts(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.FacilitySite.FacilityContactArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateHapFacilityCategoryCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateCoordinateTolerance(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFacilitySiteComment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFacilityNameIsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateLocationIsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePrimaryNACSsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePermitStatusBeginYear(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDate>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePermitStatusEndYear(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDate>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMaximumTheoreticalEmissions(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Measure>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePotentialToEmit(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Measure>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateIsBillable(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateHasSensitiveData(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePermitNumber(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePermitTypes(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.FacilitySite.JsonStringArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmployeeCount(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonInteger>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateConstructionLimitDescription(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateSltFacilityCategoryCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMainFacilitySiteAddress(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Address>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMainFacilityIdentification(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.FacilityIdentification>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(MailingAddressUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateMailingAddress;
                return true;
            }
            else if (property.NameEquals(NameUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateName;
                return true;
            }
            else if (property.NameEquals(StatusCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStatusCode;
                return true;
            }
            else if (property.NameEquals(StatusCodeYearUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStatusCodeYear;
                return true;
            }
            else if (property.NameEquals(EisProgramIdUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEisProgramId;
                return true;
            }
            else if (property.NameEquals(CommentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateComment;
                return true;
            }
            else if (property.NameEquals(FacilityCategoryCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFacilityCategoryCode;
                return true;
            }
            else if (property.NameEquals(DescriptionUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateDescription;
                return true;
            }
            else if (property.NameEquals(FacilitySourceTypeCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFacilitySourceTypeCode;
                return true;
            }
            else if (property.NameEquals(FacilityIdentificationUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFacilityIdentification;
                return true;
            }
            else if (property.NameEquals(AlternativeFacilityIdentificationUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateAlternativeFacilityIdentification;
                return true;
            }
            else if (property.NameEquals(AlternativeFacilityNameUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateAlternativeFacilityName;
                return true;
            }
            else if (property.NameEquals(FacilitySiteAddressUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFacilitySiteAddress;
                return true;
            }
            else if (property.NameEquals(FacilitySiteGeographicCoordinatesUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFacilitySiteGeographicCoordinates;
                return true;
            }
            else if (property.NameEquals(EmissionsUnitsUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionsUnits;
                return true;
            }
            else if (property.NameEquals(ReleasePointsUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateReleasePoints;
                return true;
            }
            else if (property.NameEquals(ControlPathsUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlPaths;
                return true;
            }
            else if (property.NameEquals(ControlsUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateControls;
                return true;
            }
            else if (property.NameEquals(FacilityNACSUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFacilityNACS;
                return true;
            }
            else if (property.NameEquals(FacilityContactsUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFacilityContacts;
                return true;
            }
            else if (property.NameEquals(HapFacilityCategoryCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateHapFacilityCategoryCode;
                return true;
            }
            else if (property.NameEquals(CoordinateToleranceUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateCoordinateTolerance;
                return true;
            }
            else if (property.NameEquals(FacilitySiteCommentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFacilitySiteComment;
                return true;
            }
            else if (property.NameEquals(FacilityNameIsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFacilityNameIsReadOnly;
                return true;
            }
            else if (property.NameEquals(LocationIsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateLocationIsReadOnly;
                return true;
            }
            else if (property.NameEquals(PrimaryNACSsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePrimaryNACSsReadOnly;
                return true;
            }
            else if (property.NameEquals(PermitStatusBeginYearUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitStatusBeginYear;
                return true;
            }
            else if (property.NameEquals(PermitStatusEndYearUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitStatusEndYear;
                return true;
            }
            else if (property.NameEquals(MaximumTheoreticalEmissionsUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateMaximumTheoreticalEmissions;
                return true;
            }
            else if (property.NameEquals(PotentialToEmitUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePotentialToEmit;
                return true;
            }
            else if (property.NameEquals(IsBillableUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateIsBillable;
                return true;
            }
            else if (property.NameEquals(HasSensitiveDataUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateHasSensitiveData;
                return true;
            }
            else if (property.NameEquals(PermitNumberUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitNumber;
                return true;
            }
            else if (property.NameEquals(PermitTypesUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitTypes;
                return true;
            }
            else if (property.NameEquals(EmployeeCountUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmployeeCount;
                return true;
            }
            else if (property.NameEquals(ConstructionLimitDescriptionUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateConstructionLimitDescription;
                return true;
            }
            else if (property.NameEquals(SltFacilityCategoryCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateSltFacilityCategoryCode;
                return true;
            }
            else if (property.NameEquals(MainFacilitySiteAddressUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateMainFacilitySiteAddress;
                return true;
            }
            else if (property.NameEquals(MainFacilityIdentificationUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateMainFacilityIdentification;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(MailingAddressJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMailingAddress;
                return true;
            }
            else if (property.NameEquals(NameJsonPropertyName))
            {
                propertyValidator = __CorvusValidateName;
                return true;
            }
            else if (property.NameEquals(StatusCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStatusCode;
                return true;
            }
            else if (property.NameEquals(StatusCodeYearJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStatusCodeYear;
                return true;
            }
            else if (property.NameEquals(EisProgramIdJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEisProgramId;
                return true;
            }
            else if (property.NameEquals(CommentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateComment;
                return true;
            }
            else if (property.NameEquals(FacilityCategoryCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFacilityCategoryCode;
                return true;
            }
            else if (property.NameEquals(DescriptionJsonPropertyName))
            {
                propertyValidator = __CorvusValidateDescription;
                return true;
            }
            else if (property.NameEquals(FacilitySourceTypeCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFacilitySourceTypeCode;
                return true;
            }
            else if (property.NameEquals(FacilityIdentificationJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFacilityIdentification;
                return true;
            }
            else if (property.NameEquals(AlternativeFacilityIdentificationJsonPropertyName))
            {
                propertyValidator = __CorvusValidateAlternativeFacilityIdentification;
                return true;
            }
            else if (property.NameEquals(AlternativeFacilityNameJsonPropertyName))
            {
                propertyValidator = __CorvusValidateAlternativeFacilityName;
                return true;
            }
            else if (property.NameEquals(FacilitySiteAddressJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFacilitySiteAddress;
                return true;
            }
            else if (property.NameEquals(FacilitySiteGeographicCoordinatesJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFacilitySiteGeographicCoordinates;
                return true;
            }
            else if (property.NameEquals(EmissionsUnitsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionsUnits;
                return true;
            }
            else if (property.NameEquals(ReleasePointsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateReleasePoints;
                return true;
            }
            else if (property.NameEquals(ControlPathsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateControlPaths;
                return true;
            }
            else if (property.NameEquals(ControlsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateControls;
                return true;
            }
            else if (property.NameEquals(FacilityNACSJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFacilityNACS;
                return true;
            }
            else if (property.NameEquals(FacilityContactsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFacilityContacts;
                return true;
            }
            else if (property.NameEquals(HapFacilityCategoryCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateHapFacilityCategoryCode;
                return true;
            }
            else if (property.NameEquals(CoordinateToleranceJsonPropertyName))
            {
                propertyValidator = __CorvusValidateCoordinateTolerance;
                return true;
            }
            else if (property.NameEquals(FacilitySiteCommentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFacilitySiteComment;
                return true;
            }
            else if (property.NameEquals(FacilityNameIsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFacilityNameIsReadOnly;
                return true;
            }
            else if (property.NameEquals(LocationIsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidateLocationIsReadOnly;
                return true;
            }
            else if (property.NameEquals(PrimaryNACSsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePrimaryNACSsReadOnly;
                return true;
            }
            else if (property.NameEquals(PermitStatusBeginYearJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitStatusBeginYear;
                return true;
            }
            else if (property.NameEquals(PermitStatusEndYearJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitStatusEndYear;
                return true;
            }
            else if (property.NameEquals(MaximumTheoreticalEmissionsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMaximumTheoreticalEmissions;
                return true;
            }
            else if (property.NameEquals(PotentialToEmitJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePotentialToEmit;
                return true;
            }
            else if (property.NameEquals(IsBillableJsonPropertyName))
            {
                propertyValidator = __CorvusValidateIsBillable;
                return true;
            }
            else if (property.NameEquals(HasSensitiveDataJsonPropertyName))
            {
                propertyValidator = __CorvusValidateHasSensitiveData;
                return true;
            }
            else if (property.NameEquals(PermitNumberJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitNumber;
                return true;
            }
            else if (property.NameEquals(PermitTypesJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitTypes;
                return true;
            }
            else if (property.NameEquals(EmployeeCountJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmployeeCount;
                return true;
            }
            else if (property.NameEquals(ConstructionLimitDescriptionJsonPropertyName))
            {
                propertyValidator = __CorvusValidateConstructionLimitDescription;
                return true;
            }
            else if (property.NameEquals(SltFacilityCategoryCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateSltFacilityCategoryCode;
                return true;
            }
            else if (property.NameEquals(MainFacilitySiteAddressJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMainFacilitySiteAddress;
                return true;
            }
            else if (property.NameEquals(MainFacilityIdentificationJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMainFacilityIdentification;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}