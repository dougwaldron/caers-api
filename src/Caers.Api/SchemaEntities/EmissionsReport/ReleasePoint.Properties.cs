//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api.SchemaEntities;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct ReleasePoint
{
    /// <summary>
    /// JSON property name for <see cref = "BypassFlag"/>.
    /// </summary>
    public static ReadOnlySpan<byte> BypassFlagUtf8JsonPropertyName => "bypassFlag"u8;

    /// <summary>
    /// JSON property name for <see cref = "BypassFlag"/>.
    /// </summary>
    public const string BypassFlagJsonPropertyName = "bypassFlag";
    /// <summary>
    /// JSON property name for <see cref = "Comment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> CommentUtf8JsonPropertyName => "comment"u8;

    /// <summary>
    /// JSON property name for <see cref = "Comment"/>.
    /// </summary>
    public const string CommentJsonPropertyName = "comment";
    /// <summary>
    /// JSON property name for <see cref = "Description"/>.
    /// </summary>
    public static ReadOnlySpan<byte> DescriptionUtf8JsonPropertyName => "description"u8;

    /// <summary>
    /// JSON property name for <see cref = "Description"/>.
    /// </summary>
    public const string DescriptionJsonPropertyName = "description";
    /// <summary>
    /// JSON property name for <see cref = "ExhaustMoisturePercent"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ExhaustMoisturePercentUtf8JsonPropertyName => "exhaustMoisturePercent"u8;

    /// <summary>
    /// JSON property name for <see cref = "ExhaustMoisturePercent"/>.
    /// </summary>
    public const string ExhaustMoisturePercentJsonPropertyName = "exhaustMoisturePercent";
    /// <summary>
    /// JSON property name for <see cref = "ExitGasFlowRate"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ExitGasFlowRateUtf8JsonPropertyName => "exitGasFlowRate"u8;

    /// <summary>
    /// JSON property name for <see cref = "ExitGasFlowRate"/>.
    /// </summary>
    public const string ExitGasFlowRateJsonPropertyName = "exitGasFlowRate";
    /// <summary>
    /// JSON property name for <see cref = "ExitGasFlowRateIsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ExitGasFlowRateIsReadOnlyUtf8JsonPropertyName => "exitGasFlowRateIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "ExitGasFlowRateIsReadOnly"/>.
    /// </summary>
    public const string ExitGasFlowRateIsReadOnlyJsonPropertyName = "exitGasFlowRateIsReadOnly";
    /// <summary>
    /// JSON property name for <see cref = "ExitGasTemperature"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ExitGasTemperatureUtf8JsonPropertyName => "exitGasTemperature"u8;

    /// <summary>
    /// JSON property name for <see cref = "ExitGasTemperature"/>.
    /// </summary>
    public const string ExitGasTemperatureJsonPropertyName = "exitGasTemperature";
    /// <summary>
    /// JSON property name for <see cref = "ExitGasTemperatureAmbient"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ExitGasTemperatureAmbientUtf8JsonPropertyName => "exitGasTemperatureAmbient"u8;

    /// <summary>
    /// JSON property name for <see cref = "ExitGasTemperatureAmbient"/>.
    /// </summary>
    public const string ExitGasTemperatureAmbientJsonPropertyName = "exitGasTemperatureAmbient";
    /// <summary>
    /// JSON property name for <see cref = "ExitGasTemperatureIsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ExitGasTemperatureIsReadOnlyUtf8JsonPropertyName => "exitGasTemperatureIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "ExitGasTemperatureIsReadOnly"/>.
    /// </summary>
    public const string ExitGasTemperatureIsReadOnlyJsonPropertyName = "exitGasTemperatureIsReadOnly";
    /// <summary>
    /// JSON property name for <see cref = "ExitGasVelocity"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ExitGasVelocityUtf8JsonPropertyName => "exitGasVelocity"u8;

    /// <summary>
    /// JSON property name for <see cref = "ExitGasVelocity"/>.
    /// </summary>
    public const string ExitGasVelocityJsonPropertyName = "exitGasVelocity";
    /// <summary>
    /// JSON property name for <see cref = "ExitGasVelocityIsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ExitGasVelocityIsReadOnlyUtf8JsonPropertyName => "exitGasVelocityIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "ExitGasVelocityIsReadOnly"/>.
    /// </summary>
    public const string ExitGasVelocityIsReadOnlyJsonPropertyName = "exitGasVelocityIsReadOnly";
    /// <summary>
    /// JSON property name for <see cref = "FenceLineDistance"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FenceLineDistanceUtf8JsonPropertyName => "fenceLineDistance"u8;

    /// <summary>
    /// JSON property name for <see cref = "FenceLineDistance"/>.
    /// </summary>
    public const string FenceLineDistanceJsonPropertyName = "fenceLineDistance";
    /// <summary>
    /// JSON property name for <see cref = "FugitiveAngle"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FugitiveAngleUtf8JsonPropertyName => "fugitiveAngle"u8;

    /// <summary>
    /// JSON property name for <see cref = "FugitiveAngle"/>.
    /// </summary>
    public const string FugitiveAngleJsonPropertyName = "fugitiveAngle";
    /// <summary>
    /// JSON property name for <see cref = "FugitiveHeight"/>.
    /// </summary>
    public static ReadOnlySpan<byte> FugitiveHeightUtf8JsonPropertyName => "fugitiveHeight"u8;

    /// <summary>
    /// JSON property name for <see cref = "FugitiveHeight"/>.
    /// </summary>
    public const string FugitiveHeightJsonPropertyName = "fugitiveHeight";
    /// <summary>
    /// JSON property name for <see cref = "Identification"/>.
    /// </summary>
    public static ReadOnlySpan<byte> IdentificationUtf8JsonPropertyName => "identification"u8;

    /// <summary>
    /// JSON property name for <see cref = "Identification"/>.
    /// </summary>
    public const string IdentificationJsonPropertyName = "identification";
    /// <summary>
    /// JSON property name for <see cref = "LengthIsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> LengthIsReadOnlyUtf8JsonPropertyName => "lengthIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "LengthIsReadOnly"/>.
    /// </summary>
    public const string LengthIsReadOnlyJsonPropertyName = "lengthIsReadOnly";
    /// <summary>
    /// JSON property name for <see cref = "MainIdentification"/>.
    /// </summary>
    public static ReadOnlySpan<byte> MainIdentificationUtf8JsonPropertyName => "mainIdentification"u8;

    /// <summary>
    /// JSON property name for <see cref = "MainIdentification"/>.
    /// </summary>
    public const string MainIdentificationJsonPropertyName = "mainIdentification";
    /// <summary>
    /// JSON property name for <see cref = "PermitStatusBeginYear"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PermitStatusBeginYearUtf8JsonPropertyName => "permitStatusBeginYear"u8;

    /// <summary>
    /// JSON property name for <see cref = "PermitStatusBeginYear"/>.
    /// </summary>
    public const string PermitStatusBeginYearJsonPropertyName = "permitStatusBeginYear";
    /// <summary>
    /// JSON property name for <see cref = "PermitStatusEndYear"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PermitStatusEndYearUtf8JsonPropertyName => "permitStatusEndYear"u8;

    /// <summary>
    /// JSON property name for <see cref = "PermitStatusEndYear"/>.
    /// </summary>
    public const string PermitStatusEndYearJsonPropertyName = "permitStatusEndYear";
    /// <summary>
    /// JSON property name for <see cref = "ReleasePointGeographicCoordinates"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ReleasePointGeographicCoordinatesUtf8JsonPropertyName => "releasePointGeographicCoordinates"u8;

    /// <summary>
    /// JSON property name for <see cref = "ReleasePointGeographicCoordinates"/>.
    /// </summary>
    public const string ReleasePointGeographicCoordinatesJsonPropertyName = "releasePointGeographicCoordinates";
    /// <summary>
    /// JSON property name for <see cref = "ReleasePointIsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ReleasePointIsReadOnlyUtf8JsonPropertyName => "releasePointIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "ReleasePointIsReadOnly"/>.
    /// </summary>
    public const string ReleasePointIsReadOnlyJsonPropertyName = "releasePointIsReadOnly";
    /// <summary>
    /// JSON property name for <see cref = "ReleasePointTypeCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> ReleasePointTypeCodeUtf8JsonPropertyName => "releasePointTypeCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "ReleasePointTypeCode"/>.
    /// </summary>
    public const string ReleasePointTypeCodeJsonPropertyName = "releasePointTypeCode";
    /// <summary>
    /// JSON property name for <see cref = "StackDiameter"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StackDiameterUtf8JsonPropertyName => "stackDiameter"u8;

    /// <summary>
    /// JSON property name for <see cref = "StackDiameter"/>.
    /// </summary>
    public const string StackDiameterJsonPropertyName = "stackDiameter";
    /// <summary>
    /// JSON property name for <see cref = "StackDiameterIsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StackDiameterIsReadOnlyUtf8JsonPropertyName => "stackDiameterIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "StackDiameterIsReadOnly"/>.
    /// </summary>
    public const string StackDiameterIsReadOnlyJsonPropertyName = "stackDiameterIsReadOnly";
    /// <summary>
    /// JSON property name for <see cref = "StackHeight"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StackHeightUtf8JsonPropertyName => "stackHeight"u8;

    /// <summary>
    /// JSON property name for <see cref = "StackHeight"/>.
    /// </summary>
    public const string StackHeightJsonPropertyName = "stackHeight";
    /// <summary>
    /// JSON property name for <see cref = "StackHeightIsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StackHeightIsReadOnlyUtf8JsonPropertyName => "stackHeightIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "StackHeightIsReadOnly"/>.
    /// </summary>
    public const string StackHeightIsReadOnlyJsonPropertyName = "stackHeightIsReadOnly";
    /// <summary>
    /// JSON property name for <see cref = "StackLength"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StackLengthUtf8JsonPropertyName => "stackLength"u8;

    /// <summary>
    /// JSON property name for <see cref = "StackLength"/>.
    /// </summary>
    public const string StackLengthJsonPropertyName = "stackLength";
    /// <summary>
    /// JSON property name for <see cref = "StackWidth"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StackWidthUtf8JsonPropertyName => "stackWidth"u8;

    /// <summary>
    /// JSON property name for <see cref = "StackWidth"/>.
    /// </summary>
    public const string StackWidthJsonPropertyName = "stackWidth";
    /// <summary>
    /// JSON property name for <see cref = "StatusCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StatusCodeUtf8JsonPropertyName => "statusCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "StatusCode"/>.
    /// </summary>
    public const string StatusCodeJsonPropertyName = "statusCode";
    /// <summary>
    /// JSON property name for <see cref = "StatusCodeYear"/>.
    /// </summary>
    public static ReadOnlySpan<byte> StatusCodeYearUtf8JsonPropertyName => "statusCodeYear"u8;

    /// <summary>
    /// JSON property name for <see cref = "StatusCodeYear"/>.
    /// </summary>
    public const string StatusCodeYearJsonPropertyName = "statusCodeYear";
    /// <summary>
    /// JSON property name for <see cref = "WidthIsReadOnly"/>.
    /// </summary>
    public static ReadOnlySpan<byte> WidthIsReadOnlyUtf8JsonPropertyName => "widthIsReadOnly"u8;

    /// <summary>
    /// JSON property name for <see cref = "WidthIsReadOnly"/>.
    /// </summary>
    public const string WidthIsReadOnlyJsonPropertyName = "widthIsReadOnly";
    /// <summary>
    /// Gets BypassFlag.
    /// </summary>
    public Corvus.Json.JsonString BypassFlag
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(BypassFlagUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(BypassFlagJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Comment.
    /// </summary>
    public Caers.Api.SchemaEntities.ReleasePoint.CommentEntity Comment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CommentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.ReleasePoint.CommentEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CommentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.ReleasePoint.CommentEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Description.
    /// </summary>
    public Caers.Api.SchemaEntities.ReleasePoint.DescriptionEntity Description
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(DescriptionUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.ReleasePoint.DescriptionEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(DescriptionJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.ReleasePoint.DescriptionEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ExhaustMoisturePercent.
    /// </summary>
    public Corvus.Json.JsonNumber ExhaustMoisturePercent
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ExhaustMoisturePercentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonNumber(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ExhaustMoisturePercentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonNumber>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ExitGasFlowRate.
    /// </summary>
    public Caers.Api.SchemaEntities.Measure ExitGasFlowRate
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ExitGasFlowRateUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Measure(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ExitGasFlowRateJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Measure>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ExitGasFlowRateIsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString ExitGasFlowRateIsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ExitGasFlowRateIsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ExitGasFlowRateIsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ExitGasTemperature.
    /// </summary>
    public Caers.Api.SchemaEntities.ReleasePoint.ExitGasTemperatureEntity ExitGasTemperature
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ExitGasTemperatureUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.ReleasePoint.ExitGasTemperatureEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ExitGasTemperatureJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.ReleasePoint.ExitGasTemperatureEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ExitGasTemperatureAmbient.
    /// </summary>
    public Corvus.Json.JsonString ExitGasTemperatureAmbient
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ExitGasTemperatureAmbientUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ExitGasTemperatureAmbientJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ExitGasTemperatureIsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString ExitGasTemperatureIsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ExitGasTemperatureIsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ExitGasTemperatureIsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ExitGasVelocity.
    /// </summary>
    public Caers.Api.SchemaEntities.Measure ExitGasVelocity
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ExitGasVelocityUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Measure(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ExitGasVelocityJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Measure>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ExitGasVelocityIsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString ExitGasVelocityIsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ExitGasVelocityIsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ExitGasVelocityIsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FenceLineDistance.
    /// </summary>
    public Caers.Api.SchemaEntities.Measure FenceLineDistance
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FenceLineDistanceUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Measure(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FenceLineDistanceJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Measure>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FugitiveAngle.
    /// </summary>
    public Caers.Api.SchemaEntities.ReleasePoint.FugitiveAngleEntity FugitiveAngle
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FugitiveAngleUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.ReleasePoint.FugitiveAngleEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FugitiveAngleJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.ReleasePoint.FugitiveAngleEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FugitiveHeight.
    /// </summary>
    public Caers.Api.SchemaEntities.Measure FugitiveHeight
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FugitiveHeightUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Measure(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FugitiveHeightJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Measure>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Identification.
    /// </summary>
    public Caers.Api.SchemaEntities.ReleasePoint.IdentificationIdentificationArray Identification
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(IdentificationUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.ReleasePoint.IdentificationIdentificationArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(IdentificationJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.ReleasePoint.IdentificationIdentificationArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets LengthIsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString LengthIsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(LengthIsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(LengthIsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MainIdentification.
    /// </summary>
    public Caers.Api.SchemaEntities.Identification MainIdentification
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MainIdentificationUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Identification(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MainIdentificationJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Identification>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PermitStatusBeginYear.
    /// </summary>
    public Corvus.Json.JsonDate PermitStatusBeginYear
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PermitStatusBeginYearUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDate(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PermitStatusBeginYearJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDate>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PermitStatusEndYear.
    /// </summary>
    public Corvus.Json.JsonDate PermitStatusEndYear
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PermitStatusEndYearUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonDate(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PermitStatusEndYearJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDate>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ReleasePointGeographicCoordinates.
    /// </summary>
    public Caers.Api.SchemaEntities.GeographicCoordinates ReleasePointGeographicCoordinates
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ReleasePointGeographicCoordinatesUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.GeographicCoordinates(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ReleasePointGeographicCoordinatesJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.GeographicCoordinates>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ReleasePointIsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString ReleasePointIsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ReleasePointIsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ReleasePointIsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ReleasePointTypeCode.
    /// </summary>
    public Caers.Api.SchemaEntities.LookupValue ReleasePointTypeCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ReleasePointTypeCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.LookupValue(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ReleasePointTypeCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.LookupValue>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StackDiameter.
    /// </summary>
    public Caers.Api.SchemaEntities.Measure StackDiameter
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StackDiameterUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Measure(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StackDiameterJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Measure>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StackDiameterIsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString StackDiameterIsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StackDiameterIsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StackDiameterIsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StackHeight.
    /// </summary>
    public Caers.Api.SchemaEntities.Measure StackHeight
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StackHeightUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Measure(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StackHeightJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Measure>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StackHeightIsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString StackHeightIsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StackHeightIsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StackHeightIsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StackLength.
    /// </summary>
    public Caers.Api.SchemaEntities.Measure StackLength
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StackLengthUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Measure(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StackLengthJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Measure>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StackWidth.
    /// </summary>
    public Caers.Api.SchemaEntities.Measure StackWidth
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StackWidthUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.Measure(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StackWidthJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.Measure>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StatusCode.
    /// </summary>
    public Caers.Api.SchemaEntities.LookupValue StatusCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StatusCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Caers.Api.SchemaEntities.LookupValue(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StatusCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Caers.Api.SchemaEntities.LookupValue>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StatusCodeYear.
    /// </summary>
    public Corvus.Json.JsonInteger StatusCodeYear
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StatusCodeYearUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StatusCodeYearJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets WidthIsReadOnly.
    /// </summary>
    public Corvus.Json.JsonString WidthIsReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(WidthIsReadOnlyUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(WidthIsReadOnlyJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "ReleasePoint"/>.
    /// </summary>
    public static ReleasePoint Create(Caers.Api.SchemaEntities.LookupValue releasePointTypeCode, Corvus.Json.JsonString? bypassFlag = null, Caers.Api.SchemaEntities.ReleasePoint.CommentEntity? comment = null, Caers.Api.SchemaEntities.ReleasePoint.DescriptionEntity? description = null, Corvus.Json.JsonNumber? exhaustMoisturePercent = null, Caers.Api.SchemaEntities.Measure? exitGasFlowRate = null, Corvus.Json.JsonString? exitGasFlowRateIsReadOnly = null, Caers.Api.SchemaEntities.ReleasePoint.ExitGasTemperatureEntity? exitGasTemperature = null, Corvus.Json.JsonString? exitGasTemperatureAmbient = null, Corvus.Json.JsonString? exitGasTemperatureIsReadOnly = null, Caers.Api.SchemaEntities.Measure? exitGasVelocity = null, Corvus.Json.JsonString? exitGasVelocityIsReadOnly = null, Caers.Api.SchemaEntities.Measure? fenceLineDistance = null, Caers.Api.SchemaEntities.ReleasePoint.FugitiveAngleEntity? fugitiveAngle = null, Caers.Api.SchemaEntities.Measure? fugitiveHeight = null, Caers.Api.SchemaEntities.ReleasePoint.IdentificationIdentificationArray? identification = null, Corvus.Json.JsonString? lengthIsReadOnly = null, Caers.Api.SchemaEntities.Identification? mainIdentification = null, Corvus.Json.JsonDate? permitStatusBeginYear = null, Corvus.Json.JsonDate? permitStatusEndYear = null, Caers.Api.SchemaEntities.GeographicCoordinates? releasePointGeographicCoordinates = null, Corvus.Json.JsonString? releasePointIsReadOnly = null, Caers.Api.SchemaEntities.Measure? stackDiameter = null, Corvus.Json.JsonString? stackDiameterIsReadOnly = null, Caers.Api.SchemaEntities.Measure? stackHeight = null, Corvus.Json.JsonString? stackHeightIsReadOnly = null, Caers.Api.SchemaEntities.Measure? stackLength = null, Caers.Api.SchemaEntities.Measure? stackWidth = null, Caers.Api.SchemaEntities.LookupValue? statusCode = null, Corvus.Json.JsonInteger? statusCodeYear = null, Corvus.Json.JsonString? widthIsReadOnly = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(ReleasePointTypeCodeJsonPropertyName, releasePointTypeCode.AsAny);
        if (bypassFlag is Corvus.Json.JsonString bypassFlag__)
        {
            builder.Add(BypassFlagJsonPropertyName, bypassFlag__.AsAny);
        }

        if (comment is Caers.Api.SchemaEntities.ReleasePoint.CommentEntity comment__)
        {
            builder.Add(CommentJsonPropertyName, comment__.AsAny);
        }

        if (description is Caers.Api.SchemaEntities.ReleasePoint.DescriptionEntity description__)
        {
            builder.Add(DescriptionJsonPropertyName, description__.AsAny);
        }

        if (exhaustMoisturePercent is Corvus.Json.JsonNumber exhaustMoisturePercent__)
        {
            builder.Add(ExhaustMoisturePercentJsonPropertyName, exhaustMoisturePercent__.AsAny);
        }

        if (exitGasFlowRate is Caers.Api.SchemaEntities.Measure exitGasFlowRate__)
        {
            builder.Add(ExitGasFlowRateJsonPropertyName, exitGasFlowRate__.AsAny);
        }

        if (exitGasFlowRateIsReadOnly is Corvus.Json.JsonString exitGasFlowRateIsReadOnly__)
        {
            builder.Add(ExitGasFlowRateIsReadOnlyJsonPropertyName, exitGasFlowRateIsReadOnly__.AsAny);
        }

        if (exitGasTemperature is Caers.Api.SchemaEntities.ReleasePoint.ExitGasTemperatureEntity exitGasTemperature__)
        {
            builder.Add(ExitGasTemperatureJsonPropertyName, exitGasTemperature__.AsAny);
        }

        if (exitGasTemperatureAmbient is Corvus.Json.JsonString exitGasTemperatureAmbient__)
        {
            builder.Add(ExitGasTemperatureAmbientJsonPropertyName, exitGasTemperatureAmbient__.AsAny);
        }

        if (exitGasTemperatureIsReadOnly is Corvus.Json.JsonString exitGasTemperatureIsReadOnly__)
        {
            builder.Add(ExitGasTemperatureIsReadOnlyJsonPropertyName, exitGasTemperatureIsReadOnly__.AsAny);
        }

        if (exitGasVelocity is Caers.Api.SchemaEntities.Measure exitGasVelocity__)
        {
            builder.Add(ExitGasVelocityJsonPropertyName, exitGasVelocity__.AsAny);
        }

        if (exitGasVelocityIsReadOnly is Corvus.Json.JsonString exitGasVelocityIsReadOnly__)
        {
            builder.Add(ExitGasVelocityIsReadOnlyJsonPropertyName, exitGasVelocityIsReadOnly__.AsAny);
        }

        if (fenceLineDistance is Caers.Api.SchemaEntities.Measure fenceLineDistance__)
        {
            builder.Add(FenceLineDistanceJsonPropertyName, fenceLineDistance__.AsAny);
        }

        if (fugitiveAngle is Caers.Api.SchemaEntities.ReleasePoint.FugitiveAngleEntity fugitiveAngle__)
        {
            builder.Add(FugitiveAngleJsonPropertyName, fugitiveAngle__.AsAny);
        }

        if (fugitiveHeight is Caers.Api.SchemaEntities.Measure fugitiveHeight__)
        {
            builder.Add(FugitiveHeightJsonPropertyName, fugitiveHeight__.AsAny);
        }

        if (identification is Caers.Api.SchemaEntities.ReleasePoint.IdentificationIdentificationArray identification__)
        {
            builder.Add(IdentificationJsonPropertyName, identification__.AsAny);
        }

        if (lengthIsReadOnly is Corvus.Json.JsonString lengthIsReadOnly__)
        {
            builder.Add(LengthIsReadOnlyJsonPropertyName, lengthIsReadOnly__.AsAny);
        }

        if (mainIdentification is Caers.Api.SchemaEntities.Identification mainIdentification__)
        {
            builder.Add(MainIdentificationJsonPropertyName, mainIdentification__.AsAny);
        }

        if (permitStatusBeginYear is Corvus.Json.JsonDate permitStatusBeginYear__)
        {
            builder.Add(PermitStatusBeginYearJsonPropertyName, permitStatusBeginYear__.AsAny);
        }

        if (permitStatusEndYear is Corvus.Json.JsonDate permitStatusEndYear__)
        {
            builder.Add(PermitStatusEndYearJsonPropertyName, permitStatusEndYear__.AsAny);
        }

        if (releasePointGeographicCoordinates is Caers.Api.SchemaEntities.GeographicCoordinates releasePointGeographicCoordinates__)
        {
            builder.Add(ReleasePointGeographicCoordinatesJsonPropertyName, releasePointGeographicCoordinates__.AsAny);
        }

        if (releasePointIsReadOnly is Corvus.Json.JsonString releasePointIsReadOnly__)
        {
            builder.Add(ReleasePointIsReadOnlyJsonPropertyName, releasePointIsReadOnly__.AsAny);
        }

        if (stackDiameter is Caers.Api.SchemaEntities.Measure stackDiameter__)
        {
            builder.Add(StackDiameterJsonPropertyName, stackDiameter__.AsAny);
        }

        if (stackDiameterIsReadOnly is Corvus.Json.JsonString stackDiameterIsReadOnly__)
        {
            builder.Add(StackDiameterIsReadOnlyJsonPropertyName, stackDiameterIsReadOnly__.AsAny);
        }

        if (stackHeight is Caers.Api.SchemaEntities.Measure stackHeight__)
        {
            builder.Add(StackHeightJsonPropertyName, stackHeight__.AsAny);
        }

        if (stackHeightIsReadOnly is Corvus.Json.JsonString stackHeightIsReadOnly__)
        {
            builder.Add(StackHeightIsReadOnlyJsonPropertyName, stackHeightIsReadOnly__.AsAny);
        }

        if (stackLength is Caers.Api.SchemaEntities.Measure stackLength__)
        {
            builder.Add(StackLengthJsonPropertyName, stackLength__.AsAny);
        }

        if (stackWidth is Caers.Api.SchemaEntities.Measure stackWidth__)
        {
            builder.Add(StackWidthJsonPropertyName, stackWidth__.AsAny);
        }

        if (statusCode is Caers.Api.SchemaEntities.LookupValue statusCode__)
        {
            builder.Add(StatusCodeJsonPropertyName, statusCode__.AsAny);
        }

        if (statusCodeYear is Corvus.Json.JsonInteger statusCodeYear__)
        {
            builder.Add(StatusCodeYearJsonPropertyName, statusCodeYear__.AsAny);
        }

        if (widthIsReadOnly is Corvus.Json.JsonString widthIsReadOnly__)
        {
            builder.Add(WidthIsReadOnlyJsonPropertyName, widthIsReadOnly__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets bypassFlag.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithBypassFlag(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(BypassFlagJsonPropertyName, value);
    }

    /// <summary>
    /// Sets comment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithComment(in Caers.Api.SchemaEntities.ReleasePoint.CommentEntity value)
    {
        return this.SetProperty(CommentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets description.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithDescription(in Caers.Api.SchemaEntities.ReleasePoint.DescriptionEntity value)
    {
        return this.SetProperty(DescriptionJsonPropertyName, value);
    }

    /// <summary>
    /// Sets exhaustMoisturePercent.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithExhaustMoisturePercent(in Corvus.Json.JsonNumber value)
    {
        return this.SetProperty(ExhaustMoisturePercentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets exitGasFlowRate.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithExitGasFlowRate(in Caers.Api.SchemaEntities.Measure value)
    {
        return this.SetProperty(ExitGasFlowRateJsonPropertyName, value);
    }

    /// <summary>
    /// Sets exitGasFlowRateIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithExitGasFlowRateIsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(ExitGasFlowRateIsReadOnlyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets exitGasTemperature.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithExitGasTemperature(in Caers.Api.SchemaEntities.ReleasePoint.ExitGasTemperatureEntity value)
    {
        return this.SetProperty(ExitGasTemperatureJsonPropertyName, value);
    }

    /// <summary>
    /// Sets exitGasTemperatureAmbient.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithExitGasTemperatureAmbient(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(ExitGasTemperatureAmbientJsonPropertyName, value);
    }

    /// <summary>
    /// Sets exitGasTemperatureIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithExitGasTemperatureIsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(ExitGasTemperatureIsReadOnlyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets exitGasVelocity.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithExitGasVelocity(in Caers.Api.SchemaEntities.Measure value)
    {
        return this.SetProperty(ExitGasVelocityJsonPropertyName, value);
    }

    /// <summary>
    /// Sets exitGasVelocityIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithExitGasVelocityIsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(ExitGasVelocityIsReadOnlyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets fenceLineDistance.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithFenceLineDistance(in Caers.Api.SchemaEntities.Measure value)
    {
        return this.SetProperty(FenceLineDistanceJsonPropertyName, value);
    }

    /// <summary>
    /// Sets fugitiveAngle.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithFugitiveAngle(in Caers.Api.SchemaEntities.ReleasePoint.FugitiveAngleEntity value)
    {
        return this.SetProperty(FugitiveAngleJsonPropertyName, value);
    }

    /// <summary>
    /// Sets fugitiveHeight.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithFugitiveHeight(in Caers.Api.SchemaEntities.Measure value)
    {
        return this.SetProperty(FugitiveHeightJsonPropertyName, value);
    }

    /// <summary>
    /// Sets identification.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithIdentification(in Caers.Api.SchemaEntities.ReleasePoint.IdentificationIdentificationArray value)
    {
        return this.SetProperty(IdentificationJsonPropertyName, value);
    }

    /// <summary>
    /// Sets lengthIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithLengthIsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(LengthIsReadOnlyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets mainIdentification.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithMainIdentification(in Caers.Api.SchemaEntities.Identification value)
    {
        return this.SetProperty(MainIdentificationJsonPropertyName, value);
    }

    /// <summary>
    /// Sets permitStatusBeginYear.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithPermitStatusBeginYear(in Corvus.Json.JsonDate value)
    {
        return this.SetProperty(PermitStatusBeginYearJsonPropertyName, value);
    }

    /// <summary>
    /// Sets permitStatusEndYear.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithPermitStatusEndYear(in Corvus.Json.JsonDate value)
    {
        return this.SetProperty(PermitStatusEndYearJsonPropertyName, value);
    }

    /// <summary>
    /// Sets releasePointGeographicCoordinates.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithReleasePointGeographicCoordinates(in Caers.Api.SchemaEntities.GeographicCoordinates value)
    {
        return this.SetProperty(ReleasePointGeographicCoordinatesJsonPropertyName, value);
    }

    /// <summary>
    /// Sets releasePointIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithReleasePointIsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(ReleasePointIsReadOnlyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets releasePointTypeCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithReleasePointTypeCode(in Caers.Api.SchemaEntities.LookupValue value)
    {
        return this.SetProperty(ReleasePointTypeCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets stackDiameter.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithStackDiameter(in Caers.Api.SchemaEntities.Measure value)
    {
        return this.SetProperty(StackDiameterJsonPropertyName, value);
    }

    /// <summary>
    /// Sets stackDiameterIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithStackDiameterIsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(StackDiameterIsReadOnlyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets stackHeight.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithStackHeight(in Caers.Api.SchemaEntities.Measure value)
    {
        return this.SetProperty(StackHeightJsonPropertyName, value);
    }

    /// <summary>
    /// Sets stackHeightIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithStackHeightIsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(StackHeightIsReadOnlyJsonPropertyName, value);
    }

    /// <summary>
    /// Sets stackLength.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithStackLength(in Caers.Api.SchemaEntities.Measure value)
    {
        return this.SetProperty(StackLengthJsonPropertyName, value);
    }

    /// <summary>
    /// Sets stackWidth.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithStackWidth(in Caers.Api.SchemaEntities.Measure value)
    {
        return this.SetProperty(StackWidthJsonPropertyName, value);
    }

    /// <summary>
    /// Sets statusCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithStatusCode(in Caers.Api.SchemaEntities.LookupValue value)
    {
        return this.SetProperty(StatusCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets statusCodeYear.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithStatusCodeYear(in Corvus.Json.JsonInteger value)
    {
        return this.SetProperty(StatusCodeYearJsonPropertyName, value);
    }

    /// <summary>
    /// Sets widthIsReadOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ReleasePoint WithWidthIsReadOnly(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(WidthIsReadOnlyJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateReleasePointTypeCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.LookupValue>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateIdentification(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.ReleasePoint.IdentificationIdentificationArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateDescription(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.ReleasePoint.DescriptionEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStatusCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.LookupValue>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStatusCodeYear(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonInteger>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateComment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.ReleasePoint.CommentEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateExitGasFlowRate(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Measure>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateExitGasTemperature(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.ReleasePoint.ExitGasTemperatureEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateExitGasVelocity(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Measure>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFenceLineDistance(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Measure>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFugitiveAngle(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.ReleasePoint.FugitiveAngleEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFugitiveHeight(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Measure>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStackDiameter(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Measure>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStackHeight(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Measure>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStackWidth(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Measure>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStackLength(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Measure>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateReleasePointGeographicCoordinates(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.GeographicCoordinates>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateReleasePointIsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStackHeightIsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStackDiameterIsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateWidthIsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateLengthIsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateExitGasVelocityIsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateExitGasFlowRateIsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateExitGasTemperatureIsReadOnly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePermitStatusBeginYear(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDate>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePermitStatusEndYear(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDate>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateExitGasTemperatureAmbient(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateExhaustMoisturePercent(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonNumber>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateBypassFlag(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMainIdentification(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Caers.Api.SchemaEntities.Identification>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(ReleasePointTypeCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateReleasePointTypeCode;
                return true;
            }
            else if (property.NameEquals(IdentificationUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateIdentification;
                return true;
            }
            else if (property.NameEquals(DescriptionUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateDescription;
                return true;
            }
            else if (property.NameEquals(StatusCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStatusCode;
                return true;
            }
            else if (property.NameEquals(StatusCodeYearUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStatusCodeYear;
                return true;
            }
            else if (property.NameEquals(CommentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateComment;
                return true;
            }
            else if (property.NameEquals(ExitGasFlowRateUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateExitGasFlowRate;
                return true;
            }
            else if (property.NameEquals(ExitGasTemperatureUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateExitGasTemperature;
                return true;
            }
            else if (property.NameEquals(ExitGasVelocityUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateExitGasVelocity;
                return true;
            }
            else if (property.NameEquals(FenceLineDistanceUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFenceLineDistance;
                return true;
            }
            else if (property.NameEquals(FugitiveAngleUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFugitiveAngle;
                return true;
            }
            else if (property.NameEquals(FugitiveHeightUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateFugitiveHeight;
                return true;
            }
            else if (property.NameEquals(StackDiameterUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStackDiameter;
                return true;
            }
            else if (property.NameEquals(StackHeightUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStackHeight;
                return true;
            }
            else if (property.NameEquals(StackWidthUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStackWidth;
                return true;
            }
            else if (property.NameEquals(StackLengthUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStackLength;
                return true;
            }
            else if (property.NameEquals(ReleasePointGeographicCoordinatesUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateReleasePointGeographicCoordinates;
                return true;
            }
            else if (property.NameEquals(ReleasePointIsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateReleasePointIsReadOnly;
                return true;
            }
            else if (property.NameEquals(StackHeightIsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStackHeightIsReadOnly;
                return true;
            }
            else if (property.NameEquals(StackDiameterIsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateStackDiameterIsReadOnly;
                return true;
            }
            else if (property.NameEquals(WidthIsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateWidthIsReadOnly;
                return true;
            }
            else if (property.NameEquals(LengthIsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateLengthIsReadOnly;
                return true;
            }
            else if (property.NameEquals(ExitGasVelocityIsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateExitGasVelocityIsReadOnly;
                return true;
            }
            else if (property.NameEquals(ExitGasFlowRateIsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateExitGasFlowRateIsReadOnly;
                return true;
            }
            else if (property.NameEquals(ExitGasTemperatureIsReadOnlyUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateExitGasTemperatureIsReadOnly;
                return true;
            }
            else if (property.NameEquals(PermitStatusBeginYearUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitStatusBeginYear;
                return true;
            }
            else if (property.NameEquals(PermitStatusEndYearUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitStatusEndYear;
                return true;
            }
            else if (property.NameEquals(ExitGasTemperatureAmbientUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateExitGasTemperatureAmbient;
                return true;
            }
            else if (property.NameEquals(ExhaustMoisturePercentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateExhaustMoisturePercent;
                return true;
            }
            else if (property.NameEquals(BypassFlagUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateBypassFlag;
                return true;
            }
            else if (property.NameEquals(MainIdentificationUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateMainIdentification;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(ReleasePointTypeCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateReleasePointTypeCode;
                return true;
            }
            else if (property.NameEquals(IdentificationJsonPropertyName))
            {
                propertyValidator = __CorvusValidateIdentification;
                return true;
            }
            else if (property.NameEquals(DescriptionJsonPropertyName))
            {
                propertyValidator = __CorvusValidateDescription;
                return true;
            }
            else if (property.NameEquals(StatusCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStatusCode;
                return true;
            }
            else if (property.NameEquals(StatusCodeYearJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStatusCodeYear;
                return true;
            }
            else if (property.NameEquals(CommentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateComment;
                return true;
            }
            else if (property.NameEquals(ExitGasFlowRateJsonPropertyName))
            {
                propertyValidator = __CorvusValidateExitGasFlowRate;
                return true;
            }
            else if (property.NameEquals(ExitGasTemperatureJsonPropertyName))
            {
                propertyValidator = __CorvusValidateExitGasTemperature;
                return true;
            }
            else if (property.NameEquals(ExitGasVelocityJsonPropertyName))
            {
                propertyValidator = __CorvusValidateExitGasVelocity;
                return true;
            }
            else if (property.NameEquals(FenceLineDistanceJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFenceLineDistance;
                return true;
            }
            else if (property.NameEquals(FugitiveAngleJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFugitiveAngle;
                return true;
            }
            else if (property.NameEquals(FugitiveHeightJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFugitiveHeight;
                return true;
            }
            else if (property.NameEquals(StackDiameterJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStackDiameter;
                return true;
            }
            else if (property.NameEquals(StackHeightJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStackHeight;
                return true;
            }
            else if (property.NameEquals(StackWidthJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStackWidth;
                return true;
            }
            else if (property.NameEquals(StackLengthJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStackLength;
                return true;
            }
            else if (property.NameEquals(ReleasePointGeographicCoordinatesJsonPropertyName))
            {
                propertyValidator = __CorvusValidateReleasePointGeographicCoordinates;
                return true;
            }
            else if (property.NameEquals(ReleasePointIsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidateReleasePointIsReadOnly;
                return true;
            }
            else if (property.NameEquals(StackHeightIsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStackHeightIsReadOnly;
                return true;
            }
            else if (property.NameEquals(StackDiameterIsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStackDiameterIsReadOnly;
                return true;
            }
            else if (property.NameEquals(WidthIsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidateWidthIsReadOnly;
                return true;
            }
            else if (property.NameEquals(LengthIsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidateLengthIsReadOnly;
                return true;
            }
            else if (property.NameEquals(ExitGasVelocityIsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidateExitGasVelocityIsReadOnly;
                return true;
            }
            else if (property.NameEquals(ExitGasFlowRateIsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidateExitGasFlowRateIsReadOnly;
                return true;
            }
            else if (property.NameEquals(ExitGasTemperatureIsReadOnlyJsonPropertyName))
            {
                propertyValidator = __CorvusValidateExitGasTemperatureIsReadOnly;
                return true;
            }
            else if (property.NameEquals(PermitStatusBeginYearJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitStatusBeginYear;
                return true;
            }
            else if (property.NameEquals(PermitStatusEndYearJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePermitStatusEndYear;
                return true;
            }
            else if (property.NameEquals(ExitGasTemperatureAmbientJsonPropertyName))
            {
                propertyValidator = __CorvusValidateExitGasTemperatureAmbient;
                return true;
            }
            else if (property.NameEquals(ExhaustMoisturePercentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateExhaustMoisturePercent;
                return true;
            }
            else if (property.NameEquals(BypassFlagJsonPropertyName))
            {
                propertyValidator = __CorvusValidateBypassFlag;
                return true;
            }
            else if (property.NameEquals(MainIdentificationJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMainIdentification;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}