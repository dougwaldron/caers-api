//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Caers.Api.SchemaEntities;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct EmissionsDataType
{
    /// <summary>
    /// JSON property name for <see cref = "EmissionCalculationMethodCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionCalculationMethodCodeUtf8JsonPropertyName => "emissionCalculationMethodCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmissionCalculationMethodCode"/>.
    /// </summary>
    public const string EmissionCalculationMethodCodeJsonPropertyName = "emissionCalculationMethodCode";
    /// <summary>
    /// JSON property name for <see cref = "EmissionFactor"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionFactorUtf8JsonPropertyName => "emissionFactor"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmissionFactor"/>.
    /// </summary>
    public const string EmissionFactorJsonPropertyName = "emissionFactor";
    /// <summary>
    /// JSON property name for <see cref = "EmissionFactorDenominatorUnitofMeasureCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionFactorDenominatorUnitofMeasureCodeUtf8JsonPropertyName => "emissionFactorDenominatorUnitofMeasureCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmissionFactorDenominatorUnitofMeasureCode"/>.
    /// </summary>
    public const string EmissionFactorDenominatorUnitofMeasureCodeJsonPropertyName = "emissionFactorDenominatorUnitofMeasureCode";
    /// <summary>
    /// JSON property name for <see cref = "EmissionFactorNumeratorUnitofMeasureCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionFactorNumeratorUnitofMeasureCodeUtf8JsonPropertyName => "emissionFactorNumeratorUnitofMeasureCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmissionFactorNumeratorUnitofMeasureCode"/>.
    /// </summary>
    public const string EmissionFactorNumeratorUnitofMeasureCodeJsonPropertyName = "emissionFactorNumeratorUnitofMeasureCode";
    /// <summary>
    /// JSON property name for <see cref = "EmissionFactorText"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionFactorTextUtf8JsonPropertyName => "emissionFactorText"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmissionFactorText"/>.
    /// </summary>
    public const string EmissionFactorTextJsonPropertyName = "emissionFactorText";
    /// <summary>
    /// JSON property name for <see cref = "EmissionsComment"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionsCommentUtf8JsonPropertyName => "emissionsComment"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmissionsComment"/>.
    /// </summary>
    public const string EmissionsCommentJsonPropertyName = "emissionsComment";
    /// <summary>
    /// JSON property name for <see cref = "EmissionsUnitofMeasureCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> EmissionsUnitofMeasureCodeUtf8JsonPropertyName => "emissionsUnitofMeasureCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "EmissionsUnitofMeasureCode"/>.
    /// </summary>
    public const string EmissionsUnitofMeasureCodeJsonPropertyName = "emissionsUnitofMeasureCode";
    /// <summary>
    /// JSON property name for <see cref = "PollutantCode"/>.
    /// </summary>
    public static ReadOnlySpan<byte> PollutantCodeUtf8JsonPropertyName => "pollutantCode"u8;

    /// <summary>
    /// JSON property name for <see cref = "PollutantCode"/>.
    /// </summary>
    public const string PollutantCodeJsonPropertyName = "pollutantCode";
    /// <summary>
    /// JSON property name for <see cref = "TotalEmissions"/>.
    /// </summary>
    public static ReadOnlySpan<byte> TotalEmissionsUtf8JsonPropertyName => "totalEmissions"u8;

    /// <summary>
    /// JSON property name for <see cref = "TotalEmissions"/>.
    /// </summary>
    public const string TotalEmissionsJsonPropertyName = "totalEmissions";
    /// <summary>
    /// Gets EmissionCalculationMethodCode.
    /// </summary>
    public Corvus.Json.JsonString EmissionCalculationMethodCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionCalculationMethodCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionCalculationMethodCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EmissionFactor.
    /// </summary>
    public Corvus.Json.JsonString EmissionFactor
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionFactorUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionFactorJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EmissionFactorDenominatorUnitofMeasureCode.
    /// </summary>
    public Corvus.Json.JsonString EmissionFactorDenominatorUnitofMeasureCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionFactorDenominatorUnitofMeasureCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionFactorDenominatorUnitofMeasureCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EmissionFactorNumeratorUnitofMeasureCode.
    /// </summary>
    public Corvus.Json.JsonString EmissionFactorNumeratorUnitofMeasureCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionFactorNumeratorUnitofMeasureCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionFactorNumeratorUnitofMeasureCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EmissionFactorText.
    /// </summary>
    public Corvus.Json.JsonString EmissionFactorText
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionFactorTextUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionFactorTextJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EmissionsComment.
    /// </summary>
    public Corvus.Json.JsonString EmissionsComment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionsCommentUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionsCommentJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets EmissionsUnitofMeasureCode.
    /// </summary>
    public Corvus.Json.JsonString EmissionsUnitofMeasureCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EmissionsUnitofMeasureCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EmissionsUnitofMeasureCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PollutantCode.
    /// </summary>
    public Corvus.Json.JsonString PollutantCode
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PollutantCodeUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PollutantCodeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets TotalEmissions.
    /// </summary>
    public Corvus.Json.JsonString TotalEmissions
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(TotalEmissionsUtf8JsonPropertyName, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(TotalEmissionsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "EmissionsDataType"/>.
    /// </summary>
    public static EmissionsDataType Create(Corvus.Json.JsonString pollutantCode, Corvus.Json.JsonString totalEmissions, Corvus.Json.JsonString? emissionCalculationMethodCode = null, Corvus.Json.JsonString? emissionFactor = null, Corvus.Json.JsonString? emissionFactorDenominatorUnitofMeasureCode = null, Corvus.Json.JsonString? emissionFactorNumeratorUnitofMeasureCode = null, Corvus.Json.JsonString? emissionFactorText = null, Corvus.Json.JsonString? emissionsComment = null, Corvus.Json.JsonString? emissionsUnitofMeasureCode = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(PollutantCodeJsonPropertyName, pollutantCode.AsAny);
        builder.Add(TotalEmissionsJsonPropertyName, totalEmissions.AsAny);
        if (emissionCalculationMethodCode is Corvus.Json.JsonString emissionCalculationMethodCode__)
        {
            builder.Add(EmissionCalculationMethodCodeJsonPropertyName, emissionCalculationMethodCode__.AsAny);
        }

        if (emissionFactor is Corvus.Json.JsonString emissionFactor__)
        {
            builder.Add(EmissionFactorJsonPropertyName, emissionFactor__.AsAny);
        }

        if (emissionFactorDenominatorUnitofMeasureCode is Corvus.Json.JsonString emissionFactorDenominatorUnitofMeasureCode__)
        {
            builder.Add(EmissionFactorDenominatorUnitofMeasureCodeJsonPropertyName, emissionFactorDenominatorUnitofMeasureCode__.AsAny);
        }

        if (emissionFactorNumeratorUnitofMeasureCode is Corvus.Json.JsonString emissionFactorNumeratorUnitofMeasureCode__)
        {
            builder.Add(EmissionFactorNumeratorUnitofMeasureCodeJsonPropertyName, emissionFactorNumeratorUnitofMeasureCode__.AsAny);
        }

        if (emissionFactorText is Corvus.Json.JsonString emissionFactorText__)
        {
            builder.Add(EmissionFactorTextJsonPropertyName, emissionFactorText__.AsAny);
        }

        if (emissionsComment is Corvus.Json.JsonString emissionsComment__)
        {
            builder.Add(EmissionsCommentJsonPropertyName, emissionsComment__.AsAny);
        }

        if (emissionsUnitofMeasureCode is Corvus.Json.JsonString emissionsUnitofMeasureCode__)
        {
            builder.Add(EmissionsUnitofMeasureCodeJsonPropertyName, emissionsUnitofMeasureCode__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets emissionCalculationMethodCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsDataType WithEmissionCalculationMethodCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EmissionCalculationMethodCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets emissionFactor.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsDataType WithEmissionFactor(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EmissionFactorJsonPropertyName, value);
    }

    /// <summary>
    /// Sets emissionFactorDenominatorUnitofMeasureCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsDataType WithEmissionFactorDenominatorUnitofMeasureCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EmissionFactorDenominatorUnitofMeasureCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets emissionFactorNumeratorUnitofMeasureCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsDataType WithEmissionFactorNumeratorUnitofMeasureCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EmissionFactorNumeratorUnitofMeasureCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets emissionFactorText.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsDataType WithEmissionFactorText(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EmissionFactorTextJsonPropertyName, value);
    }

    /// <summary>
    /// Sets emissionsComment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsDataType WithEmissionsComment(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EmissionsCommentJsonPropertyName, value);
    }

    /// <summary>
    /// Sets emissionsUnitofMeasureCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsDataType WithEmissionsUnitofMeasureCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(EmissionsUnitofMeasureCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets pollutantCode.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsDataType WithPollutantCode(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(PollutantCodeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets totalEmissions.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public EmissionsDataType WithTotalEmissions(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(TotalEmissionsJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidatePollutantCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateTotalEmissions(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmissionsUnitofMeasureCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmissionFactor(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmissionFactorNumeratorUnitofMeasureCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmissionFactorDenominatorUnitofMeasureCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmissionFactorText(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmissionCalculationMethodCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmissionsComment(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(PollutantCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidatePollutantCode;
                return true;
            }
            else if (property.NameEquals(TotalEmissionsUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateTotalEmissions;
                return true;
            }
            else if (property.NameEquals(EmissionsUnitofMeasureCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionsUnitofMeasureCode;
                return true;
            }
            else if (property.NameEquals(EmissionFactorUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionFactor;
                return true;
            }
            else if (property.NameEquals(EmissionFactorNumeratorUnitofMeasureCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionFactorNumeratorUnitofMeasureCode;
                return true;
            }
            else if (property.NameEquals(EmissionFactorDenominatorUnitofMeasureCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionFactorDenominatorUnitofMeasureCode;
                return true;
            }
            else if (property.NameEquals(EmissionFactorTextUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionFactorText;
                return true;
            }
            else if (property.NameEquals(EmissionCalculationMethodCodeUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionCalculationMethodCode;
                return true;
            }
            else if (property.NameEquals(EmissionsCommentUtf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionsComment;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(PollutantCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePollutantCode;
                return true;
            }
            else if (property.NameEquals(TotalEmissionsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateTotalEmissions;
                return true;
            }
            else if (property.NameEquals(EmissionsUnitofMeasureCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionsUnitofMeasureCode;
                return true;
            }
            else if (property.NameEquals(EmissionFactorJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionFactor;
                return true;
            }
            else if (property.NameEquals(EmissionFactorNumeratorUnitofMeasureCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionFactorNumeratorUnitofMeasureCode;
                return true;
            }
            else if (property.NameEquals(EmissionFactorDenominatorUnitofMeasureCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionFactorDenominatorUnitofMeasureCode;
                return true;
            }
            else if (property.NameEquals(EmissionFactorTextJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionFactorText;
                return true;
            }
            else if (property.NameEquals(EmissionCalculationMethodCodeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionCalculationMethodCode;
                return true;
            }
            else if (property.NameEquals(EmissionsCommentJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEmissionsComment;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}